{
  "hints": {
    "pointAdd()byte[]": {
      "call_config": {
        "no_op": "CALL"
      }
    },
    "scalarMult()byte[]": {
      "call_config": {
        "no_op": "CALL"
      }
    },
    "scalarMultBase()byte[]": {
      "call_config": {
        "no_op": "CALL"
      }
    },
    "pointSubgroup()bool": {
      "call_config": {
        "no_op": "CALL"
      }
    },
    "createApplication()void": {
      "call_config": {
        "no_op": "CREATE"
      }
    }
  },
  "bare_call_config": {
    "no_op": "NEVER",
    "opt_in": "NEVER",
    "close_out": "NEVER",
    "update_application": "NEVER",
    "delete_application": "NEVER"
  },
  "schema": {
    "local": {
      "declared": {},
      "reserved": {}
    },
    "global": {
      "declared": {},
      "reserved": {}
    }
  },
  "state": {
    "global": {
      "num_byte_slices": 0,
      "num_uints": 0
    },
    "local": {
      "num_byte_slices": 0,
      "num_uints": 0
    }
  },
  "source": {
    "approval": "I3ByYWdtYSB2ZXJzaW9uIDEwCgovLyBUaGlzIFRFQUwgd2FzIGdlbmVyYXRlZCBieSBURUFMU2NyaXB0IHYwLjYzLjAKLy8gaHR0cHM6Ly9naXRodWIuY29tL2FsZ29yYW5kZm91bmRhdGlvbi9URUFMU2NyaXB0CgovLyBUaGlzIGNvbnRyYWN0IGlzIGNvbXBsaWFudCB3aXRoIGFuZC9vciBpbXBsZW1lbnRzIHRoZSBmb2xsb3dpbmcgQVJDczogWyBBUkM0IF0KCi8vIFRoZSBmb2xsb3dpbmcgdGVuIGxpbmVzIG9mIFRFQUwgaGFuZGxlIGluaXRpYWwgcHJvZ3JhbSBmbG93Ci8vIFRoaXMgcGF0dGVybiBpcyB1c2VkIHRvIG1ha2UgaXQgZWFzeSBmb3IgYW55b25lIHRvIHBhcnNlIHRoZSBzdGFydCBvZiB0aGUgcHJvZ3JhbSBhbmQgZGV0ZXJtaW5lIGlmIGEgc3BlY2lmaWMgYWN0aW9uIGlzIGFsbG93ZWQKLy8gSGVyZSwgYWN0aW9uIHJlZmVycyB0byB0aGUgT25Db21wbGV0ZSBpbiBjb21iaW5hdGlvbiB3aXRoIHdoZXRoZXIgdGhlIGFwcCBpcyBiZWluZyBjcmVhdGVkIG9yIGNhbGxlZAovLyBFdmVyeSBwb3NzaWJsZSBhY3Rpb24gZm9yIHRoaXMgY29udHJhY3QgaXMgcmVwcmVzZW50ZWQgaW4gdGhlIHN3aXRjaCBzdGF0ZW1lbnQKLy8gSWYgdGhlIGFjdGlvbiBpcyBub3QgaW1wbG1lbnRlZCBpbiB0aGUgY29udHJhY3QsIGl0cyByZXBzZWN0aXZlIGJyYW5jaCB3aWxsIGJlICJOT1RfSU1QTE1FTlRFRCIgd2hpY2gganVzdCBjb250YWlucyAiZXJyIgp0eG4gQXBwbGljYXRpb25JRAppbnQgMAo+CmludCA2CioKdHhuIE9uQ29tcGxldGlvbgorCnN3aXRjaCBjcmVhdGVfTm9PcCBOT1RfSU1QTEVNRU5URUQgTk9UX0lNUExFTUVOVEVEIE5PVF9JTVBMRU1FTlRFRCBOT1RfSU1QTEVNRU5URUQgTk9UX0lNUExFTUVOVEVEIGNhbGxfTm9PcAoKTk9UX0lNUExFTUVOVEVEOgoJZXJyCgovLyBwb2ludEFkZCgpYnl0ZVtdCi8vCi8vIFBvaW50IGFkZAovLwovLyBAcmV0dXJucyBUaGUgcmVzdWx0IG9mIHRoZSBvcGVyYXRpb24KYWJpX3JvdXRlX3BvaW50QWRkOgoJYnl0ZSAweCAvLyBwdXNoIGVtcHR5IGJ5dGVzIHRvIGZpbGwgdGhlIHN0YWNrIGZyYW1lIGZvciB0aGlzIHN1YnJvdXRpbmUncyBsb2NhbCB2YXJpYWJsZXMKCgkvLyBleGVjdXRlIHBvaW50QWRkKClieXRlW10KCWNhbGxzdWIgcG9pbnRBZGQKCWludCAxCglyZXR1cm4KCnBvaW50QWRkOgoJcHJvdG8gMSAwCgoJLy8gY29udHJhY3RzL21haGJlci5hbGdvLnRzOjExCgkvLyByZXN1bHQgPSBlY19hZGQoCgkvLyAgICAgICAnQkxTMTJfMzgxZzEnLAoJLy8gICAgICAgaGV4KAoJLy8gICAgICAgICAnMTdmMWQzYTczMTk3ZDc5NDI2OTU2MzhjNGZhOWFjMGZjMzY4OGM0Zjk3NzRiOTA1YTE0ZTNhM2YxNzFiYWM1ODZjNTVlODNmZjk3YTFhZWZmYjNhZjAwYWRiMjJjNmJiMDhiM2Y0ODFlM2FhYTBmMWEwOWUzMGVkNzQxZDhhZTRmY2Y1ZTA5NWQ1ZDAwYWY2MDBkYjE4Y2IyYzA0YjNlZGQwM2NjNzQ0YTI4ODhhZTQwY2FhMjMyOTQ2YzVlN2UxJwoJLy8gICAgICAgKSwKCS8vICAgICAgIGhleCgKCS8vICAgICAgICAgJzE3ZjFkM2E3MzE5N2Q3OTQyNjk1NjM4YzRmYTlhYzBmYzM2ODhjNGY5Nzc0YjkwNWExNGUzYTNmMTcxYmFjNTg2YzU1ZTgzZmY5N2ExYWVmZmIzYWYwMGFkYjIyYzZiYjA4YjNmNDgxZTNhYWEwZjFhMDllMzBlZDc0MWQ4YWU0ZmNmNWUwOTVkNWQwMGFmNjAwZGIxOGNiMmMwNGIzZWRkMDNjYzc0NGEyODg4YWU0MGNhYTIzMjk0NmM1ZTdlMScKCS8vICAgICAgICkKCS8vICAgICApCglieXRlIDB4MTdmMWQzYTczMTk3ZDc5NDI2OTU2MzhjNGZhOWFjMGZjMzY4OGM0Zjk3NzRiOTA1YTE0ZTNhM2YxNzFiYWM1ODZjNTVlODNmZjk3YTFhZWZmYjNhZjAwYWRiMjJjNmJiMDhiM2Y0ODFlM2FhYTBmMWEwOWUzMGVkNzQxZDhhZTRmY2Y1ZTA5NWQ1ZDAwYWY2MDBkYjE4Y2IyYzA0YjNlZGQwM2NjNzQ0YTI4ODhhZTQwY2FhMjMyOTQ2YzVlN2UxCglieXRlIDB4MTdmMWQzYTczMTk3ZDc5NDI2OTU2MzhjNGZhOWFjMGZjMzY4OGM0Zjk3NzRiOTA1YTE0ZTNhM2YxNzFiYWM1ODZjNTVlODNmZjk3YTFhZWZmYjNhZjAwYWRiMjJjNmJiMDhiM2Y0ODFlM2FhYTBmMWEwOWUzMGVkNzQxZDhhZTRmY2Y1ZTA5NWQ1ZDAwYWY2MDBkYjE4Y2IyYzA0YjNlZGQwM2NjNzQ0YTI4ODhhZTQwY2FhMjMyOTQ2YzVlN2UxCgllY19hZGQgQkxTMTJfMzgxZzEKCWZyYW1lX2J1cnkgLTEgLy8gcmVzdWx0OiBieXRlcwoKCS8vIGNvbnRyYWN0cy9tYWhiZXIuYWxnby50czoyMAoJLy8gcmV0dXJuIHJlc3VsdDsKCWZyYW1lX2RpZyAtMSAvLyByZXN1bHQ6IGJ5dGVzCglkdXAKCWxlbgoJaXRvYgoJZXh0cmFjdCA2IDIKCXN3YXAKCWNvbmNhdAoJYnl0ZSAweDE1MWY3Yzc1Cglzd2FwCgljb25jYXQKCWxvZwoJcmV0c3ViCgovLyBzY2FsYXJNdWx0KClieXRlW10KLy8KLy8gU2NhbGFyIE11bHQKLy8KLy8gQHJldHVybnMgVGhlIHJlc3VsdCBvZiB0aGUgb3BlcmF0aW9uCmFiaV9yb3V0ZV9zY2FsYXJNdWx0OgoJYnl0ZSAweCAvLyBwdXNoIGVtcHR5IGJ5dGVzIHRvIGZpbGwgdGhlIHN0YWNrIGZyYW1lIGZvciB0aGlzIHN1YnJvdXRpbmUncyBsb2NhbCB2YXJpYWJsZXMKCgkvLyBleGVjdXRlIHNjYWxhck11bHQoKWJ5dGVbXQoJY2FsbHN1YiBzY2FsYXJNdWx0CglpbnQgMQoJcmV0dXJuCgpzY2FsYXJNdWx0OgoJcHJvdG8gMSAwCgoJLy8gY29udHJhY3RzL21haGJlci5hbGdvLnRzOjI5CgkvLyByZXN1bHQgPSBlY19zY2FsYXJfbXVsKCdCTjI1NGcxJywgaGV4KCcnKSwgaGV4KCcnKSkKCWJ5dGUgMHgKCWJ5dGUgMHgKCWVjX3NjYWxhcl9tdWwgQk4yNTRnMQoJZnJhbWVfYnVyeSAtMSAvLyByZXN1bHQ6IGJ5dGVzCgoJLy8gY29udHJhY3RzL21haGJlci5hbGdvLnRzOjMwCgkvLyByZXR1cm4gcmVzdWx0OwoJZnJhbWVfZGlnIC0xIC8vIHJlc3VsdDogYnl0ZXMKCWR1cAoJbGVuCglpdG9iCglleHRyYWN0IDYgMgoJc3dhcAoJY29uY2F0CglieXRlIDB4MTUxZjdjNzUKCXN3YXAKCWNvbmNhdAoJbG9nCglyZXRzdWIKCi8vIHNjYWxhck11bHRCYXNlKClieXRlW10KLy8KLy8gU2NhbGFyIE11bHQgQmFzZQovLyBTY2FsYXIgbXVsdGlwbGljYXRpb24gb2YgdGhlIGJhc2UgcG9pbnQKLy8gQHJldHVybnMgVGhlIHJlc3VsdCBvZiB0aGUgb3BlcmF0aW9uCmFiaV9yb3V0ZV9zY2FsYXJNdWx0QmFzZToKCWJ5dGUgMHggLy8gcHVzaCBlbXB0eSBieXRlcyB0byBmaWxsIHRoZSBzdGFjayBmcmFtZSBmb3IgdGhpcyBzdWJyb3V0aW5lJ3MgbG9jYWwgdmFyaWFibGVzCgoJLy8gZXhlY3V0ZSBzY2FsYXJNdWx0QmFzZSgpYnl0ZVtdCgljYWxsc3ViIHNjYWxhck11bHRCYXNlCglpbnQgMQoJcmV0dXJuCgpzY2FsYXJNdWx0QmFzZToKCXByb3RvIDEgMAoKCS8vIGNvbnRyYWN0cy9tYWhiZXIuYWxnby50czozOQoJLy8gcmVzdWx0ID0gZWNfc2NhbGFyX211bCgKCS8vICAgICAgICdCTjI1NGcxJywKCS8vICAgICAgIGhleCgKCS8vICAgICAgICAgJzAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDEwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAyJwoJLy8gICAgICAgKSwKCS8vICAgICAgICcxJwoJLy8gICAgICkKCWJ5dGUgMHgwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAxMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMgoJYnl0ZSAweDMxIC8vICIxIgoJZWNfc2NhbGFyX211bCBCTjI1NGcxCglmcmFtZV9idXJ5IC0xIC8vIHJlc3VsdDogYnl0ZXMKCgkvLyBjb250cmFjdHMvbWFoYmVyLmFsZ28udHM6NDYKCS8vIHJldHVybiByZXN1bHQ7CglmcmFtZV9kaWcgLTEgLy8gcmVzdWx0OiBieXRlcwoJZHVwCglsZW4KCWl0b2IKCWV4dHJhY3QgNiAyCglzd2FwCgljb25jYXQKCWJ5dGUgMHgxNTFmN2M3NQoJc3dhcAoJY29uY2F0Cglsb2cKCXJldHN1YgoKLy8gcG9pbnRTdWJncm91cCgpYm9vbAovLwovLyBQb2ludCBDaGVjawovLwovLyBAcmV0dXJucyBUaGUgcmVzdWx0IG9mIHRoZSBvcGVyYXRpb24KYWJpX3JvdXRlX3BvaW50U3ViZ3JvdXA6CglieXRlIDB4IC8vIHB1c2ggZW1wdHkgYnl0ZXMgdG8gZmlsbCB0aGUgc3RhY2sgZnJhbWUgZm9yIHRoaXMgc3Vicm91dGluZSdzIGxvY2FsIHZhcmlhYmxlcwoKCS8vIGV4ZWN1dGUgcG9pbnRTdWJncm91cCgpYm9vbAoJY2FsbHN1YiBwb2ludFN1Ymdyb3VwCglpbnQgMQoJcmV0dXJuCgpwb2ludFN1Ymdyb3VwOgoJcHJvdG8gMSAwCgoJLy8gY29udHJhY3RzL21haGJlci5hbGdvLnRzOjU1CgkvLyBjaGVjazEgPSBlY19zdWJncm91cF9jaGVjaygKCS8vICAgICAgICdCTjI1NGcxJywKCS8vICAgICAgIGhleCgKCS8vICAgICAgICAgJzAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDEwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAyJwoJLy8gICAgICAgKQoJLy8gICAgICkKCWJ5dGUgMHgwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAxMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMgoJZWNfc3ViZ3JvdXBfY2hlY2sgQk4yNTRnMQoJZnJhbWVfYnVyeSAtMSAvLyBjaGVjazE6IGJvb2wKCgkvLyBjb250cmFjdHMvbWFoYmVyLmFsZ28udHM6NzIKCS8vIHJldHVybiBjaGVjazE7CglmcmFtZV9kaWcgLTEgLy8gY2hlY2sxOiBib29sCglieXRlIDB4MDAKCWludCAwCgl1bmNvdmVyIDIKCXNldGJpdAoJYnl0ZSAweDE1MWY3Yzc1Cglzd2FwCgljb25jYXQKCWxvZwoJcmV0c3ViCgphYmlfcm91dGVfY3JlYXRlQXBwbGljYXRpb246CglpbnQgMQoJcmV0dXJuCgpjcmVhdGVfTm9PcDoKCW1ldGhvZCAiY3JlYXRlQXBwbGljYXRpb24oKXZvaWQiCgl0eG5hIEFwcGxpY2F0aW9uQXJncyAwCgltYXRjaCBhYmlfcm91dGVfY3JlYXRlQXBwbGljYXRpb24KCWVycgoKY2FsbF9Ob09wOgoJbWV0aG9kICJwb2ludEFkZCgpYnl0ZVtdIgoJbWV0aG9kICJzY2FsYXJNdWx0KClieXRlW10iCgltZXRob2QgInNjYWxhck11bHRCYXNlKClieXRlW10iCgltZXRob2QgInBvaW50U3ViZ3JvdXAoKWJvb2wiCgl0eG5hIEFwcGxpY2F0aW9uQXJncyAwCgltYXRjaCBhYmlfcm91dGVfcG9pbnRBZGQgYWJpX3JvdXRlX3NjYWxhck11bHQgYWJpX3JvdXRlX3NjYWxhck11bHRCYXNlIGFiaV9yb3V0ZV9wb2ludFN1Ymdyb3VwCgllcnI=",
    "clear": "I3ByYWdtYSB2ZXJzaW9uIDEw"
  },
  "contract": {
    "name": "Mahber",
    "desc": "",
    "methods": [
      {
        "name": "pointAdd",
        "args": [],
        "desc": "Point add",
        "returns": {
          "type": "byte[]",
          "desc": "The result of the operation"
        }
      },
      {
        "name": "scalarMult",
        "args": [],
        "desc": "Scalar Mult",
        "returns": {
          "type": "byte[]",
          "desc": "The result of the operation"
        }
      },
      {
        "name": "scalarMultBase",
        "args": [],
        "desc": "Scalar Mult BaseScalar multiplication of the base point",
        "returns": {
          "type": "byte[]",
          "desc": "The result of the operation"
        }
      },
      {
        "name": "pointSubgroup",
        "args": [],
        "desc": "Point Check",
        "returns": {
          "type": "bool",
          "desc": "The result of the operation"
        }
      },
      {
        "name": "createApplication",
        "desc": "",
        "returns": {
          "type": "void",
          "desc": ""
        },
        "args": []
      }
    ]
  }
}