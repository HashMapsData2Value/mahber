{
  "hints": {
    "createApplication()void": {
      "call_config": {
        "no_op": "CREATE"
      }
    },
    "dummyOpUp(uint64)uint64": {
      "call_config": {
        "no_op": "CALL"
      }
    },
    "publicScalarMultBase(byte[])byte[]": {
      "call_config": {
        "no_op": "CALL"
      }
    },
    "publicScalarMult(byte[],byte[])byte[]": {
      "call_config": {
        "no_op": "CALL"
      }
    },
    "publicValidPoint(byte[])bool": {
      "call_config": {
        "no_op": "CALL"
      }
    },
    "publicPointAdd(byte[],byte[])byte[]": {
      "call_config": {
        "no_op": "CALL"
      }
    },
    "publicHashPointToPoint(byte[])byte[]": {
      "call_config": {
        "no_op": "CALL"
      }
    },
    "publicChallenge(byte[],byte[],byte[],byte[],byte[])byte[]": {
      "call_config": {
        "no_op": "CALL"
      }
    },
    "publicChallengeLsig(byte[],byte[],byte[],byte[],byte[],pay)void": {
      "call_config": {
        "no_op": "CALL"
      }
    },
    "deposit(pay,byte[])uint64[]": {
      "call_config": {
        "no_op": "CALL"
      }
    },
    "initWithdrawalSession(pay,byte[],byte[])byte[32]": {
      "call_config": {
        "no_op": "CALL"
      }
    },
    "createUploadPrecomputedChallengesBox(pay,byte[],uint64,uint64)byte[32]": {
      "call_config": {
        "no_op": "CALL"
      }
    },
    "uploadPrecomputedChallenges(byte[],uint64,byte[])byte[32]": {
      "call_config": {
        "no_op": "CALL"
      }
    },
    "createIntermediateChallengesBox(pay,byte[],uint64,uint64)byte[32]": {
      "call_config": {
        "no_op": "CALL"
      }
    },
    "computeIndividualChallenge(byte[],byte[],uint64,byte[],uint64,uint64)(byte[32],uint64)": {
      "call_config": {
        "no_op": "CALL"
      }
    }
  },
  "bare_call_config": {
    "no_op": "NEVER",
    "opt_in": "NEVER",
    "close_out": "NEVER",
    "update_application": "NEVER",
    "delete_application": "NEVER"
  },
  "schema": {
    "local": {
      "declared": {},
      "reserved": {}
    },
    "global": {
      "declared": {
        "denomination": {
          "type": "uint64",
          "key": "denomination"
        },
        "asaId": {
          "type": "uint64",
          "key": "asaId"
        },
        "pkIndex": {
          "type": "uint64",
          "key": "pkIndex"
        }
      },
      "reserved": {}
    }
  },
  "state": {
    "global": {
      "num_byte_slices": 0,
      "num_uints": 3
    },
    "local": {
      "num_byte_slices": 0,
      "num_uints": 0
    }
  },
  "source": {
    "approval": "I3ByYWdtYSB2ZXJzaW9uIDEwCgovLyBUaGlzIFRFQUwgd2FzIGdlbmVyYXRlZCBieSBURUFMU2NyaXB0IHYwLjc5LjIKLy8gaHR0cHM6Ly9naXRodWIuY29tL2FsZ29yYW5kZm91bmRhdGlvbi9URUFMU2NyaXB0CgovLyBUaGlzIGNvbnRyYWN0IGlzIGNvbXBsaWFudCB3aXRoIGFuZC9vciBpbXBsZW1lbnRzIHRoZSBmb2xsb3dpbmcgQVJDczogWyBBUkM0IF0KCi8vIFRoZSBmb2xsb3dpbmcgdGVuIGxpbmVzIG9mIFRFQUwgaGFuZGxlIGluaXRpYWwgcHJvZ3JhbSBmbG93Ci8vIFRoaXMgcGF0dGVybiBpcyB1c2VkIHRvIG1ha2UgaXQgZWFzeSBmb3IgYW55b25lIHRvIHBhcnNlIHRoZSBzdGFydCBvZiB0aGUgcHJvZ3JhbSBhbmQgZGV0ZXJtaW5lIGlmIGEgc3BlY2lmaWMgYWN0aW9uIGlzIGFsbG93ZWQKLy8gSGVyZSwgYWN0aW9uIHJlZmVycyB0byB0aGUgT25Db21wbGV0ZSBpbiBjb21iaW5hdGlvbiB3aXRoIHdoZXRoZXIgdGhlIGFwcCBpcyBiZWluZyBjcmVhdGVkIG9yIGNhbGxlZAovLyBFdmVyeSBwb3NzaWJsZSBhY3Rpb24gZm9yIHRoaXMgY29udHJhY3QgaXMgcmVwcmVzZW50ZWQgaW4gdGhlIHN3aXRjaCBzdGF0ZW1lbnQKLy8gSWYgdGhlIGFjdGlvbiBpcyBub3QgaW1wbG1lbnRlZCBpbiB0aGUgY29udHJhY3QsIGl0cyByZXNwZWN0aXZlIGJyYW5jaCB3aWxsIGJlICJOT1RfSU1QTEVNRU5URUQiIHdoaWNoIGp1c3QgY29udGFpbnMgImVyciIKdHhuIEFwcGxpY2F0aW9uSUQKIQppbnQgNgoqCnR4biBPbkNvbXBsZXRpb24KKwpzd2l0Y2ggY2FsbF9Ob09wIE5PVF9JTVBMRU1FTlRFRCBOT1RfSU1QTEVNRU5URUQgTk9UX0lNUExFTUVOVEVEIE5PVF9JTVBMRU1FTlRFRCBOT1RfSU1QTEVNRU5URUQgY3JlYXRlX05vT3AgTk9UX0lNUExFTUVOVEVEIE5PVF9JTVBMRU1FTlRFRCBOT1RfSU1QTEVNRU5URUQgTk9UX0lNUExFTUVOVEVEIE5PVF9JTVBMRU1FTlRFRAoKTk9UX0lNUExFTUVOVEVEOgoJZXJyCgovLyBjcmVhdGVBcHBsaWNhdGlvbigpdm9pZAphYmlfcm91dGVfY3JlYXRlQXBwbGljYXRpb246CgkvLyBleGVjdXRlIGNyZWF0ZUFwcGxpY2F0aW9uKCl2b2lkCgljYWxsc3ViIGNyZWF0ZUFwcGxpY2F0aW9uCglpbnQgMQoJcmV0dXJuCgovLyBjcmVhdGVBcHBsaWNhdGlvbigpOiB2b2lkCmNyZWF0ZUFwcGxpY2F0aW9uOgoJcHJvdG8gMCAwCgoJLy8gY29udHJhY3RzL21haGJlci5hbGdvLnRzOjQ2CgkvLyB0aGlzLmRlbm9taW5hdGlvbi52YWx1ZSA9IDEwMDAgKiAxMDAwMDAwCglieXRlIDB4NjQ2NTZlNmY2ZDY5NmU2MTc0Njk2ZjZlIC8vICJkZW5vbWluYXRpb24iCglpbnQgMTAwMDAwMDAwMAoJYXBwX2dsb2JhbF9wdXQKCgkvLyBjb250cmFjdHMvbWFoYmVyLmFsZ28udHM6NDcKCS8vIHRoaXMuYXNhSWQudmFsdWUgPSAwCglieXRlIDB4NjE3MzYxNDk2NCAvLyAiYXNhSWQiCglpbnQgMAoJYXBwX2dsb2JhbF9wdXQKCgkvLyBjb250cmFjdHMvbWFoYmVyLmFsZ28udHM6NDgKCS8vIHRoaXMucGtJbmRleC52YWx1ZSA9IDAKCWJ5dGUgMHg3MDZiNDk2ZTY0NjU3OCAvLyAicGtJbmRleCIKCWludCAwCglhcHBfZ2xvYmFsX3B1dAoJcmV0c3ViCgovLyBkdW1teU9wVXAodWludDY0KXVpbnQ2NAphYmlfcm91dGVfZHVtbXlPcFVwOgoJLy8gVGhlIEFCSSByZXR1cm4gcHJlZml4CglieXRlIDB4MTUxZjdjNzUKCgkvLyBpOiB1aW50NjQKCXR4bmEgQXBwbGljYXRpb25BcmdzIDEKCWJ0b2kKCgkvLyBleGVjdXRlIGR1bW15T3BVcCh1aW50NjQpdWludDY0CgljYWxsc3ViIGR1bW15T3BVcAoJaXRvYgoJY29uY2F0Cglsb2cKCWludCAxCglyZXR1cm4KCi8vIGR1bW15T3BVcChpOiBudW1iZXIpOiBudW1iZXIKLy8KLy8gRHVtbXkgT3AgVXAKLy8gRHVtbXkgb3BlcmF0aW9uIHRvIGdldCBtb3JlIG9wY29kZSBidWRnZXQKLy8gQGkgLSBUaGUgbnVtYmVyIHRvIHJldHVybiwgbmVjc3NhcnkgdG8gZGVkdXBsaWNhdGUgdGhlIG5hbWUKLy8gQHJldHVybnMgdGhlIG51bWJlciAoYnV0IHdlIGRvIG5vdGhpbmcgd2l0aCBpdCkKZHVtbXlPcFVwOgoJcHJvdG8gMSAxCgoJLy8gY29udHJhY3RzL21haGJlci5hbGdvLnRzOjU3CgkvLyByZXR1cm4gaTsKCWZyYW1lX2RpZyAtMSAvLyBpOiBudW1iZXIKCXJldHN1YgoKLy8gc2NhbGFyTXVsdEJhc2Uoc2NhbGFyOiBieXRlcyk6IGJ5dGVzCi8vCi8vIFNjYWxhciBNdWx0IEJhc2UKLy8gU2NhbGFyIG11bHRpcGxpY2F0aW9uIG9mIHRoZSBiYXNlIHBvaW50Ci8vIEBzY2FsYXIgLSBUaGUgc2NhbGFyIHRvIG11bHRpcGx5IHRoZSBiYXNlIHBvaW50IGJ5LgovLyBAcmV0dXJucyBhIHBvaW50IG9uIHRoZSBjdXJ2ZQpzY2FsYXJNdWx0QmFzZToKCXByb3RvIDEgMQoKCS8vIFB1c2ggZW1wdHkgYnl0ZXMgYWZ0ZXIgdGhlIGZyYW1lIHBvaW50ZXIgdG8gcmVzZXJ2ZSBzcGFjZSBmb3IgbG9jYWwgdmFyaWFibGVzCglieXRlIDB4CgoJLy8gY29udHJhY3RzL21haGJlci5hbGdvLnRzOjY2CgkvLyByZXN1bHQgPSBlY1NjYWxhck11bCgKCS8vICAgICAgICJCTjI1NGcxIiwKCS8vICAgICAgIGhleCgKCS8vICAgICAgICAgIjAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDEwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAyIgoJLy8gICAgICAgKSwKCS8vICAgICAgIHNjYWxhcgoJLy8gICAgICkKCWJ5dGUgMHgwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAxMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMgoJZnJhbWVfZGlnIC0xIC8vIHNjYWxhcjogYnl0ZXMKCWVjX3NjYWxhcl9tdWwgQk4yNTRnMQoJZnJhbWVfYnVyeSAwIC8vIHJlc3VsdDogYnl0ZVtdCgoJLy8gY29udHJhY3RzL21haGJlci5hbGdvLnRzOjczCgkvLyByZXR1cm4gcmVzdWx0OwoJZnJhbWVfZGlnIDAgLy8gcmVzdWx0OiBieXRlW10KCgkvLyBzZXQgdGhlIHN1YnJvdXRpbmUgcmV0dXJuIHZhbHVlCglmcmFtZV9idXJ5IDAKCXJldHN1YgoKLy8gcHVibGljU2NhbGFyTXVsdEJhc2UoYnl0ZVtdKWJ5dGVbXQphYmlfcm91dGVfcHVibGljU2NhbGFyTXVsdEJhc2U6CgkvLyBUaGUgQUJJIHJldHVybiBwcmVmaXgKCWJ5dGUgMHgxNTFmN2M3NQoKCS8vIHNjYWxhcjogYnl0ZVtdCgl0eG5hIEFwcGxpY2F0aW9uQXJncyAxCglleHRyYWN0IDIgMAoKCS8vIGV4ZWN1dGUgcHVibGljU2NhbGFyTXVsdEJhc2UoYnl0ZVtdKWJ5dGVbXQoJY2FsbHN1YiBwdWJsaWNTY2FsYXJNdWx0QmFzZQoJZHVwCglsZW4KCWl0b2IKCWV4dHJhY3QgNiAyCglzd2FwCgljb25jYXQKCWNvbmNhdAoJbG9nCglpbnQgMQoJcmV0dXJuCgovLyBwdWJsaWNTY2FsYXJNdWx0QmFzZShzY2FsYXI6IGJ5dGVzKTogYnl0ZXMKLy8KLy8gcHVibGljU2NhbGFyTXVsdEJhc2UKLy8gUHVibGljIHdyYXBwZXIgYXJvdW5kIHRoZSBzY2FsYXJNdWx0QmFzZSBtZXRob2QsIGFsbG93aW5nIGl0IHRvIGJlIHRlc3RlZCBkaXJlY3RseS4KLy8gQHNjYWxhciAtIFRoZSBzY2FsYXIgdG8gbXVsdGlwbHkgdGhlIGJhc2Vwb2ludCBieS4KLy8gQHJldHVybnMgdGhlIGNvbnRlbnQgb2YgdGhlIHNjYWxhck11bHRCYXNlIGNhbGwKcHVibGljU2NhbGFyTXVsdEJhc2U6Cglwcm90byAxIDEKCgkvLyBjb250cmFjdHMvbWFoYmVyLmFsZ28udHM6ODIKCS8vIHJldHVybiB0aGlzLnNjYWxhck11bHRCYXNlKHNjYWxhcik7CglmcmFtZV9kaWcgLTEgLy8gc2NhbGFyOiBieXRlcwoJY2FsbHN1YiBzY2FsYXJNdWx0QmFzZQoJcmV0c3ViCgovLyBzY2FsYXJNdWx0KHNjYWxhcjogYnl0ZXMsIHBvaW50OiBieXRlcyk6IGJ5dGVzCi8vCi8vIFNjYWxhciBNdWx0Ci8vIFNjYWxhciBtdWx0aXBsaWNhdGlvbiB3aXRoIGEgc3VwcGxpZWQgcG9pbnQKLy8gQHNjYWxhciAtIFRoZSBzY2FsYXIgdG8gbXVsdGlwbHkgdGhlIHBvaW50IHdpdGgKLy8gQHBvaW50IC0gVGhlIHBvaW50IHRoYXQgaXMgbXVsdGlwbGllZCB3aXRoIHRoZSBzY2FsYXIKLy8gQHJldHVybnMgYSBwb2ludCBvbiB0aGUgY3VydmUKc2NhbGFyTXVsdDoKCXByb3RvIDIgMQoKCS8vIFB1c2ggZW1wdHkgYnl0ZXMgYWZ0ZXIgdGhlIGZyYW1lIHBvaW50ZXIgdG8gcmVzZXJ2ZSBzcGFjZSBmb3IgbG9jYWwgdmFyaWFibGVzCglieXRlIDB4CgoJLy8gY29udHJhY3RzL21haGJlci5hbGdvLnRzOjkyCgkvLyByZXN1bHQgPSBlY1NjYWxhck11bCgiQk4yNTRnMSIsIHBvaW50LCBzY2FsYXIpCglmcmFtZV9kaWcgLTIgLy8gcG9pbnQ6IGJ5dGVzCglmcmFtZV9kaWcgLTEgLy8gc2NhbGFyOiBieXRlcwoJZWNfc2NhbGFyX211bCBCTjI1NGcxCglmcmFtZV9idXJ5IDAgLy8gcmVzdWx0OiBieXRlW10KCgkvLyBjb250cmFjdHMvbWFoYmVyLmFsZ28udHM6OTMKCS8vIHJldHVybiByZXN1bHQ7CglmcmFtZV9kaWcgMCAvLyByZXN1bHQ6IGJ5dGVbXQoKCS8vIHNldCB0aGUgc3Vicm91dGluZSByZXR1cm4gdmFsdWUKCWZyYW1lX2J1cnkgMAoJcmV0c3ViCgovLyBwdWJsaWNTY2FsYXJNdWx0KGJ5dGVbXSxieXRlW10pYnl0ZVtdCmFiaV9yb3V0ZV9wdWJsaWNTY2FsYXJNdWx0OgoJLy8gVGhlIEFCSSByZXR1cm4gcHJlZml4CglieXRlIDB4MTUxZjdjNzUKCgkvLyBwb2ludDogYnl0ZVtdCgl0eG5hIEFwcGxpY2F0aW9uQXJncyAyCglleHRyYWN0IDIgMAoKCS8vIHNjYWxhcjogYnl0ZVtdCgl0eG5hIEFwcGxpY2F0aW9uQXJncyAxCglleHRyYWN0IDIgMAoKCS8vIGV4ZWN1dGUgcHVibGljU2NhbGFyTXVsdChieXRlW10sYnl0ZVtdKWJ5dGVbXQoJY2FsbHN1YiBwdWJsaWNTY2FsYXJNdWx0CglkdXAKCWxlbgoJaXRvYgoJZXh0cmFjdCA2IDIKCXN3YXAKCWNvbmNhdAoJY29uY2F0Cglsb2cKCWludCAxCglyZXR1cm4KCi8vIHB1YmxpY1NjYWxhck11bHQoc2NhbGFyOiBieXRlcywgcG9pbnQ6IGJ5dGVzKTogYnl0ZXMKLy8KLy8gcHVibGljU2NhbGFyTXVsdAovLyBQdWJsaWMgd3JhcHBlciBhcm91bmQgdGhlIHNjYWxhck11bHQgbWV0aG9kLCBhbGxvd2luZyBpdCB0byBiZSB0ZXN0ZWQgZGlyZWN0bHkuCi8vIEBzY2FsYXIgLSBUaGUgc2NhbGFyIHRvIG11bHRpcGx5IHRoZSBwb2ludCB3aXRoCi8vIEBwb2ludCAtIFRoZSBwb2ludCB0aGF0IGlzIG11bHRpcGxpZWQgd2l0aCB0aGUgc2NhbGFyCi8vIEByZXR1cm5zIHRoZSBjb250ZW50IG9mIHRoZSBzY2FsYXJNdWx0IGNhbGwKcHVibGljU2NhbGFyTXVsdDoKCXByb3RvIDIgMQoKCS8vIGNvbnRyYWN0cy9tYWhiZXIuYWxnby50czoxMDMKCS8vIHJldHVybiB0aGlzLnNjYWxhck11bHQoc2NhbGFyLCBwb2ludCk7CglmcmFtZV9kaWcgLTIgLy8gcG9pbnQ6IGJ5dGVzCglmcmFtZV9kaWcgLTEgLy8gc2NhbGFyOiBieXRlcwoJY2FsbHN1YiBzY2FsYXJNdWx0CglyZXRzdWIKCi8vIHZhbGlkUG9pbnQocG9pbnQ6IGJ5dGVzKTogYm9vbGVhbgovLwovLyB2YWxpZFBvaW50Ci8vIENoZWNrcyBpZiB0aGUgcG9pbnQgaXMgdmFsaWQgKG9uIGN1cnZlKQovLyBAcG9pbnQgLSBUaGUgcG9pbnQgdG8gY2hlY2sKLy8gQHJldHVybnMgdHJ1ZSBpZiB0aGUgcG9pbnQgaXMgdmFsaWQsIGZhbHNlIG90aGVyd2lzZQp2YWxpZFBvaW50OgoJcHJvdG8gMSAxCgoJLy8gY29udHJhY3RzL21haGJlci5hbGdvLnRzOjExMgoJLy8gcmV0dXJuIGVjU3ViZ3JvdXBDaGVjaygiQk4yNTRnMSIsIHBvaW50KTsKCWZyYW1lX2RpZyAtMSAvLyBwb2ludDogYnl0ZXMKCWVjX3N1Ymdyb3VwX2NoZWNrIEJOMjU0ZzEKCXJldHN1YgoKLy8gcHVibGljVmFsaWRQb2ludChieXRlW10pYm9vbAphYmlfcm91dGVfcHVibGljVmFsaWRQb2ludDoKCS8vIFRoZSBBQkkgcmV0dXJuIHByZWZpeAoJYnl0ZSAweDE1MWY3Yzc1CgoJLy8gcG9pbnQ6IGJ5dGVbXQoJdHhuYSBBcHBsaWNhdGlvbkFyZ3MgMQoJZXh0cmFjdCAyIDAKCgkvLyBleGVjdXRlIHB1YmxpY1ZhbGlkUG9pbnQoYnl0ZVtdKWJvb2wKCWNhbGxzdWIgcHVibGljVmFsaWRQb2ludAoJYnl0ZSAweDAwCglpbnQgMAoJdW5jb3ZlciAyCglzZXRiaXQKCWNvbmNhdAoJbG9nCglpbnQgMQoJcmV0dXJuCgovLyBwdWJsaWNWYWxpZFBvaW50KHBvaW50OiBieXRlcyk6IGJvb2xlYW4KLy8KLy8gcHVibGljVmFsaWRQb2ludAovLyBQdWJsaWMgd3JhcHBlciBhcm91bmQgdGhlIHZhbGlkUG9pbnQgbWV0aG9kLCBhbGxvd2luZyBpdCB0byBiZSB0ZXN0ZWQgZGlyZWN0bHkuCi8vIEBwb2ludCAtIFRoZSBwb2ludCB0byBjaGVjawovLyBAcmV0dXJucyB0aGUgY29udGVudCBvZiB0aGUgdmFsaWRQb2ludCBjYWxsCnB1YmxpY1ZhbGlkUG9pbnQ6Cglwcm90byAxIDEKCgkvLyBjb250cmFjdHMvbWFoYmVyLmFsZ28udHM6MTIxCgkvLyByZXR1cm4gdGhpcy52YWxpZFBvaW50KHBvaW50KTsKCWZyYW1lX2RpZyAtMSAvLyBwb2ludDogYnl0ZXMKCWNhbGxzdWIgdmFsaWRQb2ludAoJcmV0c3ViCgovLyBwb2ludEFkZChwb2ludEE6IGJ5dGVzLCBwb2ludEI6IGJ5dGVzKTogYnl0ZXMKLy8KLy8gUG9pbnQgYWRkCi8vIEFkZHMgdHdvIHBvaW50cyBvbiB0aGUgY3VydmUKLy8gQHBhcmFtIHBvaW50QSAtIFRoZSBmaXJzdCBwb2ludAovLyBAcGFyYW0gcG9pbnRCIC0gVGhlIHNlY29uZCBwb2ludAovLyBAcmV0dXJucyBUaGUgcmVzdWx0IG9mIHRoZSBvcGVyYXRpb24KcG9pbnRBZGQ6Cglwcm90byAyIDEKCgkvLyBQdXNoIGVtcHR5IGJ5dGVzIGFmdGVyIHRoZSBmcmFtZSBwb2ludGVyIHRvIHJlc2VydmUgc3BhY2UgZm9yIGxvY2FsIHZhcmlhYmxlcwoJYnl0ZSAweAoKCS8vIGNvbnRyYWN0cy9tYWhiZXIuYWxnby50czoxMzEKCS8vIHJlc3VsdCA9IGVjQWRkKCJCTjI1NGcxIiwgcG9pbnRBLCBwb2ludEIpCglmcmFtZV9kaWcgLTEgLy8gcG9pbnRBOiBieXRlcwoJZnJhbWVfZGlnIC0yIC8vIHBvaW50QjogYnl0ZXMKCWVjX2FkZCBCTjI1NGcxCglmcmFtZV9idXJ5IDAgLy8gcmVzdWx0OiBieXRlW10KCgkvLyBjb250cmFjdHMvbWFoYmVyLmFsZ28udHM6MTMyCgkvLyByZXR1cm4gcmVzdWx0OwoJZnJhbWVfZGlnIDAgLy8gcmVzdWx0OiBieXRlW10KCgkvLyBzZXQgdGhlIHN1YnJvdXRpbmUgcmV0dXJuIHZhbHVlCglmcmFtZV9idXJ5IDAKCXJldHN1YgoKLy8gcHVibGljUG9pbnRBZGQoYnl0ZVtdLGJ5dGVbXSlieXRlW10KYWJpX3JvdXRlX3B1YmxpY1BvaW50QWRkOgoJLy8gVGhlIEFCSSByZXR1cm4gcHJlZml4CglieXRlIDB4MTUxZjdjNzUKCgkvLyBwb2ludEI6IGJ5dGVbXQoJdHhuYSBBcHBsaWNhdGlvbkFyZ3MgMgoJZXh0cmFjdCAyIDAKCgkvLyBwb2ludEE6IGJ5dGVbXQoJdHhuYSBBcHBsaWNhdGlvbkFyZ3MgMQoJZXh0cmFjdCAyIDAKCgkvLyBleGVjdXRlIHB1YmxpY1BvaW50QWRkKGJ5dGVbXSxieXRlW10pYnl0ZVtdCgljYWxsc3ViIHB1YmxpY1BvaW50QWRkCglkdXAKCWxlbgoJaXRvYgoJZXh0cmFjdCA2IDIKCXN3YXAKCWNvbmNhdAoJY29uY2F0Cglsb2cKCWludCAxCglyZXR1cm4KCi8vIHB1YmxpY1BvaW50QWRkKHBvaW50QTogYnl0ZXMsIHBvaW50QjogYnl0ZXMpOiBieXRlcwovLwovLyBwdWJsaWNQb2ludEFkZAovLyBQdWJsaWMgd3JhcHBlciBhcm91bmQgdGhlIHBvaW50QWRkIG1ldGhvZCwgYWxsb3dpbmcgaXQgdG8gYmUgdGVzdGVkIGRpcmVjdGx5LgovLyBAcGFyYW0gcG9pbnRBIC0gVGhlIGZpcnN0IHBvaW50Ci8vIEBwYXJhbSBwb2ludEIgLSBUaGUgc2Vjb25kIHBvaW50Ci8vIEByZXR1cm5zIHRoZSBjb250ZW50IG9mIHRoZSBwb2ludEFkZCBjYWxsCnB1YmxpY1BvaW50QWRkOgoJcHJvdG8gMiAxCgoJLy8gY29udHJhY3RzL21haGJlci5hbGdvLnRzOjE0MgoJLy8gcmV0dXJuIHRoaXMucG9pbnRBZGQocG9pbnRBLCBwb2ludEIpOwoJZnJhbWVfZGlnIC0yIC8vIHBvaW50QjogYnl0ZXMKCWZyYW1lX2RpZyAtMSAvLyBwb2ludEE6IGJ5dGVzCgljYWxsc3ViIHBvaW50QWRkCglyZXRzdWIKCi8vIGhhc2hQb2ludFRvUG9pbnQocG9pbnQ6IGJ5dGVzKTogYnl0ZXMKLy8KLy8gaGFzaFBvaW50VG9Qb2ludAovLyBIYXNoZXMgYSBwb2ludCB0byBhIHBvaW50IG9uIHRoZSBjdXJ2ZQovLyBOT1RFOiBlY19tYXBfdG8gbWFwcyBmcF9lbGVtZW50IHRvIGN1cnZlIHBvaW50LiBXZSB1c2UgaGFzaCBhbmQgdGhlbiBtb2QgdG8gbWFwIHRoZSBwb2ludCdzIFggYW5kIFkgYnl0ZXMgdG8gZnBfZWxlbWVudCBmaXJzdC4KLy8gV2hhdCBpcyBpbnNpZGUgZWNfbWFwX3RvIChhY2Nlc3NlZCBEZWMgMTN0aCAyMDIzKToKLy8gaHR0cHM6Ly9naXRodWIuY29tL2FsZ29yYW5kL2dvLWFsZ29yYW5kL2Jsb2IvbWFzdGVyL2RhdGEvdHJhbnNhY3Rpb25zL2xvZ2ljL3BhaXJpbmcuZ28jTDg2MgovLyBodHRwczovL3BrZy5nby5kZXYvZ2l0aHViLmNvbS9jb25zZW5zeXMvZ25hcmstY3J5cHRvL2VjYy9ibjI1NCNNYXBUb0cxCi8vIGh0dHBzOi8vZ2l0aHViLmNvbS9Db25zZW5zeXMvZ25hcmstY3J5cHRvL2Jsb2IvbWFzdGVyL2VjYy9ibjI1NC9mcC9lbGVtZW50LmdvI0w0MgovLyBAcGFyYW0gcG9pbnQgLSBUaGUgcG9pbnQgdG8gaGFzaAovLyBAcmV0dXJucyBUaGUgcmVzdWx0IG9mIHRoZSBvcGVyYXRpb24KaGFzaFBvaW50VG9Qb2ludDoKCXByb3RvIDEgMQoKCS8vIFB1c2ggZW1wdHkgYnl0ZXMgYWZ0ZXIgdGhlIGZyYW1lIHBvaW50ZXIgdG8gcmVzZXJ2ZSBzcGFjZSBmb3IgbG9jYWwgdmFyaWFibGVzCglieXRlIDB4CglkdXBuIDIKCgkvLyBjb250cmFjdHMvbWFoYmVyLmFsZ28udHM6MTU2CgkvLyBoYXNoID0gc2hhMjU2KHBvaW50KQoJZnJhbWVfZGlnIC0xIC8vIHBvaW50OiBieXRlcwoJc2hhMjU2CglmcmFtZV9idXJ5IDAgLy8gaGFzaDogYnl0ZVszMl0KCgkvLyBjb250cmFjdHMvbWFoYmVyLmFsZ28udHM6MTU3CgkvLyBmcEVsZW1lbnQgPQoJLy8gICAgICAgYnRvYmlnaW50KGhhc2gpICUgYnRvYmlnaW50KGhleCgiMzA2NDRlNzJlMTMxYTAyOWI4NTA0NWI2ODE4MTU4NWQ5NzgxNmE5MTY4NzFjYThkM2MyMDhjMTZkODdjZmQ0NyIpKQoJZnJhbWVfZGlnIDAgLy8gaGFzaDogYnl0ZVszMl0KCWJ5dGUgMHgzMDY0NGU3MmUxMzFhMDI5Yjg1MDQ1YjY4MTgxNTg1ZDk3ODE2YTkxNjg3MWNhOGQzYzIwOGMxNmQ4N2NmZDQ3CgliJQoJZnJhbWVfYnVyeSAxIC8vIGZwRWxlbWVudDogYmlnaW50CgoJLy8gY29udHJhY3RzL21haGJlci5hbGdvLnRzOjE1OQoJLy8gcmVzdWx0ID0gZWNNYXBUbygiQk4yNTRnMSIsIHJhd0J5dGVzKGZwRWxlbWVudCkpCglmcmFtZV9kaWcgMSAvLyBmcEVsZW1lbnQ6IGJpZ2ludAoJZWNfbWFwX3RvIEJOMjU0ZzEKCWZyYW1lX2J1cnkgMiAvLyByZXN1bHQ6IGJ5dGVbXQoKCS8vIGNvbnRyYWN0cy9tYWhiZXIuYWxnby50czoxNjAKCS8vIHJldHVybiByZXN1bHQ7CglmcmFtZV9kaWcgMiAvLyByZXN1bHQ6IGJ5dGVbXQoKCS8vIHNldCB0aGUgc3Vicm91dGluZSByZXR1cm4gdmFsdWUKCWZyYW1lX2J1cnkgMAoKCS8vIHBvcCBhbGwgbG9jYWwgdmFyaWFibGVzIGZyb20gdGhlIHN0YWNrCglwb3BuIDIKCXJldHN1YgoKLy8gcHVibGljSGFzaFBvaW50VG9Qb2ludChieXRlW10pYnl0ZVtdCmFiaV9yb3V0ZV9wdWJsaWNIYXNoUG9pbnRUb1BvaW50OgoJLy8gVGhlIEFCSSByZXR1cm4gcHJlZml4CglieXRlIDB4MTUxZjdjNzUKCgkvLyBwb2ludDogYnl0ZVtdCgl0eG5hIEFwcGxpY2F0aW9uQXJncyAxCglleHRyYWN0IDIgMAoKCS8vIGV4ZWN1dGUgcHVibGljSGFzaFBvaW50VG9Qb2ludChieXRlW10pYnl0ZVtdCgljYWxsc3ViIHB1YmxpY0hhc2hQb2ludFRvUG9pbnQKCWR1cAoJbGVuCglpdG9iCglleHRyYWN0IDYgMgoJc3dhcAoJY29uY2F0Cgljb25jYXQKCWxvZwoJaW50IDEKCXJldHVybgoKLy8gcHVibGljSGFzaFBvaW50VG9Qb2ludChwb2ludDogYnl0ZXMpOiBieXRlcwovLwovLyBwdWJsaWNIYXNoUG9pbnRUb1BvaW50Ci8vIFB1YmxpYyB3cmFwcGVyIGFyb3VuZCB0aGUgaGFzaFBvaW50VG9Qb2ludCBtZXRob2QsIGFsbG93aW5nIGl0IHRvIGJlIHRlc3RlZCBkaXJlY3RseS4KLy8gQHBhcmFtIHBvaW50IC0gVGhlIHBvaW50IHRvIGhhc2gKLy8gQHJldHVybnMgdGhlIGNvbnRlbnQgb2YgdGhlIGhhc2hQb2ludFRvUG9pbnQgY2FsbApwdWJsaWNIYXNoUG9pbnRUb1BvaW50OgoJcHJvdG8gMSAxCgoJLy8gY29udHJhY3RzL21haGJlci5hbGdvLnRzOjE2OQoJLy8gcmV0dXJuIHRoaXMuaGFzaFBvaW50VG9Qb2ludChwb2ludCk7CglmcmFtZV9kaWcgLTEgLy8gcG9pbnQ6IGJ5dGVzCgljYWxsc3ViIGhhc2hQb2ludFRvUG9pbnQKCXJldHN1YgoKLy8gY2hhbGxlbmdlKG1zZzogYnl0ZXMsIG5vbmNlOiBieXRlcywgY1ByZXY6IGJ5dGVzLCBwazogYnl0ZXMsIGtleUltYWdlOiBieXRlcyk6IGJ5dGVzCi8vCi8vIGNoYWxsZW5nZQovLyBQcm9kdWNlIHRoZSBjaGFsbGVuZ2UsIGkuZS4gYW4gaW5kaXZpZHVhbCBsaW5rIGluIHRoZSByaW5nIHNpZyB2ZXJpZmljYXRpb24uCi8vIFdlIG1vZCBieSBvcmRlciBvZiBmciBodHRwczovL2dpdGh1Yi5jb20vQ29uc2Vuc3lzL2duYXJrLWNyeXB0by9ibG9iL21hc3Rlci9lY2MvYm4yNTQvZnIvZWxlbWVudC5nbyNMNDIKLy8gY197aSsxfSA9IEhzKG0gfHwgcl97aX0gKiBHICsgY197aX0gKiBLX3tpfSB8fCByX3tpfSpIcChLX3tpfSkgKyBjX3tpfSAqIEkpIG1vZCB8ZnJ8Ci8vIEBwYXJhbSBtc2cgLSBUaGUgbWVzc2FnZSB0byBiZSBzaWduZWQKLy8gQHBhcmFtIG5vbmNlIC0gVGhlIG5vbmNlLCBwYXJ0IG9mIHRoZSByaW5nIHNpZ25hdHVyZSBpdHNlbGYsIGFrYSBvbmUgb2YgdGhlIGZha2Ugc2VjcmV0IGtleXMKLy8gQHBhcmFtIGNQcmV2IC0gVGhlIHByZXZpb3VzIGNoYWxsZW5nZSwgb3IgdGhlIGJhc2UgY2hhbGxlbmdlIGlmIHRoaXMgaXMgdGhlIGZpcnN0IGxpbmsgKGluIHdoaWNoIGNhc2UgaXQgaXMgcGFydCBvZiB0aGUgcmluZyBzaWcpCi8vIEBwYXJhbSBwayAtIFRoZSBzcGVjaWZpYyBwdWJsaWMga2V5IGluIHRoZSByaW5nIChpbmRleGVkIGZyb20gdGhlIGFycmF5IG9mIHB1YmxpYyBrZXlzKQovLyBAcGFyYW0ga2V5SW1hZ2UgLSBUaGUga2V5IGltYWdlIG9mIHRoZSBzaWduZXIsIHJlcXVpcmVkIGZvciBsaW5rYWJpbHRpeSB0byBwcmV2ZW50IGRvdWJsZSBzcGVuZGluZwovLyBAcmV0dXJucyAtIHRoZSBjaGFsbGVuZ2UKY2hhbGxlbmdlOgoJcHJvdG8gNSAxCgoJLy8gUHVzaCBlbXB0eSBieXRlcyBhZnRlciB0aGUgZnJhbWUgcG9pbnRlciB0byByZXNlcnZlIHNwYWNlIGZvciBsb2NhbCB2YXJpYWJsZXMKCWJ5dGUgMHgKCWR1cG4gMgoKCS8vIGNvbnRyYWN0cy9tYWhiZXIuYWxnby50czoxODgKCS8vIGxlZnQgPSB0aGlzLnBvaW50QWRkKHRoaXMuc2NhbGFyTXVsdEJhc2Uobm9uY2UpLCB0aGlzLnNjYWxhck11bHQoY1ByZXYsIHBrKSkKCWZyYW1lX2RpZyAtNCAvLyBwazogYnl0ZXMKCWZyYW1lX2RpZyAtMyAvLyBjUHJldjogYnl0ZXMKCWNhbGxzdWIgc2NhbGFyTXVsdAoJZnJhbWVfZGlnIC0yIC8vIG5vbmNlOiBieXRlcwoJY2FsbHN1YiBzY2FsYXJNdWx0QmFzZQoJY2FsbHN1YiBwb2ludEFkZAoJZnJhbWVfYnVyeSAwIC8vIGxlZnQ6IGJ5dGVbXQoKCS8vIGNvbnRyYWN0cy9tYWhiZXIuYWxnby50czoxOTQKCS8vIHJpZ2h0ID0gdGhpcy5wb2ludEFkZCh0aGlzLnNjYWxhck11bHQobm9uY2UsIHRoaXMuaGFzaFBvaW50VG9Qb2ludChwaykpLCB0aGlzLnNjYWxhck11bHQoY1ByZXYsIGtleUltYWdlKSkKCWZyYW1lX2RpZyAtNSAvLyBrZXlJbWFnZTogYnl0ZXMKCWZyYW1lX2RpZyAtMyAvLyBjUHJldjogYnl0ZXMKCWNhbGxzdWIgc2NhbGFyTXVsdAoJZnJhbWVfZGlnIC00IC8vIHBrOiBieXRlcwoJY2FsbHN1YiBoYXNoUG9pbnRUb1BvaW50CglmcmFtZV9kaWcgLTIgLy8gbm9uY2U6IGJ5dGVzCgljYWxsc3ViIHNjYWxhck11bHQKCWNhbGxzdWIgcG9pbnRBZGQKCWZyYW1lX2J1cnkgMSAvLyByaWdodDogYnl0ZVtdCgoJLy8gY29udHJhY3RzL21haGJlci5hbGdvLnRzOjIwMAoJLy8gaCA9CgkvLyAgICAgICBidG9iaWdpbnQoc2hhMjU2KGNvbmNhdChjb25jYXQobXNnLCBsZWZ0KSwgcmlnaHQpKSkgJQoJLy8gICAgICAgYnRvYmlnaW50KGhleCgiMHgzMDY0NGU3MmUxMzFhMDI5Yjg1MDQ1YjY4MTgxNTg1ZDI4MzNlODQ4NzliOTcwOTE0M2UxZjU5M2YwMDAwMDAxIikpCglmcmFtZV9kaWcgLTEgLy8gbXNnOiBieXRlcwoJZnJhbWVfZGlnIDAgLy8gbGVmdDogYnl0ZVtdCgljb25jYXQKCWZyYW1lX2RpZyAxIC8vIHJpZ2h0OiBieXRlW10KCWNvbmNhdAoJc2hhMjU2CglieXRlIDB4MzA2NDRlNzJlMTMxYTAyOWI4NTA0NWI2ODE4MTU4NWQyODMzZTg0ODc5Yjk3MDkxNDNlMWY1OTNmMDAwMDAwMQoJYiUKCWZyYW1lX2J1cnkgMiAvLyBoOiBiaWdpbnQKCgkvLyBjb250cmFjdHMvbWFoYmVyLmFsZ28udHM6MjAzCgkvLyByZXR1cm4gcmF3Qnl0ZXMoaCk7CglmcmFtZV9kaWcgMiAvLyBoOiBiaWdpbnQKCgkvLyBzZXQgdGhlIHN1YnJvdXRpbmUgcmV0dXJuIHZhbHVlCglmcmFtZV9idXJ5IDAKCgkvLyBwb3AgYWxsIGxvY2FsIHZhcmlhYmxlcyBmcm9tIHRoZSBzdGFjawoJcG9wbiAyCglyZXRzdWIKCi8vIHB1YmxpY0NoYWxsZW5nZShieXRlW10sYnl0ZVtdLGJ5dGVbXSxieXRlW10sYnl0ZVtdKWJ5dGVbXQphYmlfcm91dGVfcHVibGljQ2hhbGxlbmdlOgoJLy8gVGhlIEFCSSByZXR1cm4gcHJlZml4CglieXRlIDB4MTUxZjdjNzUKCgkvLyBrZXlJbWFnZTogYnl0ZVtdCgl0eG5hIEFwcGxpY2F0aW9uQXJncyA1CglleHRyYWN0IDIgMAoKCS8vIHBrOiBieXRlW10KCXR4bmEgQXBwbGljYXRpb25BcmdzIDQKCWV4dHJhY3QgMiAwCgoJLy8gY1ByZXY6IGJ5dGVbXQoJdHhuYSBBcHBsaWNhdGlvbkFyZ3MgMwoJZXh0cmFjdCAyIDAKCgkvLyBub25jZTogYnl0ZVtdCgl0eG5hIEFwcGxpY2F0aW9uQXJncyAyCglleHRyYWN0IDIgMAoKCS8vIG1zZzogYnl0ZVtdCgl0eG5hIEFwcGxpY2F0aW9uQXJncyAxCglleHRyYWN0IDIgMAoKCS8vIGV4ZWN1dGUgcHVibGljQ2hhbGxlbmdlKGJ5dGVbXSxieXRlW10sYnl0ZVtdLGJ5dGVbXSxieXRlW10pYnl0ZVtdCgljYWxsc3ViIHB1YmxpY0NoYWxsZW5nZQoJZHVwCglsZW4KCWl0b2IKCWV4dHJhY3QgNiAyCglzd2FwCgljb25jYXQKCWNvbmNhdAoJbG9nCglpbnQgMQoJcmV0dXJuCgovLyBwdWJsaWNDaGFsbGVuZ2UobXNnOiBieXRlcywgbm9uY2U6IGJ5dGVzLCBjUHJldjogYnl0ZXMsIHBrOiBieXRlcywga2V5SW1hZ2U6IGJ5dGVzKTogYnl0ZXMKLy8KLy8gcHVibGljQ2hhbGxlbmdlCi8vIFB1YmxpYyB3cmFwcGVyIGFyb3VuZCB0aGUgY2hhbGxlbmdlIG1ldGhvZCwgYWxsb3dpbmcgaXQgdG8gYmUgdGVzdGVkIGRpcmVjdGx5LgovLyBAcGFyYW0gbXNnIC0gVGhlIG1lc3NhZ2UgdG8gYmUgc2lnbmVkCi8vIEBwYXJhbSBub25jZSAtIFRoZSBub25jZSwgcGFydCBvZiB0aGUgcmluZyBzaWduYXR1cmUgaXRzZWxmLCBha2Egb25lIG9mIHRoZSBmYWtlIHNlY3JldCBrZXlzCi8vIEBwYXJhbSBjUHJldiAtIFRoZSBwcmV2aW91cyBjaGFsbGVuZ2UsIG9yIHRoZSBiYXNlIGNoYWxsZW5nZSBpZiB0aGlzIGlzIHRoZSBmaXJzdCBsaW5rIChpbiB3aGljaCBjYXNlIGl0IGlzIHBhcnQgb2YgdGhlIHJpbmcgc2lnKQovLyBAcGFyYW0gcGsgLSBUaGUgc3BlY2lmaWMgcHVibGljIGtleSBpbiB0aGUgcmluZyAoaW5kZXhlZCBmcm9tIHRoZSBhcnJheSBvZiBwdWJsaWMga2V5cykKLy8gQHBhcmFtIGtleUltYWdlIC0gVGhlIGtleSBpbWFnZSBvZiB0aGUgc2lnbmVyLCByZXF1aXJlZCBmb3IgbGlua2FiaWx0aXkgdG8gcHJldmVudCBkb3VibGUgc3BlbmRpbmcKLy8gQHJldHVybnMgLSB0aGUgY29udGVudCBvZiB0aGUgcHJpdmF0ZUNoYWxsZW5nZSBjYWxsCnB1YmxpY0NoYWxsZW5nZToKCXByb3RvIDUgMQoKCS8vIGNvbnRyYWN0cy9tYWhiZXIuYWxnby50czoyMTYKCS8vIHJldHVybiB0aGlzLmNoYWxsZW5nZShtc2csIG5vbmNlLCBjUHJldiwgcGssIGtleUltYWdlKTsKCWZyYW1lX2RpZyAtNSAvLyBrZXlJbWFnZTogYnl0ZXMKCWZyYW1lX2RpZyAtNCAvLyBwazogYnl0ZXMKCWZyYW1lX2RpZyAtMyAvLyBjUHJldjogYnl0ZXMKCWZyYW1lX2RpZyAtMiAvLyBub25jZTogYnl0ZXMKCWZyYW1lX2RpZyAtMSAvLyBtc2c6IGJ5dGVzCgljYWxsc3ViIGNoYWxsZW5nZQoJcmV0c3ViCgovLyBwdWJsaWNDaGFsbGVuZ2VMc2lnKGJ5dGVbXSxieXRlW10sYnl0ZVtdLGJ5dGVbXSxieXRlW10scGF5KXZvaWQKYWJpX3JvdXRlX3B1YmxpY0NoYWxsZW5nZUxzaWc6CgkvLyBsc2lnVHhuOiBwYXkKCXR4biBHcm91cEluZGV4CglpbnQgMQoJLQoJZHVwCglndHhucyBUeXBlRW51bQoJaW50IHBheQoJPT0KCWFzc2VydAoKCS8vIGtleUltYWdlOiBieXRlW10KCXR4bmEgQXBwbGljYXRpb25BcmdzIDUKCWV4dHJhY3QgMiAwCgoJLy8gcGs6IGJ5dGVbXQoJdHhuYSBBcHBsaWNhdGlvbkFyZ3MgNAoJZXh0cmFjdCAyIDAKCgkvLyBjUHJldjogYnl0ZVtdCgl0eG5hIEFwcGxpY2F0aW9uQXJncyAzCglleHRyYWN0IDIgMAoKCS8vIG5vbmNlOiBieXRlW10KCXR4bmEgQXBwbGljYXRpb25BcmdzIDIKCWV4dHJhY3QgMiAwCgoJLy8gbXNnOiBieXRlW10KCXR4bmEgQXBwbGljYXRpb25BcmdzIDEKCWV4dHJhY3QgMiAwCgoJLy8gZXhlY3V0ZSBwdWJsaWNDaGFsbGVuZ2VMc2lnKGJ5dGVbXSxieXRlW10sYnl0ZVtdLGJ5dGVbXSxieXRlW10scGF5KXZvaWQKCWNhbGxzdWIgcHVibGljQ2hhbGxlbmdlTHNpZwoJaW50IDEKCXJldHVybgoKLy8gcHVibGljQ2hhbGxlbmdlTHNpZyhtc2c6IGJ5dGVzLCBub25jZTogYnl0ZXMsIGNQcmV2OiBieXRlcywgcGs6IGJ5dGVzLCBrZXlJbWFnZTogYnl0ZXMsIGxzaWdUeG46IFBheVR4bik6IHZvaWQKLy8KLy8gcHVibGljQ2hhbGxlbmdlCi8vIFB1YmxpYyB3cmFwcGVyIGFyb3VuZCB0aGUgY2hhbGxlbmdlIG1ldGhvZCwgYWxsb3dpbmcgaXQgdG8gYmUgdGVzdGVkIGRpcmVjdGx5LgovLyBAcGFyYW0gbXNnIC0gVGhlIG1lc3NhZ2UgdG8gYmUgc2lnbmVkCi8vIEBwYXJhbSBub25jZSAtIFRoZSBub25jZSwgcGFydCBvZiB0aGUgcmluZyBzaWduYXR1cmUgaXRzZWxmLCBha2Egb25lIG9mIHRoZSBmYWtlIHNlY3JldCBrZXlzCi8vIEBwYXJhbSBjUHJldiAtIFRoZSBwcmV2aW91cyBjaGFsbGVuZ2UsIG9yIHRoZSBiYXNlIGNoYWxsZW5nZSBpZiB0aGlzIGlzIHRoZSBmaXJzdCBsaW5rIChpbiB3aGljaCBjYXNlIGl0IGlzIHBhcnQgb2YgdGhlIHJpbmcgc2lnKQovLyBAcGFyYW0gcGsgLSBUaGUgc3BlY2lmaWMgcHVibGljIGtleSBpbiB0aGUgxpJyaW5nIChpbmRleGVkIGZyb20gdGhlIGFycmF5IG9mIHB1YmxpYyBrZXlzKQovLyBAcGFyYW0ga2V5SW1hZ2UgLSBUaGUga2V5IGltYWdlIG9mIHRoZSBzaWduZXIsIHJlcXVpcmVkIGZvciBsaW5rYWJpbHRpeSB0byBwcmV2ZW50IGRvdWJsZSBzcGVuZGluZwovLyBAcmV0dXJucyAtIHRoZSBjb250ZW50IG9mIHRoZSBwcml2YXRlQ2hhbGxlbmdlIGNhbGwKcHVibGljQ2hhbGxlbmdlTHNpZzoKCXByb3RvIDYgMAoKCS8vIGNvbnRyYWN0cy9tYWhiZXIuYWxnby50czoyMjkKCS8vIHZlcmlmeVR4bihsc2lnVHhuLCB7IHNlbmRlcjogQWRkcmVzcy5mcm9tQnl0ZXMoTWFoYmVyQ2hhbGxlbmdlTHNpZy5hZGRyZXNzKCkpIH0pCgkvLyB2ZXJpZnkgc2VuZGVyCglmcmFtZV9kaWcgLTYgLy8gbHNpZ1R4bjogUGF5VHhuCglndHhucyBTZW5kZXIKCWFkZHIgR1pZT0NLNzdKSEo3QTVOTVJBRkpaRkRMQVNDMzQ3QkRMUTNVU0RXTFJBWUc2UkVPSVhUN0FNN1VUTQoJPT0KCWFzc2VydAoJcmV0c3ViCgovLyBkZXBvc2l0KHBheSxieXRlW10pdWludDY0W10KYWJpX3JvdXRlX2RlcG9zaXQ6CgkvLyBUaGUgQUJJIHJldHVybiBwcmVmaXgKCWJ5dGUgMHgxNTFmN2M3NQoKCS8vIHBrOiBieXRlW10KCXR4bmEgQXBwbGljYXRpb25BcmdzIDEKCWV4dHJhY3QgMiAwCgoJLy8gZGVwb3NpdFR4bjogcGF5Cgl0eG4gR3JvdXBJbmRleAoJaW50IDEKCS0KCWR1cAoJZ3R4bnMgVHlwZUVudW0KCWludCBwYXkKCT09Cglhc3NlcnQKCgkvLyBleGVjdXRlIGRlcG9zaXQocGF5LGJ5dGVbXSl1aW50NjRbXQoJY2FsbHN1YiBkZXBvc2l0CglkdXAKCWxlbgoJaW50IDgKCS8KCWl0b2IKCWV4dHJhY3QgNiAyCglzd2FwCgljb25jYXQKCWNvbmNhdAoJbG9nCglpbnQgMQoJcmV0dXJuCgovLyBkZXBvc2l0KGRlcG9zaXRUeG46IFBheVR4biwgcGs6IGJ5dGVzKTogdWludDY0W10KLy8KLy8gZGVwb3NpdAovLyBEZXBvc2l0IGZ1bmRzICsgcHVibGljIGtleSBpbnRvIHRoZSBjb250cmFjdAovLyBAcGFyYW0gcGsgLSBUaGUgcHVibGljIGtleSB0byBkZXBvc2l0Ci8vIFRPRE86IEFkZCBjdXN0b20gRWREU0EgdG8gY2hlY2sgdGhhdCB0aGUgZGVwb3NpdG9yIGtub3dzIHRoZSBzZWNyZXQga2V5LiBVc2VmdWwgdG8gcHJldmVudCByb2d1ZSBrZXkgYXR0YWNrLCBhZGRpbmcgdGhlIG5lZ2F0aXZlIG9mIGFub3RoZXIgcGsuCi8vIEByZXR1cm5zIC0gdGhlIG51bWJlciBpZCBvZiB0aGUgcHVibGljIGtleSwgaWYgc3VjY2Vzc2Z1bC4gZmFpbHMgaWYgdW5zdWNjZXNzZnVsLgpkZXBvc2l0OgoJcHJvdG8gMiAxCgoJLy8gUHVzaCBlbXB0eSBieXRlcyBhZnRlciB0aGUgZnJhbWUgcG9pbnRlciB0byByZXNlcnZlIHNwYWNlIGZvciBsb2NhbCB2YXJpYWJsZXMKCWJ5dGUgMHgKCWR1cAoKCS8vIGNvbnRyYWN0cy9tYWhiZXIuYWxnby50czoyNDAKCS8vIGFzc2VydCh0aGlzLnZhbGlkUG9pbnQocGspKQoJZnJhbWVfZGlnIC0yIC8vIHBrOiBieXRlcwoJY2FsbHN1YiB2YWxpZFBvaW50Cglhc3NlcnQKCgkvLyBjb250cmFjdHMvbWFoYmVyLmFsZ28udHM6MjQxCgkvLyBhc3NlcnQoIXRoaXMuaGFzaEZpbHRlcihwaykuZXhpc3RzKQoJZnJhbWVfZGlnIC0yIC8vIHBrOiBieXRlcwoJYm94X2xlbgoJc3dhcAoJcG9wCgkhCglhc3NlcnQKCgkvLyBjb250cmFjdHMvbWFoYmVyLmFsZ28udHM6MjQzCgkvLyB2ZXJpZnlUeG4oZGVwb3NpdFR4biwgewoJLy8gICAgICAgLy8gRW5zdXJlIHRoZSBkZXBvc2l0b3IgaXMgZnVuZGluZyB0aGUgcmlnaHQgYW1vdW50CgkvLyAgICAgICByZWNlaXZlcjogdGhpcy5hcHAuYWRkcmVzcywKCS8vICAgICAgIGFtb3VudDogdGhpcy5kZW5vbWluYXRpb24udmFsdWUsCgkvLyAgICAgfSkKCS8vIHZlcmlmeSByZWNlaXZlcgoJZnJhbWVfZGlnIC0xIC8vIGRlcG9zaXRUeG46IFBheVR4bgoJZ3R4bnMgUmVjZWl2ZXIKCWdsb2JhbCBDdXJyZW50QXBwbGljYXRpb25BZGRyZXNzCgk9PQoJYXNzZXJ0CgoJLy8gdmVyaWZ5IGFtb3VudAoJZnJhbWVfZGlnIC0xIC8vIGRlcG9zaXRUeG46IFBheVR4bgoJZ3R4bnMgQW1vdW50CglieXRlIDB4NjQ2NTZlNmY2ZDY5NmU2MTc0Njk2ZjZlIC8vICJkZW5vbWluYXRpb24iCglhcHBfZ2xvYmFsX2dldAoJPT0KCWFzc2VydAoKCS8vIGNvbnRyYWN0cy9tYWhiZXIuYWxnby50czoyNTAKCS8vIGJveElkID0gdGhpcy5wa0luZGV4LnZhbHVlIC8gTUFYX1BLX0JPWF9QS19OVU1CRVIKCWJ5dGUgMHg3MDZiNDk2ZTY0NjU3OCAvLyAicGtJbmRleCIKCWFwcF9nbG9iYWxfZ2V0CglpbnQgNDk2CgkvCglmcmFtZV9idXJ5IDAgLy8gYm94SWQ6IHVpbnQ2NAoKCS8vIGlmMF9jb25kaXRpb24KCS8vIGNvbnRyYWN0cy9tYWhiZXIuYWxnby50czoyNjMKCS8vICF0aGlzLnF1aWNrQWNjZXNzUEtCb3hlcyhib3hJZCkuZXhpc3RzCglmcmFtZV9kaWcgMCAvLyBib3hJZDogdWludDY0CglpdG9iCglib3hfbGVuCglzd2FwCglwb3AKCSEKCWJ6IGlmMF9lbmQKCgkvLyBpZjBfY29uc2VxdWVudAoJLy8gY29udHJhY3RzL21haGJlci5hbGdvLnRzOjI2NAoJLy8gdGhpcy5xdWlja0FjY2Vzc1BLQm94ZXMoYm94SWQpLmNyZWF0ZShNQVhfUEtfQk9YX1NJWkUpCglmcmFtZV9kaWcgMCAvLyBib3hJZDogdWludDY0CglpdG9iCglpbnQgMzE3NDQKCWJveF9jcmVhdGUKCXBvcAoKaWYwX2VuZDoKCS8vIGNvbnRyYWN0cy9tYWhiZXIuYWxnby50czoyNjgKCS8vIHRoaXMucXVpY2tBY2Nlc3NQS0JveGVzKGJveElkKS5yZXBsYWNlKCh0aGlzLnBrSW5kZXgudmFsdWUgJSBNQVhfUEtfQk9YX1BLX05VTUJFUikgKiBDVVJWRV9QT0lOVF9TSVpFLCBwaykKCWZyYW1lX2RpZyAwIC8vIGJveElkOiB1aW50NjQKCWl0b2IKCWJ5dGUgMHg3MDZiNDk2ZTY0NjU3OCAvLyAicGtJbmRleCIKCWFwcF9nbG9iYWxfZ2V0CglpbnQgNDk2CgklCglpbnQgNjQKCSoKCWZyYW1lX2RpZyAtMiAvLyBwazogYnl0ZXMKCWJveF9yZXBsYWNlCgoJLy8gY29udHJhY3RzL21haGJlci5hbGdvLnRzOjI3MQoJLy8gdGhpcy5oYXNoRmlsdGVyKHBrKS5jcmVhdGUoMCkKCWZyYW1lX2RpZyAtMiAvLyBwazogYnl0ZXMKCWludCAwCglib3hfY3JlYXRlCglwb3AKCgkvLyBjb250cmFjdHMvbWFoYmVyLmFsZ28udHM6MjczCgkvLyBpZHggPSB0aGlzLnBrSW5kZXgudmFsdWUKCWJ5dGUgMHg3MDZiNDk2ZTY0NjU3OCAvLyAicGtJbmRleCIKCWFwcF9nbG9iYWxfZ2V0CglmcmFtZV9idXJ5IDEgLy8gaWR4OiB1aW50NjQKCgkvLyBjb250cmFjdHMvbWFoYmVyLmFsZ28udHM6Mjc2CgkvLyB0aGlzLnBrSW5kZXgudmFsdWUgPSB0aGlzLnBrSW5kZXgudmFsdWUgKyAxCglieXRlIDB4NzA2YjQ5NmU2NDY1NzggLy8gInBrSW5kZXgiCglkdXAKCWFwcF9nbG9iYWxfZ2V0CglpbnQgMQoJKwoJYXBwX2dsb2JhbF9wdXQKCgkvLyBjb250cmFjdHMvbWFoYmVyLmFsZ28udHM6Mjc4CgkvLyByZXR1cm4gW2lkeCwgYm94SWRdOwoJZnJhbWVfZGlnIDEgLy8gaWR4OiB1aW50NjQKCWl0b2IKCWZyYW1lX2RpZyAwIC8vIGJveElkOiB1aW50NjQKCWl0b2IKCWNvbmNhdAoKCS8vIHNldCB0aGUgc3Vicm91dGluZSByZXR1cm4gdmFsdWUKCWZyYW1lX2J1cnkgMAoKCS8vIHBvcCBhbGwgbG9jYWwgdmFyaWFibGVzIGZyb20gdGhlIHN0YWNrCglwb3BuIDEKCXJldHN1YgoKLy8gaW5pdFdpdGhkcmF3YWxTZXNzaW9uKHBheSxieXRlW10sYnl0ZVtdKWJ5dGVbMzJdCmFiaV9yb3V0ZV9pbml0V2l0aGRyYXdhbFNlc3Npb246CgkvLyBUaGUgQUJJIHJldHVybiBwcmVmaXgKCWJ5dGUgMHgxNTFmN2M3NQoKCS8vIGluaXRpYWxDaGFsbGVuZ2U6IGJ5dGVbXQoJdHhuYSBBcHBsaWNhdGlvbkFyZ3MgMgoJZXh0cmFjdCAyIDAKCgkvLyBtc2c6IGJ5dGVbXQoJdHhuYSBBcHBsaWNhdGlvbkFyZ3MgMQoJZXh0cmFjdCAyIDAKCgkvLyBtYmJyRGVwb3NpdFR4bjogcGF5Cgl0eG4gR3JvdXBJbmRleAoJaW50IDEKCS0KCWR1cAoJZ3R4bnMgVHlwZUVudW0KCWludCBwYXkKCT09Cglhc3NlcnQKCgkvLyBleGVjdXRlIGluaXRXaXRoZHJhd2FsU2Vzc2lvbihwYXksYnl0ZVtdLGJ5dGVbXSlieXRlWzMyXQoJY2FsbHN1YiBpbml0V2l0aGRyYXdhbFNlc3Npb24KCWNvbmNhdAoJbG9nCglpbnQgMQoJcmV0dXJuCgovLyBpbml0V2l0aGRyYXdhbFNlc3Npb24obWJickRlcG9zaXRUeG46IFBheVR4biwgbXNnOiBieXRlcywgaW5pdGlhbENoYWxsZW5nZTogYnl0ZXMpOiBieXRlczMyCi8vCi8vIGluaXRXaXRoZHJhd2FsCi8vIENyZWF0ZXMgYSBib3ggcmVwcmVzZW50aW5nIGEgIndpdGhkcmF3YWwgc2Vzc2lvbiIuCi8vIE9mIGtleSBpbXBvcnRhbmNlIGlzIHRoZSBzaWduZWQgbWVzc2FnZSBzdHJpbmcsIHdoaWNoIG11c3QgY29udGFpbiB0aGUgZm9sbG93aW5nOgovLyBSaW5nIFNpemUgLSBDaG9zZW4gbnVtYmVyIG9mIFBLcywgaS5lLiBzaXplIG9mIGFub255bWl0eSBzZXQKLy8gS2V5IEltYWdlIC0gVGhlIGtleWltYWdlLCB0aGUgb25lIHRoaW5nIHRoYXQgaXMgdW5pcXVlIGZvciBhIHdpdGhkcmF3YWwKLy8gQXBwIElkIC0gVGhlIGlkIG9mIHRoZSBzbWFydCBjb250cmFjdCBhcHAKLy8gTm9taW5hbCBhbW91bnQgLSBUaGUgZGVub21pbmF0aW9uIG9mIHRoZSBjb250cmFjdCwgd2hhdCB3YXMgZGVwb3NpdGVkIG9yaWdpbmFsbHkKLy8gQVNBIElEIC0gQ2xhcmlmaWVzIHRoZSBBU0EgSUQuIChQbGFpbiBBbGdvIGhhcyBJRCAwLCAidGhlIGRlZmF1bHQiIGFzc2V0IG9mIEFsZ29yYW5kKQovLyBXaXRoZHJhd2FsIEFkZHJlc3MgLSBBZGRyZXNzIG9mIHRoZSBmaW5hbCByZWNpcGllbnQgb2YgdGhlIGZ1bmRzCi8vIFJlbGF5ZXIgQWRkcmVzcyAtIEFkZHJlc3Mgb2YgdGhlIHJlbGF5ZXIsIGZhY2lsaXRhdGluZyB0aGUgd2l0aGRyYXdhbCAoY291bGQgYmUgc2FtZSBhcyB3aXRoZHJhd2FsIGFkZHJlc3MpCi8vIFJlbGF5ZXIgRmVlIC0gVGhlIGZlZSB0aGUgcmVsYXllciBjaGFyZ2VzIGZvciBmYWNpbGl0YXRpbmcgdGhlIHdpdGhkcmF3YWwgKGNvdWxkIGJlIDApCi8vIFRoZSBoYXNoIG9mIHRoZSBtZXNzYWdlIGJlY29tZXMgdGhlIGlkIG9mIHRoZSB3aXRoZHJhd2FsIHNlc3Npb24ncyBib3guCi8vIEBwYXJhbSBtYmJyRGVwb3NpdFR4biAtIFRoZSB0cmFuc2FjdGlvbiB0aGF0IGRlcG9zaXRlZCB0aGUgTUJCUgovLyBAcGFyYW0gbXNnIC0gU2lnbmVkIG1lc3NhZ2UKLy8gQHBhcmFtIGluaXRpYWxDaGFsbGVuZ2UgLSBUaGUgaW5pdGlhbCBjaGFsbGVuZ2UsIHdoaWNoIG5lZWRzIHRvIGJlIHJlLWNyZWF0ZWQgdG8gdmVyaWZ5IHRoZSByaW5nIHNpZ25hdHVyZQovLyBAcmV0dXJucyAtIHRoZSBpZCBvZiB0aGUgd2l0aGRyYXdhbCBzZXNzaW9uIGJveAppbml0V2l0aGRyYXdhbFNlc3Npb246Cglwcm90byAzIDEKCgkvLyBQdXNoIGVtcHR5IGJ5dGVzIGFmdGVyIHRoZSBmcmFtZSBwb2ludGVyIHRvIHJlc2VydmUgc3BhY2UgZm9yIGxvY2FsIHZhcmlhYmxlcwoJYnl0ZSAweAoKCS8vIGNvbnRyYWN0cy9tYWhiZXIuYWxnby50czozMDIKCS8vIGlkID0gc2hhMjU2KG1zZykKCWZyYW1lX2RpZyAtMiAvLyBtc2c6IGJ5dGVzCglzaGEyNTYKCWZyYW1lX2J1cnkgMCAvLyBpZDogYnl0ZVszMl0KCgkvLyBjb250cmFjdHMvbWFoYmVyLmFsZ28udHM6MzAzCgkvLyB0aGlzLnNlc3Npb25zQm94ZXMoaWQpLmNyZWF0ZShsZW4obXNnKSArIDIgKiBsZW4oaW5pdGlhbENoYWxsZW5nZSkpCglmcmFtZV9kaWcgMCAvLyBpZDogYnl0ZVszMl0KCWZyYW1lX2RpZyAtMiAvLyBtc2c6IGJ5dGVzCglsZW4KCWludCAyCglmcmFtZV9kaWcgLTMgLy8gaW5pdGlhbENoYWxsZW5nZTogYnl0ZXMKCWxlbgoJKgoJKwoJYm94X2NyZWF0ZQoJcG9wCgoJLy8gY29udHJhY3RzL21haGJlci5hbGdvLnRzOjMwOQoJLy8gcmV0dXJuIGlkOwoJZnJhbWVfZGlnIDAgLy8gaWQ6IGJ5dGVbMzJdCgoJLy8gc2V0IHRoZSBzdWJyb3V0aW5lIHJldHVybiB2YWx1ZQoJZnJhbWVfYnVyeSAwCglyZXRzdWIKCi8vIGNyZWF0ZVVwbG9hZFByZWNvbXB1dGVkQ2hhbGxlbmdlc0JveChwYXksYnl0ZVtdLHVpbnQ2NCx1aW50NjQpYnl0ZVszMl0KYWJpX3JvdXRlX2NyZWF0ZVVwbG9hZFByZWNvbXB1dGVkQ2hhbGxlbmdlc0JveDoKCS8vIFRoZSBBQkkgcmV0dXJuIHByZWZpeAoJYnl0ZSAweDE1MWY3Yzc1CgoJLy8gYm94U2l6ZTogdWludDY0Cgl0eG5hIEFwcGxpY2F0aW9uQXJncyAzCglidG9pCgoJLy8gYm94SW5kZXg6IHVpbnQ2NAoJdHhuYSBBcHBsaWNhdGlvbkFyZ3MgMgoJYnRvaQoKCS8vIG1zZzogYnl0ZVtdCgl0eG5hIEFwcGxpY2F0aW9uQXJncyAxCglleHRyYWN0IDIgMAoKCS8vIG1iYnJEZXBvc2l0VHhuOiBwYXkKCXR4biBHcm91cEluZGV4CglpbnQgMQoJLQoJZHVwCglndHhucyBUeXBlRW51bQoJaW50IHBheQoJPT0KCWFzc2VydAoKCS8vIGV4ZWN1dGUgY3JlYXRlVXBsb2FkUHJlY29tcHV0ZWRDaGFsbGVuZ2VzQm94KHBheSxieXRlW10sdWludDY0LHVpbnQ2NClieXRlWzMyXQoJY2FsbHN1YiBjcmVhdGVVcGxvYWRQcmVjb21wdXRlZENoYWxsZW5nZXNCb3gKCWNvbmNhdAoJbG9nCglpbnQgMQoJcmV0dXJuCgovLyBjcmVhdGVVcGxvYWRQcmVjb21wdXRlZENoYWxsZW5nZXNCb3gobWJickRlcG9zaXRUeG46IFBheVR4biwgbXNnOiBieXRlcywgYm94SW5kZXg6IHVpbnQ2NCwgYm94U2l6ZTogdWludDY0KTogYnl0ZXMzMgovLwovLyBUT0RPOiBkZXN0cm95V2l0aGRyYXdhbFNlc3Npb24sIElGIFNFU1NJT04gTE9DS0VECi8vIGNyZWF0ZVVwbG9hZFByZWNvbXB1dGVkQ2hhbGxlbmdlc0JveAovLyBDcmVhdGVzIGEgYm94IHRoYXQgd2lsbCBiZSB1c2VkIHRvIHVwbG9hZCBwcmVjb21wdXRlZCBjaGFsbGVuZ2VzIGludG8uCi8vIEBwYXJhbSBtc2cgLSBNc2csIGZ1bmN0aW9uaW5nIGFzIHRoZSBpZCBmb3IgdGhlIHdpdGhkcmF3YWwgc2Vzc2lvbgovLyBAcGFyYW0gYm94SW5kZXggLSBUaGUgaW5kZXggb2YgdGhlIHByZWNvbXB1dGVkIGNoYWxsZW5nZSBib3gsIGluY3JlbWVudGluZyB3aXRoIGVhY2ggY2h1bmsgb2YgZGF0ZS4KLy8gQHBhcmFtIGJveFNpemUgLSBUaGUgc2l6ZSBvZiB0aGUgcHJlY29tcHV0ZWQgY2hhbGxlbmdlIGJveAovLyBAcmV0dXJucyAtIHRoZSBpZCBvZiB0aGUgcHJlY29tcHV0ZWQgY2hhbGxlbmdlIGJveApjcmVhdGVVcGxvYWRQcmVjb21wdXRlZENoYWxsZW5nZXNCb3g6Cglwcm90byA0IDEKCgkvLyBQdXNoIGVtcHR5IGJ5dGVzIGFmdGVyIHRoZSBmcmFtZSBwb2ludGVyIHRvIHJlc2VydmUgc3BhY2UgZm9yIGxvY2FsIHZhcmlhYmxlcwoJYnl0ZSAweAoKCS8vIGNvbnRyYWN0cy9tYWhiZXIuYWxnby50czozMjUKCS8vIGJveElkID0gc2hhMjU2KGNvbmNhdChjb25jYXQoc2hhMjU2KG1zZyksICJwcmVjb21wdXRlZENoYWxsZW5nZXMiKSwgaXRvYihib3hJbmRleCkpKQoJZnJhbWVfZGlnIC0yIC8vIG1zZzogYnl0ZXMKCXNoYTI1NgoJYnl0ZSAweDcwNzI2NTYzNmY2ZDcwNzU3NDY1NjQ0MzY4NjE2YzZjNjU2ZTY3NjU3MyAvLyAicHJlY29tcHV0ZWRDaGFsbGVuZ2VzIgoJY29uY2F0CglmcmFtZV9kaWcgLTMgLy8gYm94SW5kZXg6IHVpbnQ2NAoJaXRvYgoJY29uY2F0CglzaGEyNTYKCWZyYW1lX2J1cnkgMCAvLyBib3hJZDogYnl0ZVszMl0KCgkvLyBjb250cmFjdHMvbWFoYmVyLmFsZ28udHM6MzI2CgkvLyB0aGlzLnByZWNvbXB1dGVkQ2hhbGxlbmdlc0JveGVzKGJveElkKS5jcmVhdGUoYm94U2l6ZSkKCWZyYW1lX2RpZyAwIC8vIGJveElkOiBieXRlWzMyXQoJZnJhbWVfZGlnIC00IC8vIGJveFNpemU6IHVpbnQ2NAoJYm94X2NyZWF0ZQoJcG9wCgoJLy8gY29udHJhY3RzL21haGJlci5hbGdvLnRzOjMyNwoJLy8gcmV0dXJuIGJveElkOwoJZnJhbWVfZGlnIDAgLy8gYm94SWQ6IGJ5dGVbMzJdCgoJLy8gc2V0IHRoZSBzdWJyb3V0aW5lIHJldHVybiB2YWx1ZQoJZnJhbWVfYnVyeSAwCglyZXRzdWIKCi8vIHVwbG9hZFByZWNvbXB1dGVkQ2hhbGxlbmdlcyhieXRlW10sdWludDY0LGJ5dGVbXSlieXRlWzMyXQphYmlfcm91dGVfdXBsb2FkUHJlY29tcHV0ZWRDaGFsbGVuZ2VzOgoJLy8gVGhlIEFCSSByZXR1cm4gcHJlZml4CglieXRlIDB4MTUxZjdjNzUKCgkvLyBwcmVjb21wdXRlZENoYWxsZW5nZXM6IGJ5dGVbXQoJdHhuYSBBcHBsaWNhdGlvbkFyZ3MgMwoJZXh0cmFjdCAyIDAKCgkvLyBib3hJbmRleDogdWludDY0Cgl0eG5hIEFwcGxpY2F0aW9uQXJncyAyCglidG9pCgoJLy8gbXNnOiBieXRlW10KCXR4bmEgQXBwbGljYXRpb25BcmdzIDEKCWV4dHJhY3QgMiAwCgoJLy8gZXhlY3V0ZSB1cGxvYWRQcmVjb21wdXRlZENoYWxsZW5nZXMoYnl0ZVtdLHVpbnQ2NCxieXRlW10pYnl0ZVszMl0KCWNhbGxzdWIgdXBsb2FkUHJlY29tcHV0ZWRDaGFsbGVuZ2VzCgljb25jYXQKCWxvZwoJaW50IDEKCXJldHVybgoKLy8gdXBsb2FkUHJlY29tcHV0ZWRDaGFsbGVuZ2VzKG1zZzogYnl0ZXMsIGJveEluZGV4OiB1aW50NjQsIHByZWNvbXB1dGVkQ2hhbGxlbmdlczogYnl0ZXMpOiBieXRlczMyCi8vCi8vIHVwbG9hZFByZWNvbXB1dGVkQ2hhbGxlbmdlcwovLyBDcmVhdGVzIGEgYm94IGFuZCB1cGxvYWRzIHRoZSBwcmVjb21wdXRlZCBjaGFsbGVuZ2VzIGludG8gaXQuCi8vIEBwYXJhbSBtc2cgLSBNc2csIGZ1bmN0aW9uaW5nIGFzIHRoZSBpZCBmb3IgdGhlIHdpdGhkcmF3YWwgc2Vzc2lvbgovLyBAcGFyYW0gaW5kZXggLSBUaGUgaW5kZXggb2YgdGhlIHByZWNvbXB1dGVkIGNoYWxsZW5nZSBib3gsIGluY3JlbWVudGluZyB3aXRoIGVhY2ggY2h1bmsgb2YgZGF0ZS4KLy8gQHBhcmFtIHByZWNvbXB1dGVkQ2hhbGxlbmdlcyAtIFRoZSBwcmVjb21wdXRlZCBjaGFsbGVuZ2VzCi8vIEByZXR1cm5zIC0gdGhlIGlkIG9mIHRoZSBwcmVjb21wdXRlZCBjaGFsbGVuZ2UgYm94CnVwbG9hZFByZWNvbXB1dGVkQ2hhbGxlbmdlczoKCXByb3RvIDMgMQoKCS8vIFB1c2ggZW1wdHkgYnl0ZXMgYWZ0ZXIgdGhlIGZyYW1lIHBvaW50ZXIgdG8gcmVzZXJ2ZSBzcGFjZSBmb3IgbG9jYWwgdmFyaWFibGVzCglieXRlIDB4CgoJLy8gY29udHJhY3RzL21haGJlci5hbGdvLnRzOjM0MAoJLy8gYm94SWQgPSBzaGEyNTYoY29uY2F0KGNvbmNhdChzaGEyNTYobXNnKSwgInByZWNvbXB1dGVkQ2hhbGxlbmdlcyIpLCBpdG9iKGJveEluZGV4KSkpCglmcmFtZV9kaWcgLTEgLy8gbXNnOiBieXRlcwoJc2hhMjU2CglieXRlIDB4NzA3MjY1NjM2ZjZkNzA3NTc0NjU2NDQzNjg2MTZjNmM2NTZlNjc2NTczIC8vICJwcmVjb21wdXRlZENoYWxsZW5nZXMiCgljb25jYXQKCWZyYW1lX2RpZyAtMiAvLyBib3hJbmRleDogdWludDY0CglpdG9iCgljb25jYXQKCXNoYTI1NgoJZnJhbWVfYnVyeSAwIC8vIGJveElkOiBieXRlWzMyXQoKCS8vIGNvbnRyYWN0cy9tYWhiZXIuYWxnby50czozNDEKCS8vIHRoaXMucHJlY29tcHV0ZWRDaGFsbGVuZ2VzQm94ZXMoYm94SWQpLnJlcGxhY2UoMCwgcHJlY29tcHV0ZWRDaGFsbGVuZ2VzKQoJZnJhbWVfZGlnIDAgLy8gYm94SWQ6IGJ5dGVbMzJdCglpbnQgMAoJZnJhbWVfZGlnIC0zIC8vIHByZWNvbXB1dGVkQ2hhbGxlbmdlczogYnl0ZXMKCWJveF9yZXBsYWNlCgoJLy8gY29udHJhY3RzL21haGJlci5hbGdvLnRzOjM0MgoJLy8gcmV0dXJuIGJveElkOwoJZnJhbWVfZGlnIDAgLy8gYm94SWQ6IGJ5dGVbMzJdCgoJLy8gc2V0IHRoZSBzdWJyb3V0aW5lIHJldHVybiB2YWx1ZQoJZnJhbWVfYnVyeSAwCglyZXRzdWIKCi8vIGNyZWF0ZUludGVybWVkaWF0ZUNoYWxsZW5nZXNCb3gocGF5LGJ5dGVbXSx1aW50NjQsdWludDY0KWJ5dGVbMzJdCmFiaV9yb3V0ZV9jcmVhdGVJbnRlcm1lZGlhdGVDaGFsbGVuZ2VzQm94OgoJLy8gVGhlIEFCSSByZXR1cm4gcHJlZml4CglieXRlIDB4MTUxZjdjNzUKCgkvLyBib3hTaXplOiB1aW50NjQKCXR4bmEgQXBwbGljYXRpb25BcmdzIDMKCWJ0b2kKCgkvLyBib3hJbmRleDogdWludDY0Cgl0eG5hIEFwcGxpY2F0aW9uQXJncyAyCglidG9pCgoJLy8gbXNnOiBieXRlW10KCXR4bmEgQXBwbGljYXRpb25BcmdzIDEKCWV4dHJhY3QgMiAwCgoJLy8gbWJickRlcG9zaXRUeG46IHBheQoJdHhuIEdyb3VwSW5kZXgKCWludCAxCgktCglkdXAKCWd0eG5zIFR5cGVFbnVtCglpbnQgcGF5Cgk9PQoJYXNzZXJ0CgoJLy8gZXhlY3V0ZSBjcmVhdGVJbnRlcm1lZGlhdGVDaGFsbGVuZ2VzQm94KHBheSxieXRlW10sdWludDY0LHVpbnQ2NClieXRlWzMyXQoJY2FsbHN1YiBjcmVhdGVJbnRlcm1lZGlhdGVDaGFsbGVuZ2VzQm94Cgljb25jYXQKCWxvZwoJaW50IDEKCXJldHVybgoKLy8gY3JlYXRlSW50ZXJtZWRpYXRlQ2hhbGxlbmdlc0JveChtYmJyRGVwb3NpdFR4bjogUGF5VHhuLCBtc2c6IGJ5dGVzLCBib3hJbmRleDogdWludDY0LCBib3hTaXplOiB1aW50NjQpOiBieXRlczMyCi8vCi8vIGNyZWF0ZUludGVybWVkaWF0ZUNoYWxsZW5nZXNCb3gKLy8gQ3JlYXRlcyBhIGJveCB0aGF0IHdpbGwgYmUgdXNlZCB0byBjb250YWluIGludGVybWVkaWF0ZUNoYWxsZW5nZXNCb3guCi8vIFNob3VsZCBldmVudHVhbGx5IGJlIGEgbWlycm9yIGltYWdlIG9mIHRoZSBjb3JyZXNwb25kaW5nIHVwbG9hZFByZWNvbXB1dGVkQ2hhbGxlbmdlc0JveC4KLy8gQHBhcmFtIG1zZyAtIE1zZywgZnVuY3Rpb25pbmcgYXMgdGhlIGlkIGZvciB0aGUgd2l0aGRyYXdhbCBzZXNzaW9uCi8vIEBwYXJhbSBib3hJbmRleCAtIFRoZSBpbmRleCBvZiB0aGUgcHJlY29tcHV0ZWQgY2hhbGxlbmdlIGJveCwgaW5jcmVtZW50aW5nIHdpdGggZWFjaCBjaHVuayBvZiBkYXRlLgovLyBAcGFyYW0gYm94U2l6ZSAtIFRoZSBzaXplIG9mIHRoZSBwcmVjb21wdXRlZCBjaGFsbGVuZ2UgYm94Ci8vIEByZXR1cm5zIC0gdGhlIGlkIG9mIHRoZSBwcmVjb21wdXRlZCBjaGFsbGVuZ2UgYm94CmNyZWF0ZUludGVybWVkaWF0ZUNoYWxsZW5nZXNCb3g6Cglwcm90byA0IDEKCgkvLyBQdXNoIGVtcHR5IGJ5dGVzIGFmdGVyIHRoZSBmcmFtZSBwb2ludGVyIHRvIHJlc2VydmUgc3BhY2UgZm9yIGxvY2FsIHZhcmlhYmxlcwoJYnl0ZSAweAoKCS8vIGNvbnRyYWN0cy9tYWhiZXIuYWxnby50czozNTcKCS8vIGJveElkID0gc2hhMjU2KGNvbmNhdChjb25jYXQoc2hhMjU2KG1zZyksICJpbnRlcm1lZGlhdGVDaGFsbGVuZ2VzIiksIGl0b2IoYm94SW5kZXgpKSkKCWZyYW1lX2RpZyAtMiAvLyBtc2c6IGJ5dGVzCglzaGEyNTYKCWJ5dGUgMHg2OTZlNzQ2NTcyNmQ2NTY0Njk2MTc0NjU0MzY4NjE2YzZjNjU2ZTY3NjU3MyAvLyAiaW50ZXJtZWRpYXRlQ2hhbGxlbmdlcyIKCWNvbmNhdAoJZnJhbWVfZGlnIC0zIC8vIGJveEluZGV4OiB1aW50NjQKCWl0b2IKCWNvbmNhdAoJc2hhMjU2CglmcmFtZV9idXJ5IDAgLy8gYm94SWQ6IGJ5dGVbMzJdCgoJLy8gY29udHJhY3RzL21haGJlci5hbGdvLnRzOjM1OAoJLy8gdGhpcy5wcmVjb21wdXRlZENoYWxsZW5nZXNCb3hlcyhib3hJZCkuY3JlYXRlKGJveFNpemUpCglmcmFtZV9kaWcgMCAvLyBib3hJZDogYnl0ZVszMl0KCWZyYW1lX2RpZyAtNCAvLyBib3hTaXplOiB1aW50NjQKCWJveF9jcmVhdGUKCXBvcAoKCS8vIGNvbnRyYWN0cy9tYWhiZXIuYWxnby50czozNTkKCS8vIHJldHVybiBib3hJZDsKCWZyYW1lX2RpZyAwIC8vIGJveElkOiBieXRlWzMyXQoKCS8vIHNldCB0aGUgc3Vicm91dGluZSByZXR1cm4gdmFsdWUKCWZyYW1lX2J1cnkgMAoJcmV0c3ViCgovLyBjb21wdXRlSW5kaXZpZHVhbENoYWxsZW5nZShieXRlW10sYnl0ZVtdLHVpbnQ2NCxieXRlW10sdWludDY0LHVpbnQ2NCkoYnl0ZVszMl0sdWludDY0KQphYmlfcm91dGVfY29tcHV0ZUluZGl2aWR1YWxDaGFsbGVuZ2U6CgkvLyBUaGUgQUJJIHJldHVybiBwcmVmaXgKCWJ5dGUgMHgxNTFmN2M3NQoKCS8vIGNQcmV2T2Zmc2V0OiB1aW50NjQKCXR4bmEgQXBwbGljYXRpb25BcmdzIDYKCWJ0b2kKCgkvLyBjUHJldkJveEluZGV4OiB1aW50NjQKCXR4bmEgQXBwbGljYXRpb25BcmdzIDUKCWJ0b2kKCgkvLyBrZXlJbWFnZTogYnl0ZVtdCgl0eG5hIEFwcGxpY2F0aW9uQXJncyA0CglleHRyYWN0IDIgMAoKCS8vIHBrSW5kZXg6IHVpbnQ2NAoJdHhuYSBBcHBsaWNhdGlvbkFyZ3MgMwoJYnRvaQoKCS8vIG5vbmNlOiBieXRlW10KCXR4bmEgQXBwbGljYXRpb25BcmdzIDIKCWV4dHJhY3QgMiAwCgoJLy8gbXNnOiBieXRlW10KCXR4bmEgQXBwbGljYXRpb25BcmdzIDEKCWV4dHJhY3QgMiAwCgoJLy8gZXhlY3V0ZSBjb21wdXRlSW5kaXZpZHVhbENoYWxsZW5nZShieXRlW10sYnl0ZVtdLHVpbnQ2NCxieXRlW10sdWludDY0LHVpbnQ2NCkoYnl0ZVszMl0sdWludDY0KQoJY2FsbHN1YiBjb21wdXRlSW5kaXZpZHVhbENoYWxsZW5nZQoJY29uY2F0Cglsb2cKCWludCAxCglyZXR1cm4KCi8vIGNvbXB1dGVJbmRpdmlkdWFsQ2hhbGxlbmdlKG1zZzogYnl0ZXMsIG5vbmNlOiBieXRlcywgcGtJbmRleDogdWludDY0LCBrZXlJbWFnZTogYnl0ZXMsIGNQcmV2Qm94SW5kZXg6IHVpbnQ2NCwgY1ByZXZPZmZzZXQ6IHVpbnQ2NCk6IFtieXRlczMyLCB1aW50NjRdCi8vCi8vIGNvbXB1dGVJbmRpdmlkdWFsQ2hhbGxlbmdlCi8vIENvbXB1dGVzIGFuIGluZGl2aWR1YWwgY2hhbGxlbmdlLgovLyBOb3RlIHRoYXQgdGhlIHByZXZpb3VzIGNoYWxsZW5nZSBpcyBsb2FkZWQgc3BlY2lmaWNhbGx5IGZyb20gdGhlIHByZWNvbXB1dGVkIGNoYWxsZW5nZXMgYm94LgovLyBXaGlsZSB0aGUgY2FsY3VsYXRlZCBjaGFsbGVuZ2UgaXMgbG9hZGVkIGludG8gdGhlIGludGVybWVkaWF0ZSBjaGFsbGVuZ2VzIGJveC4KLy8gQXQgdGhlIGVuZCB3ZSB3aWxsIGNvbXBhcmUgaWYgdGhlIHR3byBib3hlcyBhcmUgdGhlIHNhbWUsIGFuZCBvZiBjb3Vyc2UgdGhhdCB0aGUgbGFzdCBjaGFsbGVuZ2UgaXMgdGhlIHNhbWUgYXMgdGhlIGluaXRpYWwgY2hhbGxlbmdlLgovLyBCeSBsb2FkaW5nIHNwZWNpZmljYWxseSBmcm9tIHRoZSBwcmVjb21wdXRlZCBjaGFsbGVuZ2VzIGJveCB3ZSBjYW4gdmVyaWZ5IGluIHBhcmFsbGVsbC4KLy8gVGhlIG9kZHMgb2YgYmVpbmcgYWJsZSB0byBhcnJpdmUgYXQgdGhlIHNhbWUgaW5pdGlhbCBjaGFsbGVuZ2UgaW4gdGhlIGxhc3QgY2hhbGxlbmdlIGlzIGFzdHJvbm9taWNhbGx5IGxvdyBVTkxFU1MgaXQgaXMgYSB2YWxpZCByaW5nIHNpZ25hdHVyZS4KLy8gUHVibGljIGtleXMgYXJlIG9mIGNvdXJzZSBsb2FkZWQgZnJvbSB0aGUgY29udHJhY3Qgc3RvcmFnZS4KLy8gQHBhcmFtIG1zZyAtIFRoZSBtZXNzYWdlIHRvIGJlIHNpZ25lZAovLyBAcGFyYW0gbm9uY2UgLSBUaGUgbm9uY2UsIHBhcnQgb2YgdGhlIHJpbmcgc2lnbmF0dXJlIGl0c2VsZiwgYWthIG9uZSBvZiB0aGUgZmFrZSBzZWNyZXQga2V5cwovLyBAcGFyYW0gcGtJbmRleC0gVGhlIGluZGV4IG51bWJlciBvZiB0aGUgcHVibGljIGtleSBpbiB0aGUgc21hcnQgY29udHJhY3Qgc3RvcmFnZQovLyBAcGFyYW0ga2V5SW1hZ2UgLSBUaGUga2V5IGltYWdlIG9mIHRoZSBzaWduZXIsIHJlcXVpcmVkIGZvciBsaW5rYWJpbHRpeSB0byBwcmV2ZW50IGRvdWJsZSBzcGVuZGluZwovLyBAcGFyYW0gY1ByZXZJbmRleCAtIFRoZSBpbmRleCBvZiB0aGUgcHJldmlvdXMgY2hhbGxlbmdlLCBhbGxvd2luZyBpdCB0byBiZSBsb2FkZWQgZnJvbSB0aGUgbG9hZGVkIHByZWNvbXB1dGVkIGNoYWxsZW5nZXMgYm94Ci8vIEByZXR1cm5zIC0gLi4uCmNvbXB1dGVJbmRpdmlkdWFsQ2hhbGxlbmdlOgoJcHJvdG8gNiAxCgoJLy8gUHVzaCBlbXB0eSBieXRlcyBhZnRlciB0aGUgZnJhbWUgcG9pbnRlciB0byByZXNlcnZlIHNwYWNlIGZvciBsb2NhbCB2YXJpYWJsZXMKCWJ5dGUgMHgKCWR1cG4gOAoKCS8vIGNvbnRyYWN0cy9tYWhiZXIuYWxnby50czozOTAKCS8vIHBrQm94SWQgPSBwa0luZGV4IC8gTUFYX1BLX0JPWF9QS19OVU1CRVIKCWZyYW1lX2RpZyAtMyAvLyBwa0luZGV4OiB1aW50NjQKCWludCA0OTYKCS8KCWZyYW1lX2J1cnkgMCAvLyBwa0JveElkOiB1aW50NjQKCgkvLyBjb250cmFjdHMvbWFoYmVyLmFsZ28udHM6MzkxCgkvLyBwa09mZnNldCA9IChwa0luZGV4ICUgTUFYX1BLX0JPWF9QS19OVU1CRVIpICogQ1VSVkVfUE9JTlRfU0laRQoJZnJhbWVfZGlnIC0zIC8vIHBrSW5kZXg6IHVpbnQ2NAoJaW50IDQ5NgoJJQoJaW50IDY0CgkqCglmcmFtZV9idXJ5IDEgLy8gcGtPZmZzZXQ6IHVpbnQ2NAoKCS8vIGNvbnRyYWN0cy9tYWhiZXIuYWxnby50czozOTIKCS8vIHBrID0gdGhpcy5xdWlja0FjY2Vzc1BLQm94ZXMocGtCb3hJZCkuZXh0cmFjdChwa09mZnNldCwgcGtPZmZzZXQgKyBDVVJWRV9QT0lOVF9TSVpFKQoJZnJhbWVfZGlnIDAgLy8gcGtCb3hJZDogdWludDY0CglpdG9iCglmcmFtZV9kaWcgMSAvLyBwa09mZnNldDogdWludDY0CglmcmFtZV9kaWcgMSAvLyBwa09mZnNldDogdWludDY0CglpbnQgNjQKCSsKCWJveF9leHRyYWN0CglmcmFtZV9idXJ5IDIgLy8gcGs6IGJ5dGVbXQoKCS8vIGNvbnRyYWN0cy9tYWhiZXIuYWxnby50czozOTQKCS8vIGNQcmV2Qm94SWQgPSBzaGEyNTYoY29uY2F0KGNvbmNhdChzaGEyNTYobXNnKSwgInByZWNvbXB1dGVkQ2hhbGxlbmdlcyIpLCBpdG9iKGNQcmV2Qm94SW5kZXgpKSkKCWZyYW1lX2RpZyAtMSAvLyBtc2c6IGJ5dGVzCglzaGEyNTYKCWJ5dGUgMHg3MDcyNjU2MzZmNmQ3MDc1NzQ2NTY0NDM2ODYxNmM2YzY1NmU2NzY1NzMgLy8gInByZWNvbXB1dGVkQ2hhbGxlbmdlcyIKCWNvbmNhdAoJZnJhbWVfZGlnIC01IC8vIGNQcmV2Qm94SW5kZXg6IHVpbnQ2NAoJaXRvYgoJY29uY2F0CglzaGEyNTYKCWZyYW1lX2J1cnkgMyAvLyBjUHJldkJveElkOiBieXRlWzMyXQoKCS8vIGNvbnRyYWN0cy9tYWhiZXIuYWxnby50czozOTUKCS8vIGNQcmV2ID0gdGhpcy5wcmVjb21wdXRlZENoYWxsZW5nZXNCb3hlcyhjUHJldkJveElkKS5leHRyYWN0KGNQcmV2T2Zmc2V0LCBjUHJldk9mZnNldCArIENIQUxMRU5HRV9TSVpFKQoJZnJhbWVfZGlnIDMgLy8gY1ByZXZCb3hJZDogYnl0ZVszMl0KCWZyYW1lX2RpZyAtNiAvLyBjUHJldk9mZnNldDogdWludDY0CglmcmFtZV9kaWcgLTYgLy8gY1ByZXZPZmZzZXQ6IHVpbnQ2NAoJaW50IDMyCgkrCglib3hfZXh0cmFjdAoJZnJhbWVfYnVyeSA0IC8vIGNQcmV2OiBieXRlW10KCgkvLyBjb250cmFjdHMvbWFoYmVyLmFsZ28udHM6Mzk3CgkvLyBjb21wdXRlZENoYWxsZW5nZSA9IHRoaXMuY2hhbGxlbmdlKG1zZywgbm9uY2UsIGNQcmV2LCBwaywga2V5SW1hZ2UpCglmcmFtZV9kaWcgLTQgLy8ga2V5SW1hZ2U6IGJ5dGVzCglmcmFtZV9kaWcgMiAvLyBwazogYnl0ZVtdCglmcmFtZV9kaWcgNCAvLyBjUHJldjogYnl0ZVtdCglmcmFtZV9kaWcgLTIgLy8gbm9uY2U6IGJ5dGVzCglmcmFtZV9kaWcgLTEgLy8gbXNnOiBieXRlcwoJY2FsbHN1YiBjaGFsbGVuZ2UKCWZyYW1lX2J1cnkgNSAvLyBjb21wdXRlZENoYWxsZW5nZTogYnl0ZVtdCgoJLy8gY29udHJhY3RzL21haGJlci5hbGdvLnRzOjM5OQoJLy8gaW50ZXJtZWRpYXRlQ2hhbGxlbmdlc0JveEluZGV4ID0gY1ByZXZCb3hJbmRleAoJZnJhbWVfZGlnIC01IC8vIGNQcmV2Qm94SW5kZXg6IHVpbnQ2NAoJZnJhbWVfYnVyeSA2IC8vIGludGVybWVkaWF0ZUNoYWxsZW5nZXNCb3hJbmRleDogdWludDY0CgoJLy8gY29udHJhY3RzL21haGJlci5hbGdvLnRzOjQwMAoJLy8gaW50ZXJtZWRpYXRlQ2hhbGxlbmdlc0JveE9mZnNldCA9IGNQcmV2T2Zmc2V0ICsgQ0hBTExFTkdFX1NJWkUKCWZyYW1lX2RpZyAtNiAvLyBjUHJldk9mZnNldDogdWludDY0CglpbnQgMzIKCSsKCWZyYW1lX2J1cnkgNyAvLyBpbnRlcm1lZGlhdGVDaGFsbGVuZ2VzQm94T2Zmc2V0OiB1aW50NjQKCgkvLyBpZjFfY29uZGl0aW9uCgkvLyBjb250cmFjdHMvbWFoYmVyLmFsZ28udHM6NDAxCgkvLyBpbnRlcm1lZGlhdGVDaGFsbGVuZ2VzQm94T2Zmc2V0ID09PSBNQVhfQk9YX0JZVEVTCglmcmFtZV9kaWcgNyAvLyBpbnRlcm1lZGlhdGVDaGFsbGVuZ2VzQm94T2Zmc2V0OiB1aW50NjQKCWludCAzMjc2OAoJPT0KCWJ6IGlmMV9lbmQKCgkvLyBpZjFfY29uc2VxdWVudAoJLy8gY29udHJhY3RzL21haGJlci5hbGdvLnRzOjQwMwoJLy8gaW50ZXJtZWRpYXRlQ2hhbGxlbmdlc0JveEluZGV4ID0gaW50ZXJtZWRpYXRlQ2hhbGxlbmdlc0JveEluZGV4ICsgMQoJZnJhbWVfZGlnIDYgLy8gaW50ZXJtZWRpYXRlQ2hhbGxlbmdlc0JveEluZGV4OiB1aW50NjQKCWludCAxCgkrCglmcmFtZV9idXJ5IDYgLy8gaW50ZXJtZWRpYXRlQ2hhbGxlbmdlc0JveEluZGV4OiB1aW50NjQKCgkvLyBjb250cmFjdHMvbWFoYmVyLmFsZ28udHM6NDA0CgkvLyBpbnRlcm1lZGlhdGVDaGFsbGVuZ2VzQm94T2Zmc2V0ID0gMAoJaW50IDAKCWZyYW1lX2J1cnkgNyAvLyBpbnRlcm1lZGlhdGVDaGFsbGVuZ2VzQm94T2Zmc2V0OiB1aW50NjQKCmlmMV9lbmQ6CgkvLyBjb250cmFjdHMvbWFoYmVyLmFsZ28udHM6NDEyCgkvLyBpbnRlcm1lZGlhdGVDaGFsbGVuZ2VzQm94SWQgPSBzaGEyNTYoCgkvLyAgICAgICBjb25jYXQoY29uY2F0KHNoYTI1Nihtc2cpLCAicHJlY29tcHV0ZWRDaGFsbGVuZ2VzIiksIGl0b2IoaW50ZXJtZWRpYXRlQ2hhbGxlbmdlc0JveEluZGV4KSkKCS8vICAgICApCglmcmFtZV9kaWcgLTEgLy8gbXNnOiBieXRlcwoJc2hhMjU2CglieXRlIDB4NzA3MjY1NjM2ZjZkNzA3NTc0NjU2NDQzNjg2MTZjNmM2NTZlNjc2NTczIC8vICJwcmVjb21wdXRlZENoYWxsZW5nZXMiCgljb25jYXQKCWZyYW1lX2RpZyA2IC8vIGludGVybWVkaWF0ZUNoYWxsZW5nZXNCb3hJbmRleDogdWludDY0CglpdG9iCgljb25jYXQKCXNoYTI1NgoJZnJhbWVfYnVyeSA4IC8vIGludGVybWVkaWF0ZUNoYWxsZW5nZXNCb3hJZDogYnl0ZVszMl0KCgkvLyBjb250cmFjdHMvbWFoYmVyLmFsZ28udHM6NDE1CgkvLyB0aGlzLmludGVybWVkaWF0ZUNoYWxsZW5nZXNCb3hlcyhpbnRlcm1lZGlhdGVDaGFsbGVuZ2VzQm94SWQpLnJlcGxhY2UoCgkvLyAgICAgICBpbnRlcm1lZGlhdGVDaGFsbGVuZ2VzQm94T2Zmc2V0LAoJLy8gICAgICAgY29tcHV0ZWRDaGFsbGVuZ2UKCS8vICAgICApCglmcmFtZV9kaWcgOCAvLyBpbnRlcm1lZGlhdGVDaGFsbGVuZ2VzQm94SWQ6IGJ5dGVbMzJdCglmcmFtZV9kaWcgNyAvLyBpbnRlcm1lZGlhdGVDaGFsbGVuZ2VzQm94T2Zmc2V0OiB1aW50NjQKCWZyYW1lX2RpZyA1IC8vIGNvbXB1dGVkQ2hhbGxlbmdlOiBieXRlW10KCWJveF9yZXBsYWNlCgoJLy8gY29udHJhY3RzL21haGJlci5hbGdvLnRzOjQxOQoJLy8gcmV0dXJuIFtpbnRlcm1lZGlhdGVDaGFsbGVuZ2VzQm94SWQsIGludGVybWVkaWF0ZUNoYWxsZW5nZXNCb3hPZmZzZXRdOwoJZnJhbWVfZGlnIDggLy8gaW50ZXJtZWRpYXRlQ2hhbGxlbmdlc0JveElkOiBieXRlWzMyXQoJZnJhbWVfZGlnIDcgLy8gaW50ZXJtZWRpYXRlQ2hhbGxlbmdlc0JveE9mZnNldDogdWludDY0CglpdG9iCgljb25jYXQKCgkvLyBzZXQgdGhlIHN1YnJvdXRpbmUgcmV0dXJuIHZhbHVlCglmcmFtZV9idXJ5IDAKCgkvLyBwb3AgYWxsIGxvY2FsIHZhcmlhYmxlcyBmcm9tIHRoZSBzdGFjawoJcG9wbiA4CglyZXRzdWIKCmNyZWF0ZV9Ob09wOgoJbWV0aG9kICJjcmVhdGVBcHBsaWNhdGlvbigpdm9pZCIKCXR4bmEgQXBwbGljYXRpb25BcmdzIDAKCW1hdGNoIGFiaV9yb3V0ZV9jcmVhdGVBcHBsaWNhdGlvbgoJZXJyCgpjYWxsX05vT3A6CgltZXRob2QgImR1bW15T3BVcCh1aW50NjQpdWludDY0IgoJbWV0aG9kICJwdWJsaWNTY2FsYXJNdWx0QmFzZShieXRlW10pYnl0ZVtdIgoJbWV0aG9kICJwdWJsaWNTY2FsYXJNdWx0KGJ5dGVbXSxieXRlW10pYnl0ZVtdIgoJbWV0aG9kICJwdWJsaWNWYWxpZFBvaW50KGJ5dGVbXSlib29sIgoJbWV0aG9kICJwdWJsaWNQb2ludEFkZChieXRlW10sYnl0ZVtdKWJ5dGVbXSIKCW1ldGhvZCAicHVibGljSGFzaFBvaW50VG9Qb2ludChieXRlW10pYnl0ZVtdIgoJbWV0aG9kICJwdWJsaWNDaGFsbGVuZ2UoYnl0ZVtdLGJ5dGVbXSxieXRlW10sYnl0ZVtdLGJ5dGVbXSlieXRlW10iCgltZXRob2QgInB1YmxpY0NoYWxsZW5nZUxzaWcoYnl0ZVtdLGJ5dGVbXSxieXRlW10sYnl0ZVtdLGJ5dGVbXSxwYXkpdm9pZCIKCW1ldGhvZCAiZGVwb3NpdChwYXksYnl0ZVtdKXVpbnQ2NFtdIgoJbWV0aG9kICJpbml0V2l0aGRyYXdhbFNlc3Npb24ocGF5LGJ5dGVbXSxieXRlW10pYnl0ZVszMl0iCgltZXRob2QgImNyZWF0ZVVwbG9hZFByZWNvbXB1dGVkQ2hhbGxlbmdlc0JveChwYXksYnl0ZVtdLHVpbnQ2NCx1aW50NjQpYnl0ZVszMl0iCgltZXRob2QgInVwbG9hZFByZWNvbXB1dGVkQ2hhbGxlbmdlcyhieXRlW10sdWludDY0LGJ5dGVbXSlieXRlWzMyXSIKCW1ldGhvZCAiY3JlYXRlSW50ZXJtZWRpYXRlQ2hhbGxlbmdlc0JveChwYXksYnl0ZVtdLHVpbnQ2NCx1aW50NjQpYnl0ZVszMl0iCgltZXRob2QgImNvbXB1dGVJbmRpdmlkdWFsQ2hhbGxlbmdlKGJ5dGVbXSxieXRlW10sdWludDY0LGJ5dGVbXSx1aW50NjQsdWludDY0KShieXRlWzMyXSx1aW50NjQpIgoJdHhuYSBBcHBsaWNhdGlvbkFyZ3MgMAoJbWF0Y2ggYWJpX3JvdXRlX2R1bW15T3BVcCBhYmlfcm91dGVfcHVibGljU2NhbGFyTXVsdEJhc2UgYWJpX3JvdXRlX3B1YmxpY1NjYWxhck11bHQgYWJpX3JvdXRlX3B1YmxpY1ZhbGlkUG9pbnQgYWJpX3JvdXRlX3B1YmxpY1BvaW50QWRkIGFiaV9yb3V0ZV9wdWJsaWNIYXNoUG9pbnRUb1BvaW50IGFiaV9yb3V0ZV9wdWJsaWNDaGFsbGVuZ2UgYWJpX3JvdXRlX3B1YmxpY0NoYWxsZW5nZUxzaWcgYWJpX3JvdXRlX2RlcG9zaXQgYWJpX3JvdXRlX2luaXRXaXRoZHJhd2FsU2Vzc2lvbiBhYmlfcm91dGVfY3JlYXRlVXBsb2FkUHJlY29tcHV0ZWRDaGFsbGVuZ2VzQm94IGFiaV9yb3V0ZV91cGxvYWRQcmVjb21wdXRlZENoYWxsZW5nZXMgYWJpX3JvdXRlX2NyZWF0ZUludGVybWVkaWF0ZUNoYWxsZW5nZXNCb3ggYWJpX3JvdXRlX2NvbXB1dGVJbmRpdmlkdWFsQ2hhbGxlbmdlCgllcnI=",
    "clear": "I3ByYWdtYSB2ZXJzaW9uIDEw"
  },
  "contract": {
    "name": "Mahber",
    "desc": "",
    "methods": [
      {
        "name": "createApplication",
        "args": [],
        "returns": {
          "type": "void"
        }
      },
      {
        "name": "dummyOpUp",
        "desc": "Dummy Op UpDummy operation to get more opcode budget@i- The number to return, necssary to deduplicate the name",
        "args": [
          {
            "name": "i",
            "type": "uint64"
          }
        ],
        "returns": {
          "type": "uint64",
          "desc": "the number (but we do nothing with it)"
        }
      },
      {
        "name": "publicScalarMultBase",
        "desc": "publicScalarMultBasePublic wrapper around the scalarMultBase method, allowing it to be tested directly.@scalar- The scalar to multiply the basepoint by.",
        "args": [
          {
            "name": "scalar",
            "type": "byte[]"
          }
        ],
        "returns": {
          "type": "byte[]",
          "desc": "the content of the scalarMultBase call"
        }
      },
      {
        "name": "publicScalarMult",
        "desc": "publicScalarMultPublic wrapper around the scalarMult method, allowing it to be tested directly.@scalar- The scalar to multiply the point with@point- The point that is multiplied with the scalar",
        "args": [
          {
            "name": "scalar",
            "type": "byte[]"
          },
          {
            "name": "point",
            "type": "byte[]"
          }
        ],
        "returns": {
          "type": "byte[]",
          "desc": "the content of the scalarMult call"
        }
      },
      {
        "name": "publicValidPoint",
        "desc": "publicValidPointPublic wrapper around the validPoint method, allowing it to be tested directly.@point- The point to check",
        "args": [
          {
            "name": "point",
            "type": "byte[]"
          }
        ],
        "returns": {
          "type": "bool",
          "desc": "the content of the validPoint call"
        }
      },
      {
        "name": "publicPointAdd",
        "desc": "publicPointAddPublic wrapper around the pointAdd method, allowing it to be tested directly.",
        "args": [
          {
            "name": "pointA",
            "type": "byte[]",
            "desc": "The first point"
          },
          {
            "name": "pointB",
            "type": "byte[]",
            "desc": "The second point"
          }
        ],
        "returns": {
          "type": "byte[]",
          "desc": "the content of the pointAdd call"
        }
      },
      {
        "name": "publicHashPointToPoint",
        "desc": "publicHashPointToPointPublic wrapper around the hashPointToPoint method, allowing it to be tested directly.",
        "args": [
          {
            "name": "point",
            "type": "byte[]",
            "desc": "The point to hash"
          }
        ],
        "returns": {
          "type": "byte[]",
          "desc": "the content of the hashPointToPoint call"
        }
      },
      {
        "name": "publicChallenge",
        "desc": "publicChallengePublic wrapper around the challenge method, allowing it to be tested directly.",
        "args": [
          {
            "name": "msg",
            "type": "byte[]",
            "desc": "The message to be signed"
          },
          {
            "name": "nonce",
            "type": "byte[]",
            "desc": "The nonce, part of the ring signature itself, aka one of the fake secret keys"
          },
          {
            "name": "cPrev",
            "type": "byte[]",
            "desc": "The previous challenge, or the base challenge if this is the first link (in which case it is part of the ring sig)"
          },
          {
            "name": "pk",
            "type": "byte[]",
            "desc": "The specific public key in the ring (indexed from the array of public keys)"
          },
          {
            "name": "keyImage",
            "type": "byte[]",
            "desc": "The key image of the signer, required for linkabiltiy to prevent double spending"
          }
        ],
        "returns": {
          "type": "byte[]",
          "desc": "- the content of the privateChallenge call"
        }
      },
      {
        "name": "publicChallengeLsig",
        "desc": "publicChallengePublic wrapper around the challenge method, allowing it to be tested directly.",
        "args": [
          {
            "name": "msg",
            "type": "byte[]",
            "desc": "The message to be signed"
          },
          {
            "name": "nonce",
            "type": "byte[]",
            "desc": "The nonce, part of the ring signature itself, aka one of the fake secret keys"
          },
          {
            "name": "cPrev",
            "type": "byte[]",
            "desc": "The previous challenge, or the base challenge if this is the first link (in which case it is part of the ring sig)"
          },
          {
            "name": "pk",
            "type": "byte[]",
            "desc": "The specific public key in the ƒring (indexed from the array of public keys)"
          },
          {
            "name": "keyImage",
            "type": "byte[]",
            "desc": "The key image of the signer, required for linkabiltiy to prevent double spending"
          },
          {
            "name": "lsigTxn",
            "type": "pay"
          }
        ],
        "returns": {
          "type": "void",
          "desc": "- the content of the privateChallenge call"
        }
      },
      {
        "name": "deposit",
        "desc": "depositDeposit funds + public key into the contract",
        "args": [
          {
            "name": "depositTxn",
            "type": "pay"
          },
          {
            "name": "pk",
            "type": "byte[]",
            "desc": "The public key to depositTODO: Add custom EdDSA to check that the depositor knows the secret key. Useful to prevent rogue key attack, adding the negative of another pk."
          }
        ],
        "returns": {
          "type": "uint64[]",
          "desc": "- the number id of the public key, if successful. fails if unsuccessful."
        }
      },
      {
        "name": "initWithdrawalSession",
        "desc": "initWithdrawalCreates a box representing a \"withdrawal session\".Of key importance is the signed message string, which must contain the following:Ring Size - Chosen number of PKs, i.e. size of anonymity setKey Image - The keyimage, the one thing that is unique for a withdrawalApp Id - The id of the smart contract appNominal amount - The denomination of the contract, what was deposited originallyASA ID - Clarifies the ASA ID. (Plain Algo has ID 0, \"the default\" asset of Algorand)Withdrawal Address - Address of the final recipient of the fundsRelayer Address - Address of the relayer, facilitating the withdrawal (could be same as withdrawal address)Relayer Fee - The fee the relayer charges for facilitating the withdrawal (could be 0)The hash of the message becomes the id of the withdrawal session's box.",
        "args": [
          {
            "name": "mbbrDepositTxn",
            "type": "pay",
            "desc": "The transaction that deposited the MBBR"
          },
          {
            "name": "msg",
            "type": "byte[]",
            "desc": "Signed message"
          },
          {
            "name": "initialChallenge",
            "type": "byte[]",
            "desc": "The initial challenge, which needs to be re-created to verify the ring signature"
          }
        ],
        "returns": {
          "type": "byte[32]",
          "desc": "- the id of the withdrawal session box"
        }
      },
      {
        "name": "createUploadPrecomputedChallengesBox",
        "desc": "TODO: destroyWithdrawalSession, IF SESSION LOCKED",
        "args": [
          {
            "name": "mbbrDepositTxn",
            "type": "pay"
          },
          {
            "name": "msg",
            "type": "byte[]"
          },
          {
            "name": "boxIndex",
            "type": "uint64"
          },
          {
            "name": "boxSize",
            "type": "uint64"
          }
        ],
        "returns": {
          "type": "byte[32]"
        }
      },
      {
        "name": "uploadPrecomputedChallenges",
        "desc": "uploadPrecomputedChallengesCreates a box and uploads the precomputed challenges into it.",
        "args": [
          {
            "name": "msg",
            "type": "byte[]",
            "desc": "Msg, functioning as the id for the withdrawal session"
          },
          {
            "name": "boxIndex",
            "type": "uint64"
          },
          {
            "name": "precomputedChallenges",
            "type": "byte[]"
          }
        ],
        "returns": {
          "type": "byte[32]"
        }
      },
      {
        "name": "createIntermediateChallengesBox",
        "desc": "createIntermediateChallengesBoxCreates a box that will be used to contain intermediateChallengesBox.Should eventually be a mirror image of the corresponding uploadPrecomputedChallengesBox.",
        "args": [
          {
            "name": "mbbrDepositTxn",
            "type": "pay"
          },
          {
            "name": "msg",
            "type": "byte[]",
            "desc": "Msg, functioning as the id for the withdrawal session"
          },
          {
            "name": "boxIndex",
            "type": "uint64",
            "desc": "The index of the precomputed challenge box, incrementing with each chunk of date."
          },
          {
            "name": "boxSize",
            "type": "uint64",
            "desc": "The size of the precomputed challenge box"
          }
        ],
        "returns": {
          "type": "byte[32]",
          "desc": "- the id of the precomputed challenge box"
        }
      },
      {
        "name": "computeIndividualChallenge",
        "desc": "computeIndividualChallengeComputes an individual challenge.Note that the previous challenge is loaded specifically from the precomputed challenges box.While the calculated challenge is loaded into the intermediate challenges box.At the end we will compare if the two boxes are the same, and of course that the last challenge is the same as the initial challenge.By loading specifically from the precomputed challenges box we can verify in parallell.The odds of being able to arrive at the same initial challenge in the last challenge is astronomically low UNLESS it is a valid ring signature.Public keys are of course loaded from the contract storage.",
        "args": [
          {
            "name": "msg",
            "type": "byte[]",
            "desc": "The message to be signed"
          },
          {
            "name": "nonce",
            "type": "byte[]",
            "desc": "The nonce, part of the ring signature itself, aka one of the fake secret keys"
          },
          {
            "name": "pkIndex",
            "type": "uint64",
            "desc": "The index number of the public key in the smart contract storage"
          },
          {
            "name": "keyImage",
            "type": "byte[]",
            "desc": "The key image of the signer, required for linkabiltiy to prevent double spending"
          },
          {
            "name": "cPrevBoxIndex",
            "type": "uint64"
          },
          {
            "name": "cPrevOffset",
            "type": "uint64"
          }
        ],
        "returns": {
          "type": "(byte[32],uint64)"
        }
      }
    ]
  }
}