{
  "hints": {
    "dummyOpUp(uint64)uint64": {
      "call_config": {
        "no_op": "CALL"
      }
    },
    "challenge(byte[],byte[],byte[],byte[],byte[])byte[]": {
      "call_config": {
        "no_op": "CALL"
      }
    },
    "createApplication()void": {
      "call_config": {
        "no_op": "CREATE"
      }
    }
  },
  "bare_call_config": {
    "no_op": "NEVER",
    "opt_in": "NEVER",
    "close_out": "NEVER",
    "update_application": "NEVER",
    "delete_application": "NEVER"
  },
  "schema": {
    "local": {
      "declared": {},
      "reserved": {}
    },
    "global": {
      "declared": {},
      "reserved": {}
    }
  },
  "state": {
    "global": {
      "num_byte_slices": 0,
      "num_uints": 0
    },
    "local": {
      "num_byte_slices": 0,
      "num_uints": 0
    }
  },
  "source": {
    "approval": "I3ByYWdtYSB2ZXJzaW9uIDEwCgovLyBUaGlzIFRFQUwgd2FzIGdlbmVyYXRlZCBieSBURUFMU2NyaXB0IHYwLjYzLjAKLy8gaHR0cHM6Ly9naXRodWIuY29tL2FsZ29yYW5kZm91bmRhdGlvbi9URUFMU2NyaXB0CgovLyBUaGlzIGNvbnRyYWN0IGlzIGNvbXBsaWFudCB3aXRoIGFuZC9vciBpbXBsZW1lbnRzIHRoZSBmb2xsb3dpbmcgQVJDczogWyBBUkM0IF0KCi8vIFRoZSBmb2xsb3dpbmcgdGVuIGxpbmVzIG9mIFRFQUwgaGFuZGxlIGluaXRpYWwgcHJvZ3JhbSBmbG93Ci8vIFRoaXMgcGF0dGVybiBpcyB1c2VkIHRvIG1ha2UgaXQgZWFzeSBmb3IgYW55b25lIHRvIHBhcnNlIHRoZSBzdGFydCBvZiB0aGUgcHJvZ3JhbSBhbmQgZGV0ZXJtaW5lIGlmIGEgc3BlY2lmaWMgYWN0aW9uIGlzIGFsbG93ZWQKLy8gSGVyZSwgYWN0aW9uIHJlZmVycyB0byB0aGUgT25Db21wbGV0ZSBpbiBjb21iaW5hdGlvbiB3aXRoIHdoZXRoZXIgdGhlIGFwcCBpcyBiZWluZyBjcmVhdGVkIG9yIGNhbGxlZAovLyBFdmVyeSBwb3NzaWJsZSBhY3Rpb24gZm9yIHRoaXMgY29udHJhY3QgaXMgcmVwcmVzZW50ZWQgaW4gdGhlIHN3aXRjaCBzdGF0ZW1lbnQKLy8gSWYgdGhlIGFjdGlvbiBpcyBub3QgaW1wbG1lbnRlZCBpbiB0aGUgY29udHJhY3QsIGl0cyByZXBzZWN0aXZlIGJyYW5jaCB3aWxsIGJlICJOT1RfSU1QTE1FTlRFRCIgd2hpY2gganVzdCBjb250YWlucyAiZXJyIgp0eG4gQXBwbGljYXRpb25JRAppbnQgMAo+CmludCA2CioKdHhuIE9uQ29tcGxldGlvbgorCnN3aXRjaCBjcmVhdGVfTm9PcCBOT1RfSU1QTEVNRU5URUQgTk9UX0lNUExFTUVOVEVEIE5PVF9JTVBMRU1FTlRFRCBOT1RfSU1QTEVNRU5URUQgTk9UX0lNUExFTUVOVEVEIGNhbGxfTm9PcAoKTk9UX0lNUExFTUVOVEVEOgoJZXJyCgovLyBkdW1teU9wVXAodWludDY0KXVpbnQ2NAovLwovLyBEdW1teSBPcCBVcAovLyBEdW1teSBvcGVyYXRpb24gdG8gZ2V0IG1vcmUgb3Bjb2RlIGJ1ZGdldAovLyBAaSAtIFRoZSBudW1iZXIgdG8gcmV0dXJuLCBuZWNzc2FyeSB0byBkZWR1cGxpY2F0ZSB0aGUgbmFtZQovLyBAcmV0dXJucyB0aGUgbnVtYmVyIChidXQgd2UgZG8gbm90aGluZyB3aXRoIGl0KQphYmlfcm91dGVfZHVtbXlPcFVwOgoJLy8gaTogdWludDY0Cgl0eG5hIEFwcGxpY2F0aW9uQXJncyAxCglidG9pCgoJLy8gZXhlY3V0ZSBkdW1teU9wVXAodWludDY0KXVpbnQ2NAoJY2FsbHN1YiBkdW1teU9wVXAKCWludCAxCglyZXR1cm4KCmR1bW15T3BVcDoKCXByb3RvIDEgMAoKCS8vIGNvbnRyYWN0cy9tYWhiZXIuYWxnby50czoxMQoJLy8gcmV0dXJuIGk7CglmcmFtZV9kaWcgLTEgLy8gaTogdWludDY0CglpdG9iCglieXRlIDB4MTUxZjdjNzUKCXN3YXAKCWNvbmNhdAoJbG9nCglyZXRzdWIKCi8vIGNoYWxsZW5nZShieXRlcyxieXRlcyxieXRlcyxieXRlcyxieXRlcylieXRlW10KLy8KLy8gY2hhbGxlbmdlCi8vIFByb2R1Y2UgdGhlIGNoYWxsZW5nZSwgaS5lLiBhbiBpbmRpdmlkdWFsIGl0ZXJhdGlvbiBpbiB0aGUgcmluZyBzaWcgdmVyaWZpY2F0aW9uLgovLyBXZSBtb2QgYnkgb3JkZXIgb2YgZnIgaHR0cHM6Ly9naXRodWIuY29tL0NvbnNlbnN5cy9nbmFyay1jcnlwdG8vYmxvYi9tYXN0ZXIvZWNjL2JuMjU0L2ZyL2VsZW1lbnQuZ28jTDQyCi8vIGNfe2krMX0gPSBIcyhtIHx8IHJfe2l9ICogRyArIGNfe2l9ICogS197aX0gfHwgcl97aX0qSHAoS197aX0pICsgY197aX0gKiBJKSBtb2QgfGZyfAovLyBAcGFyYW0gbXNnIC0gVGhlIG1lc3NhZ2UgdG8gYmUgc2lnbmVkCi8vIEBwYXJhbSBub25jZSAtIFRoZSBub25jZSwgcGFydCBvZiB0aGUgcmluZyBzaWduYXR1cmUgaXRzZWxmLCBha2Egb25lIG9mIHRoZSBmYWtlIHNlY3JldCBrZXlzCi8vIEBwYXJhbSBjUHJldiAtIFRoZSBwcmV2aW91cyBjaGFsbGVuZ2UsIG9yIHRoZSBiYXNlIGNoYWxsZW5nZSBpZiB0aGlzIGlzIHRoZSBmaXJzdCBsaW5rIChpbiB3aGljaCBjYXNlIGl0IGlzIHBhcnQgb2YgdGhlIHJpbmcgc2lnKQovLyBAcGFyYW0gcGsgLSBUaGUgc3BlY2lmaWMgcHVibGljIGtleSBpbiB0aGUgcmluZyAoaW5kZXhlZCBmcm9tIHRoZSBhcnJheSBvZiBwdWJsaWMga2V5cykKLy8gQHBhcmFtIGtleUltYWdlIC0gVGhlIGtleSBpbWFnZSBvZiB0aGUgc2lnbmVyLCByZXF1aXJlZCBmb3IgbGlua2FiaWx0aXkgdG8gcHJldmVudCBkb3VibGUgc3BlbmRpbmcKLy8gQHJldHVybnMKYWJpX3JvdXRlX2NoYWxsZW5nZToKCWJ5dGUgMHg7IGR1cG4gOCAvLyBwdXNoIGVtcHR5IGJ5dGVzIHRvIGZpbGwgdGhlIHN0YWNrIGZyYW1lIGZvciB0aGlzIHN1YnJvdXRpbmUncyBsb2NhbCB2YXJpYWJsZXMKCgkvLyBrZXlJbWFnZTogYnl0ZVtdCgl0eG5hIEFwcGxpY2F0aW9uQXJncyA1CglleHRyYWN0IDIgMAoKCS8vIHBrOiBieXRlW10KCXR4bmEgQXBwbGljYXRpb25BcmdzIDQKCWV4dHJhY3QgMiAwCgoJLy8gY1ByZXY6IGJ5dGVbXQoJdHhuYSBBcHBsaWNhdGlvbkFyZ3MgMwoJZXh0cmFjdCAyIDAKCgkvLyBub25jZTogYnl0ZVtdCgl0eG5hIEFwcGxpY2F0aW9uQXJncyAyCglleHRyYWN0IDIgMAoKCS8vIG1zZzogYnl0ZVtdCgl0eG5hIEFwcGxpY2F0aW9uQXJncyAxCglleHRyYWN0IDIgMAoKCS8vIGV4ZWN1dGUgY2hhbGxlbmdlKGJ5dGVzLGJ5dGVzLGJ5dGVzLGJ5dGVzLGJ5dGVzKWJ5dGVbXQoJY2FsbHN1YiBjaGFsbGVuZ2UKCWludCAxCglyZXR1cm4KCmNoYWxsZW5nZToKCXByb3RvIDE0IDAKCgkvLyBjb250cmFjdHMvbWFoYmVyLmFsZ28udHM6MTI1CgkvLyBsZWZ0bGVmdCA9IGVjX3NjYWxhcl9tdWwoCgkvLyAgICAgICAiQk4yNTRnMSIsCgkvLyAgICAgICBoZXgoCgkvLyAgICAgICAgICIwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAxMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMiIKCS8vICAgICAgICksCgkvLyAgICAgICBub25jZQoJLy8gICAgICkKCWJ5dGUgMHgwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAxMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMgoJZnJhbWVfZGlnIC0yIC8vIG5vbmNlOiBieXRlcwoJZWNfc2NhbGFyX211bCBCTjI1NGcxCglmcmFtZV9idXJ5IC02IC8vIGxlZnRsZWZ0OiBieXRlcwoKCS8vIGNvbnRyYWN0cy9tYWhiZXIuYWxnby50czoxMzQKCS8vIGxlZnRyaWdodCA9IGVjX3NjYWxhcl9tdWwoIkJOMjU0ZzEiLCBwaywgY1ByZXYpCglmcmFtZV9kaWcgLTQgLy8gcGs6IGJ5dGVzCglmcmFtZV9kaWcgLTMgLy8gY1ByZXY6IGJ5dGVzCgllY19zY2FsYXJfbXVsIEJOMjU0ZzEKCWZyYW1lX2J1cnkgLTcgLy8gbGVmdHJpZ2h0OiBieXRlcwoKCS8vIGNvbnRyYWN0cy9tYWhiZXIuYWxnby50czoxMzcKCS8vIGxlZnQgPSBlY19hZGQoIkJOMjU0ZzEiLCBsZWZ0bGVmdCwgbGVmdHJpZ2h0KQoJZnJhbWVfZGlnIC02IC8vIGxlZnRsZWZ0OiBieXRlcwoJZnJhbWVfZGlnIC03IC8vIGxlZnRyaWdodDogYnl0ZXMKCWVjX2FkZCBCTjI1NGcxCglmcmFtZV9idXJ5IC04IC8vIGxlZnQ6IGJ5dGVzCgoJLy8gY29udHJhY3RzL21haGJlci5hbGdvLnRzOjE0OQoJLy8gZnBFbGVtZW50ID0KCS8vICAgICAgIGJ0b2JpZ2ludChzaGEyNTYocGspKSAlIGJ0b2JpZ2ludChoZXgoIjMwNjQ0ZTcyZTEzMWEwMjliODUwNDViNjgxODE1ODVkOTc4MTZhOTE2ODcxY2E4ZDNjMjA4YzE2ZDg3Y2ZkNDciKSkKCWZyYW1lX2RpZyAtNCAvLyBwazogYnl0ZXMKCXNoYTI1NgoJYnl0ZSAweDMwNjQ0ZTcyZTEzMWEwMjliODUwNDViNjgxODE1ODVkOTc4MTZhOTE2ODcxY2E4ZDNjMjA4YzE2ZDg3Y2ZkNDcKCWIlCglmcmFtZV9idXJ5IC05IC8vIGZwRWxlbWVudDogYmlnaW50CgoJLy8gY29udHJhY3RzL21haGJlci5hbGdvLnRzOjE1MgoJLy8gcmlnaHRsZWZ0cmlnaHQgPSBlY19tYXBfdG8oIkJOMjU0ZzEiLCBmcEVsZW1lbnQpCglmcmFtZV9kaWcgLTkgLy8gZnBFbGVtZW50OiBiaWdpbnQKCWVjX21hcF90byBCTjI1NGcxCglmcmFtZV9idXJ5IC0xMCAvLyByaWdodGxlZnRyaWdodDogYnl0ZXMKCgkvLyBFbmQgb2YgSGFzaFBvaW50VG9Qb2ludAoJLy8gY29udHJhY3RzL21haGJlci5hbGdvLnRzOjE1NgoJLy8gcmlnaHRsZWZ0ID0gZWNfc2NhbGFyX211bCgiQk4yNTRnMSIsIHJpZ2h0bGVmdHJpZ2h0LCBub25jZSkKCWZyYW1lX2RpZyAtMTAgLy8gcmlnaHRsZWZ0cmlnaHQ6IGJ5dGVzCglmcmFtZV9kaWcgLTIgLy8gbm9uY2U6IGJ5dGVzCgllY19zY2FsYXJfbXVsIEJOMjU0ZzEKCWZyYW1lX2J1cnkgLTExIC8vIHJpZ2h0bGVmdDogYnl0ZXMKCgkvLyBjb250cmFjdHMvbWFoYmVyLmFsZ28udHM6MTU5CgkvLyByaWdodHJpZ2h0ID0gZWNfc2NhbGFyX211bCgiQk4yNTRnMSIsIGtleUltYWdlLCBjUHJldikKCWZyYW1lX2RpZyAtNSAvLyBrZXlJbWFnZTogYnl0ZXMKCWZyYW1lX2RpZyAtMyAvLyBjUHJldjogYnl0ZXMKCWVjX3NjYWxhcl9tdWwgQk4yNTRnMQoJZnJhbWVfYnVyeSAtMTIgLy8gcmlnaHRyaWdodDogYnl0ZXMKCgkvLyBjb250cmFjdHMvbWFoYmVyLmFsZ28udHM6MTYyCgkvLyByaWdodCA9IGVjX2FkZCgiQk4yNTRnMSIsIHJpZ2h0bGVmdCwgcmlnaHRyaWdodCkKCWZyYW1lX2RpZyAtMTEgLy8gcmlnaHRsZWZ0OiBieXRlcwoJZnJhbWVfZGlnIC0xMiAvLyByaWdodHJpZ2h0OiBieXRlcwoJZWNfYWRkIEJOMjU0ZzEKCWZyYW1lX2J1cnkgLTEzIC8vIHJpZ2h0OiBieXRlcwoKCS8vIGNvbnRyYWN0cy9tYWhiZXIuYWxnby50czoxNjkKCS8vIGggPQoJLy8gICAgICAgYnRvYmlnaW50KHNoYTI1Nihjb25jYXQoY29uY2F0KG1zZywgbGVmdCksIHJpZ2h0KSkpICUKCS8vICAgICAgIGJ0b2JpZ2ludChoZXgoIjB4MzA2NDRlNzJlMTMxYTAyOWI4NTA0NWI2ODE4MTU4NWQyODMzZTg0ODc5Yjk3MDkxNDNlMWY1OTNmMDAwMDAwMSIpKQoJZnJhbWVfZGlnIC0xIC8vIG1zZzogYnl0ZXMKCWZyYW1lX2RpZyAtOCAvLyBsZWZ0OiBieXRlcwoJY29uY2F0CglmcmFtZV9kaWcgLTEzIC8vIHJpZ2h0OiBieXRlcwoJY29uY2F0CglzaGEyNTYKCWJ5dGUgMHgzMDY0NGU3MmUxMzFhMDI5Yjg1MDQ1YjY4MTgxNTg1ZDI4MzNlODQ4NzliOTcwOTE0M2UxZjU5M2YwMDAwMDAxCgliJQoJZnJhbWVfYnVyeSAtMTQgLy8gaDogYmlnaW50CgoJLy8gY29udHJhY3RzL21haGJlci5hbGdvLnRzOjE3NAoJLy8gcmV0dXJuIGggYXMgYnl0ZXM7CglmcmFtZV9kaWcgLTE0IC8vIGg6IGJpZ2ludAoJZHVwCglsZW4KCWl0b2IKCWV4dHJhY3QgNiAyCglzd2FwCgljb25jYXQKCWJ5dGUgMHgxNTFmN2M3NQoJc3dhcAoJY29uY2F0Cglsb2cKCXJldHN1YgoKYWJpX3JvdXRlX2NyZWF0ZUFwcGxpY2F0aW9uOgoJaW50IDEKCXJldHVybgoKY3JlYXRlX05vT3A6CgltZXRob2QgImNyZWF0ZUFwcGxpY2F0aW9uKCl2b2lkIgoJdHhuYSBBcHBsaWNhdGlvbkFyZ3MgMAoJbWF0Y2ggYWJpX3JvdXRlX2NyZWF0ZUFwcGxpY2F0aW9uCgllcnIKCmNhbGxfTm9PcDoKCW1ldGhvZCAiZHVtbXlPcFVwKHVpbnQ2NCl1aW50NjQiCgltZXRob2QgImNoYWxsZW5nZShieXRlW10sYnl0ZVtdLGJ5dGVbXSxieXRlW10sYnl0ZVtdKWJ5dGVbXSIKCXR4bmEgQXBwbGljYXRpb25BcmdzIDAKCW1hdGNoIGFiaV9yb3V0ZV9kdW1teU9wVXAgYWJpX3JvdXRlX2NoYWxsZW5nZQoJZXJy",
    "clear": "I3ByYWdtYSB2ZXJzaW9uIDEw"
  },
  "contract": {
    "name": "Mahber",
    "desc": "",
    "methods": [
      {
        "name": "dummyOpUp",
        "args": [
          {
            "name": "i",
            "type": "uint64",
            "desc": ""
          }
        ],
        "desc": "Dummy Op UpDummy operation to get more opcode budget@i- The number to return, necssary to deduplicate the name",
        "returns": {
          "type": "uint64",
          "desc": "the number (but we do nothing with it)"
        }
      },
      {
        "name": "challenge",
        "args": [
          {
            "name": "msg",
            "type": "byte[]",
            "desc": "The message to be signed"
          },
          {
            "name": "nonce",
            "type": "byte[]",
            "desc": "The nonce, part of the ring signature itself, aka one of the fake secret keys"
          },
          {
            "name": "cPrev",
            "type": "byte[]",
            "desc": "The previous challenge, or the base challenge if this is the first link (in which case it is part of the ring sig)"
          },
          {
            "name": "pk",
            "type": "byte[]",
            "desc": "The specific public key in the ring (indexed from the array of public keys)"
          },
          {
            "name": "keyImage",
            "type": "byte[]",
            "desc": "The key image of the signer, required for linkabiltiy to prevent double spending"
          }
        ],
        "desc": "challengeProduce the challenge, i.e. an individual iteration in the ring sig verification.We mod by order of fr https://github.com/Consensys/gnark-crypto/blob/master/ecc/bn254/fr/element.go#L42c_{i+1}= Hs(m || r_{i}* G + c_{i}* K_{i}|| r_{i}*Hp(K_{i}) + c_{i}* I) mod |fr|",
        "returns": {
          "type": "byte[]",
          "desc": ""
        }
      },
      {
        "name": "createApplication",
        "desc": "",
        "returns": {
          "type": "void",
          "desc": ""
        },
        "args": []
      }
    ]
  }
}