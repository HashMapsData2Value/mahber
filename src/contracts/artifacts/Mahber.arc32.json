{
  "hints": {
    "dummyOpUp(uint64)uint64": {
      "call_config": {
        "no_op": "CALL"
      }
    },
    "scalarMultBase(byte[])byte[]": {
      "call_config": {
        "no_op": "CALL"
      }
    },
    "scalarMult(byte[],byte[])byte[]": {
      "call_config": {
        "no_op": "CALL"
      }
    },
    "validPoint(byte[])bool": {
      "call_config": {
        "no_op": "CALL"
      }
    },
    "pointAdd(byte[],byte[])byte[]": {
      "call_config": {
        "no_op": "CALL"
      }
    },
    "hashPointToPoint(byte[])byte[]": {
      "call_config": {
        "no_op": "CALL"
      }
    },
    "createApplication()void": {
      "call_config": {
        "no_op": "CREATE"
      }
    }
  },
  "bare_call_config": {
    "no_op": "NEVER",
    "opt_in": "NEVER",
    "close_out": "NEVER",
    "update_application": "NEVER",
    "delete_application": "NEVER"
  },
  "schema": {
    "local": {
      "declared": {},
      "reserved": {}
    },
    "global": {
      "declared": {},
      "reserved": {}
    }
  },
  "state": {
    "global": {
      "num_byte_slices": 0,
      "num_uints": 0
    },
    "local": {
      "num_byte_slices": 0,
      "num_uints": 0
    }
  },
  "source": {
    "approval": "",
    "clear": "I3ByYWdtYSB2ZXJzaW9uIDEw"
  },
  "contract": {
    "name": "Mahber",
    "desc": "",
    "methods": [
      {
        "name": "dummyOpUp",
        "args": [
          {
            "name": "i",
            "type": "uint64",
            "desc": ""
          }
        ],
        "desc": "Dummy Op UpDummy operation to get more opcode budget@i- The number to return, necssary to deduplicate the name",
        "returns": {
          "type": "uint64",
          "desc": "the number (but we do nothing with it)"
        }
      },
      {
        "name": "scalarMultBase",
        "args": [
          {
            "name": "scalar",
            "type": "byte[]",
            "desc": ""
          }
        ],
        "desc": "Scalar Mult BaseScalar multiplication of the base point@scalar- The scalar to multiply the basepoint by.",
        "returns": {
          "type": "byte[]",
          "desc": "a point on the curve"
        }
      },
      {
        "name": "scalarMult",
        "args": [
          {
            "name": "scalar",
            "type": "byte[]",
            "desc": ""
          },
          {
            "name": "point",
            "type": "byte[]",
            "desc": ""
          }
        ],
        "desc": "Scalar MultScalar multiplication with a supplied point@scalar- The scalar to multiply the point with@point- The point that is multiplied with the scalar",
        "returns": {
          "type": "byte[]",
          "desc": "a point on the curve"
        }
      },
      {
        "name": "validPoint",
        "args": [
          {
            "name": "point",
            "type": "byte[]",
            "desc": ""
          }
        ],
        "desc": "validPointChecks if the point is valid (on curve)@point- The point to check",
        "returns": {
          "type": "bool",
          "desc": "true if the point is valid, false otherwise"
        }
      },
      {
        "name": "pointAdd",
        "args": [
          {
            "name": "pointA",
            "type": "byte[]",
            "desc": "The first point"
          },
          {
            "name": "pointB",
            "type": "byte[]",
            "desc": "The second point"
          }
        ],
        "desc": "Point addAdds two points on the curve",
        "returns": {
          "type": "byte[]",
          "desc": "The result of the operation"
        }
      },
      {
        "name": "hashPointToPoint",
        "args": [
          {
            "name": "point",
            "type": "byte[]",
            "desc": "The point to hash"
          }
        ],
        "desc": "hashPointToPointHashes a point to a point on the curveNOTE: ec_map_to maps fp_element to curve point. We use hash and then mod to map bytes to fp_element first.What is inside ec_map_to (accessed Dec 13th 2023):https://github.com/algorand/go-algorand/blob/master/data/transactions/logic/pairing.go#L862https://pkg.go.dev/github.com/consensys/gnark-crypto/ecc/bn254#MapToG1https://github.com/Consensys/gnark-crypto/blob/master/ecc/bn254/fp/element.go#L42",
        "returns": {
          "type": "byte[]",
          "desc": "The result of the operation"
        }
      },
      {
        "name": "createApplication",
        "desc": "",
        "returns": {
          "type": "void",
          "desc": ""
        },
        "args": []
      }
    ]
  }
}