#pragma version 10

// This TEAL was generated by TEALScript v0.63.0
// https://github.com/algorandfoundation/TEALScript

// This contract is compliant with and/or implements the following ARCs: [ ARC4 ]

// The following ten lines of TEAL handle initial program flow
// This pattern is used to make it easy for anyone to parse the start of the program and determine if a specific action is allowed
// Here, action refers to the OnComplete in combination with whether the app is being created or called
// Every possible action for this contract is represented in the switch statement
// If the action is not implmented in the contract, its repsective branch will be "NOT_IMPLMENTED" which just contains "err"
txn ApplicationID
int 0
>
int 6
*
txn OnCompletion
+
switch create_NoOp NOT_IMPLEMENTED NOT_IMPLEMENTED NOT_IMPLEMENTED NOT_IMPLEMENTED NOT_IMPLEMENTED call_NoOp

NOT_IMPLEMENTED:
	err

// dummyOpUp(uint64)uint64
//
// Dummy Op Up
abi_route_dummyOpUp:
	// i: uint64
	txna ApplicationArgs 1
	btoi

	// execute dummyOpUp(uint64)uint64
	callsub dummyOpUp
	int 1
	return

dummyOpUp:
	proto 1 0

	// contracts/mahber.algo.ts:10
	// return i;
	frame_dig -1 // i: uint64
	itob
	byte 0x151f7c75
	swap
	concat
	log
	retsub

// scalarMultBase()byte[]
//
// Scalar Mult Base
// Scalar multiplication of the base point
// @returns The result of the operation
abi_route_scalarMultBase:
	byte 0x // push empty bytes to fill the stack frame for this subroutine's local variables

	// execute scalarMultBase()byte[]
	callsub scalarMultBase
	int 1
	return

scalarMultBase:
	proto 1 0

	// contracts/mahber.algo.ts:19
	// result = ec_scalar_mul(
	//       "BN254g1",
	//       hex(
	//         "00000000000000000000000000000000000000000000000000000000000000010000000000000000000000000000000000000000000000000000000000000002"
	//       ),
	//       hex("01")
	//     )
	byte 0x00000000000000000000000000000000000000000000000000000000000000010000000000000000000000000000000000000000000000000000000000000002
	byte 0x01
	ec_scalar_mul BN254g1
	frame_bury -1 // result: bytes

	// contracts/mahber.algo.ts:26
	// return result;
	frame_dig -1 // result: bytes
	dup
	len
	itob
	extract 6 2
	swap
	concat
	byte 0x151f7c75
	swap
	concat
	log
	retsub

// pointSubgroup()bool
//
// Point Check
//
// @returns The result of the operation
abi_route_pointSubgroup:
	byte 0x // push empty bytes to fill the stack frame for this subroutine's local variables

	// execute pointSubgroup()bool
	callsub pointSubgroup
	int 1
	return

pointSubgroup:
	proto 1 0

	// contracts/mahber.algo.ts:35
	// check1 = ec_subgroup_check(
	//       "BN254g1",
	//       hex(
	//         "00000000000000000000000000000000000000000000000000000000000000010000000000000000000000000000000000000000000000000000000000000002"
	//       )
	//     )
	byte 0x00000000000000000000000000000000000000000000000000000000000000010000000000000000000000000000000000000000000000000000000000000002
	ec_subgroup_check BN254g1
	frame_bury -1 // check1: bool

	// contracts/mahber.algo.ts:52
	// return check1;
	frame_dig -1 // check1: bool
	byte 0x00
	int 0
	uncover 2
	setbit
	byte 0x151f7c75
	swap
	concat
	log
	retsub

// pointAdd()byte[]
//
// Point add
//
// @returns The result of the operation
abi_route_pointAdd:
	byte 0x // push empty bytes to fill the stack frame for this subroutine's local variables

	// execute pointAdd()byte[]
	callsub pointAdd
	int 1
	return

pointAdd:
	proto 1 0

	// contracts/mahber.algo.ts:71
	// result = ec_add(
	//       "BLS12_381g1",
	//       hex(
	//         "17f1d3a73197d7942695638c4fa9ac0fc3688c4f9774b905a14e3a3f171bac586c55e83ff97a1aeffb3af00adb22c6bb08b3f481e3aaa0f1a09e30ed741d8ae4fcf5e095d5d00af600db18cb2c04b3edd03cc744a2888ae40caa232946c5e7e1"
	//       ),
	//       hex(
	//         "17f1d3a73197d7942695638c4fa9ac0fc3688c4f9774b905a14e3a3f171bac586c55e83ff97a1aeffb3af00adb22c6bb08b3f481e3aaa0f1a09e30ed741d8ae4fcf5e095d5d00af600db18cb2c04b3edd03cc744a2888ae40caa232946c5e7e1"
	//       )
	//     )
	byte 0x17f1d3a73197d7942695638c4fa9ac0fc3688c4f9774b905a14e3a3f171bac586c55e83ff97a1aeffb3af00adb22c6bb08b3f481e3aaa0f1a09e30ed741d8ae4fcf5e095d5d00af600db18cb2c04b3edd03cc744a2888ae40caa232946c5e7e1
	byte 0x17f1d3a73197d7942695638c4fa9ac0fc3688c4f9774b905a14e3a3f171bac586c55e83ff97a1aeffb3af00adb22c6bb08b3f481e3aaa0f1a09e30ed741d8ae4fcf5e095d5d00af600db18cb2c04b3edd03cc744a2888ae40caa232946c5e7e1
	ec_add BLS12_381g1
	frame_bury -1 // result: bytes

	// contracts/mahber.algo.ts:80
	// return result;
	frame_dig -1 // result: bytes
	dup
	len
	itob
	extract 6 2
	swap
	concat
	byte 0x151f7c75
	swap
	concat
	log
	retsub

abi_route_createApplication:
	int 1
	return

create_NoOp:
	method "createApplication()void"
	txna ApplicationArgs 0
	match abi_route_createApplication
	err

call_NoOp:
	method "dummyOpUp(uint64)uint64"
	method "scalarMultBase()byte[]"
	method "pointSubgroup()bool"
	method "pointAdd()byte[]"
	txna ApplicationArgs 0
	match abi_route_dummyOpUp abi_route_scalarMultBase abi_route_pointSubgroup abi_route_pointAdd
	err