#pragma version 10

// This TEAL was generated by TEALScript v0.63.0
// https://github.com/algorandfoundation/TEALScript

// This contract is compliant with and/or implements the following ARCs: [ ARC4 ]

// The following ten lines of TEAL handle initial program flow
// This pattern is used to make it easy for anyone to parse the start of the program and determine if a specific action is allowed
// Here, action refers to the OnComplete in combination with whether the app is being created or called
// Every possible action for this contract is represented in the switch statement
// If the action is not implmented in the contract, its repsective branch will be "NOT_IMPLMENTED" which just contains "err"
txn ApplicationID
int 0
>
int 6
*
txn OnCompletion
+
switch create_NoOp NOT_IMPLEMENTED NOT_IMPLEMENTED NOT_IMPLEMENTED NOT_IMPLEMENTED NOT_IMPLEMENTED call_NoOp

NOT_IMPLEMENTED:
	err

// dummyOpUp(uint64)uint64
//
// Dummy Op Up
// Dummy operation to get more opcode budget
// @i - The number to return, necssary to deduplicate the name
// @returns the number (but we do nothing with it)
abi_route_dummyOpUp:
	// i: uint64
	txna ApplicationArgs 1
	btoi

	// execute dummyOpUp(uint64)uint64
	callsub dummyOpUp
	int 1
	return

dummyOpUp:
	proto 1 0

	// contracts/mahber.algo.ts:11
	// return i;
	frame_dig -1 // i: uint64
	itob
	byte 0x151f7c75
	swap
	concat
	log
	retsub

scalarMultBase:
	proto 2 1

	// contracts/mahber.algo.ts:21
	// result = ec_scalar_mul(
	//       "BN254g1",
	//       hex(
	//         "00000000000000000000000000000000000000000000000000000000000000010000000000000000000000000000000000000000000000000000000000000002"
	//       ),
	//       scalar
	//     )
	byte 0x00000000000000000000000000000000000000000000000000000000000000010000000000000000000000000000000000000000000000000000000000000002
	frame_dig -1 // scalar: bytes
	ec_scalar_mul BN254g1
	frame_bury -2 // result: bytes

	// contracts/mahber.algo.ts:28
	// return result;
	frame_dig -2 // result: bytes
	retsub

scalarMult:
	proto 3 1

	// contracts/mahber.algo.ts:39
	// result = ec_scalar_mul("BN254g1", point, scalar)
	frame_dig -2 // point: bytes
	frame_dig -1 // scalar: bytes
	ec_scalar_mul BN254g1
	frame_bury -3 // result: bytes

	// contracts/mahber.algo.ts:40
	// return result;
	frame_dig -3 // result: bytes
	retsub

validPoint:
	proto 1 1

	// contracts/mahber.algo.ts:50
	// return ec_subgroup_check("BN254g1", point);
	frame_dig -1 // point: bytes
	ec_subgroup_check BN254g1
	retsub

pointAdd:
	proto 3 1

	// contracts/mahber.algo.ts:61
	// result = ec_add("BN254g1", pointA, pointB)
	frame_dig -1 // pointA: bytes
	frame_dig -2 // pointB: bytes
	ec_add BN254g1
	frame_bury -3 // result: bytes

	// contracts/mahber.algo.ts:62
	// return result;
	frame_dig -3 // result: bytes
	retsub

hashPointToPoint:
	proto 4 1

	// contracts/mahber.algo.ts:77
	// hash = sha256(point)
	frame_dig -1 // point: bytes
	sha256
	frame_bury -2 // hash: byte[32]

	// contracts/mahber.algo.ts:78
	// fpElement =
	//       btobigint(hash) % btobigint(hex("30644e72e131a029b85045b68181585d97816a916871ca8d3c208c16d87cfd47"))
	frame_dig -2 // hash: byte[32]
	byte 0x30644e72e131a029b85045b68181585d97816a916871ca8d3c208c16d87cfd47
	b%
	frame_bury -3 // fpElement: bigint

	// contracts/mahber.algo.ts:81
	// result = ec_map_to("BN254g1", fpElement)
	frame_dig -3 // fpElement: bigint
	ec_map_to BN254g1
	frame_bury -4 // result: bytes

	// contracts/mahber.algo.ts:82
	// return result;
	frame_dig -4 // result: bytes
	retsub

// challenge(bytes,bytes,bytes,bytes,bytes)byte[]
//
// challenge2
// Produce the challenge, i.e. an individual link in the ring sig verification.
// We mod by order of fr https://github.com/Consensys/gnark-crypto/blob/master/ecc/bn254/fr/element.go#L42
// c_{i+1} = Hs(m || r_{i} * G + c_{i} * K_{i} || r_{i}*Hp(K_{i}) + c_{i} * I) mod |fr|
// @param msg - The message to be signed
// @param nonce - The nonce, part of the ring signature itself, aka one of the fake secret keys
// @param cPrev - The previous challenge, or the base challenge if this is the first link (in which case it is part of the ring sig)
// @param pk - The specific public key in the ring (indexed from the array of public keys)
// @param keyImage - The key image of the signer, required for linkabiltiy to prevent double spending
// @returns
abi_route_challenge:
	byte 0x; dupn 2 // push empty bytes to fill the stack frame for this subroutine's local variables

	// keyImage: byte[]
	txna ApplicationArgs 5
	extract 2 0

	// pk: byte[]
	txna ApplicationArgs 4
	extract 2 0

	// cPrev: byte[]
	txna ApplicationArgs 3
	extract 2 0

	// nonce: byte[]
	txna ApplicationArgs 2
	extract 2 0

	// msg: byte[]
	txna ApplicationArgs 1
	extract 2 0

	// execute challenge(bytes,bytes,bytes,bytes,bytes)byte[]
	callsub challenge
	int 1
	return

challenge:
	proto 8 0

	// contracts/mahber.algo.ts:101
	// left = this.pointAdd(this.scalarMultBase(nonce), this.scalarMult(cPrev, pk))
	byte 0x // push empty bytes to fill the stack frame for this subroutine's local variables
	byte 0x // push empty bytes to fill the stack frame for this subroutine's local variables
	frame_dig -4 // pk: bytes
	frame_dig -3 // cPrev: bytes
	callsub scalarMult
	byte 0x // push empty bytes to fill the stack frame for this subroutine's local variables
	frame_dig -2 // nonce: bytes
	callsub scalarMultBase
	callsub pointAdd
	frame_bury -6 // left: byte[]

	// contracts/mahber.algo.ts:107
	// right = this.pointAdd(this.scalarMult(nonce, this.hashPointToPoint(pk)), this.scalarMult(cPrev, keyImage))
	byte 0x // push empty bytes to fill the stack frame for this subroutine's local variables
	byte 0x // push empty bytes to fill the stack frame for this subroutine's local variables
	frame_dig -5 // keyImage: bytes
	frame_dig -3 // cPrev: bytes
	callsub scalarMult
	byte 0x // push empty bytes to fill the stack frame for this subroutine's local variables
	byte 0x; dupn 2 // push empty bytes to fill the stack frame for this subroutine's local variables
	frame_dig -4 // pk: bytes
	callsub hashPointToPoint
	frame_dig -2 // nonce: bytes
	callsub scalarMult
	callsub pointAdd
	frame_bury -7 // right: byte[]

	// contracts/mahber.algo.ts:113
	// h =
	//       btobigint(sha256(concat(concat(msg, left), right))) %
	//       btobigint(hex("0x30644e72e131a029b85045b68181585d2833e84879b9709143e1f593f0000001"))
	frame_dig -1 // msg: bytes
	frame_dig -6 // left: byte[]
	concat
	frame_dig -7 // right: byte[]
	concat
	sha256
	byte 0x30644e72e131a029b85045b68181585d2833e84879b9709143e1f593f0000001
	b%
	frame_bury -8 // h: bigint

	// contracts/mahber.algo.ts:117
	// return h as bytes;
	frame_dig -8 // h: bigint
	dup
	len
	itob
	extract 6 2
	swap
	concat
	byte 0x151f7c75
	swap
	concat
	log
	retsub

abi_route_createApplication:
	int 1
	return

create_NoOp:
	method "createApplication()void"
	txna ApplicationArgs 0
	match abi_route_createApplication
	err

call_NoOp:
	method "dummyOpUp(uint64)uint64"
	method "challenge(byte[],byte[],byte[],byte[],byte[])byte[]"
	txna ApplicationArgs 0
	match abi_route_dummyOpUp abi_route_challenge
	err