#pragma version 10

// This TEAL was generated by TEALScript v0.63.0
// https://github.com/algorandfoundation/TEALScript

// This contract is compliant with and/or implements the following ARCs: [ ARC4 ]

// The following ten lines of TEAL handle initial program flow
// This pattern is used to make it easy for anyone to parse the start of the program and determine if a specific action is allowed
// Here, action refers to the OnComplete in combination with whether the app is being created or called
// Every possible action for this contract is represented in the switch statement
// If the action is not implmented in the contract, its repsective branch will be "NOT_IMPLMENTED" which just contains "err"
txn ApplicationID
int 0
>
int 6
*
txn OnCompletion
+
switch create_NoOp NOT_IMPLEMENTED NOT_IMPLEMENTED NOT_IMPLEMENTED NOT_IMPLEMENTED NOT_IMPLEMENTED call_NoOp

NOT_IMPLEMENTED:
	err

// dummyOpUp(uint64)uint64
//
// Dummy Op Up
// Dummy operation to get more opcode budget
// @i - The number to return, necssary to deduplicate the name
// @returns the number (but we do nothing with it)
abi_route_dummyOpUp:
	// i: uint64
	txna ApplicationArgs 1
	btoi

	// execute dummyOpUp(uint64)uint64
	callsub dummyOpUp
	int 1
	return

dummyOpUp:
	proto 1 0

	// contracts/mahber.algo.ts:11
	// return i;
	frame_dig -1 // i: uint64
	itob
	byte 0x151f7c75
	swap
	concat
	log
	retsub

// scalarMultBase(bytes)byte[]
//
// Scalar Mult Base
// Scalar multiplication of the base point
// @scalar - The scalar to multiply the basepoint by.
// @returns a point on the curve
abi_route_scalarMultBase:
	byte 0x // push empty bytes to fill the stack frame for this subroutine's local variables

	// scalar: byte[]
	txna ApplicationArgs 1
	extract 2 0

	// execute scalarMultBase(bytes)byte[]
	callsub scalarMultBase
	int 1
	return

scalarMultBase:
	proto 2 0

	// contracts/mahber.algo.ts:21
	// result = ec_scalar_mul(
	//       "BN254g1",
	//       hex(
	//         "00000000000000000000000000000000000000000000000000000000000000010000000000000000000000000000000000000000000000000000000000000002"
	//       ),
	//       scalar
	//     )
	byte 0x00000000000000000000000000000000000000000000000000000000000000010000000000000000000000000000000000000000000000000000000000000002
	frame_dig -1 // scalar: bytes
	ec_scalar_mul BN254g1
	frame_bury -2 // result: bytes

	// contracts/mahber.algo.ts:28
	// return result;
	frame_dig -2 // result: bytes
	dup
	len
	itob
	extract 6 2
	swap
	concat
	byte 0x151f7c75
	swap
	concat
	log
	retsub

// scalarMult(bytes,bytes)byte[]
//
// Scalar Mult
// Scalar multiplication with a supplied point
// @scalar - The scalar to multiply the point with
// @point - The point that is multiplied with the scalar
// @returns a point on the curve
abi_route_scalarMult:
	byte 0x // push empty bytes to fill the stack frame for this subroutine's local variables

	// point: byte[]
	txna ApplicationArgs 2
	extract 2 0

	// scalar: byte[]
	txna ApplicationArgs 1
	extract 2 0

	// execute scalarMult(bytes,bytes)byte[]
	callsub scalarMult
	int 1
	return

scalarMult:
	proto 3 0

	// contracts/mahber.algo.ts:39
	// result = ec_scalar_mul("BN254g1", point, scalar)
	frame_dig -2 // point: bytes
	frame_dig -1 // scalar: bytes
	ec_scalar_mul BN254g1
	frame_bury -3 // result: bytes

	// contracts/mahber.algo.ts:40
	// return result;
	frame_dig -3 // result: bytes
	dup
	len
	itob
	extract 6 2
	swap
	concat
	byte 0x151f7c75
	swap
	concat
	log
	retsub

// validPoint(bytes)bool
//
// validPoint
// Checks if the point is valid (on curve)
// @point - The point to check
// @returns true if the point is valid, false otherwise
abi_route_validPoint:
	// point: byte[]
	txna ApplicationArgs 1
	extract 2 0

	// execute validPoint(bytes)bool
	callsub validPoint
	int 1
	return

validPoint:
	proto 1 0

	// contracts/mahber.algo.ts:50
	// return ec_subgroup_check("BN254g1", point);
	frame_dig -1 // point: bytes
	ec_subgroup_check BN254g1
	byte 0x00
	int 0
	uncover 2
	setbit
	byte 0x151f7c75
	swap
	concat
	log
	retsub

// pointAdd(bytes,bytes)byte[]
//
// Point add
// Adds two points on the curve
// @param pointA - The first point
// @param pointB - The second point
// @returns The result of the operation
abi_route_pointAdd:
	byte 0x // push empty bytes to fill the stack frame for this subroutine's local variables

	// pointB: byte[]
	txna ApplicationArgs 2
	extract 2 0

	// pointA: byte[]
	txna ApplicationArgs 1
	extract 2 0

	// execute pointAdd(bytes,bytes)byte[]
	callsub pointAdd
	int 1
	return

pointAdd:
	proto 3 0

	// contracts/mahber.algo.ts:61
	// result = ec_add("BN254g1", pointA, pointB)
	frame_dig -1 // pointA: bytes
	frame_dig -2 // pointB: bytes
	ec_add BN254g1
	frame_bury -3 // result: bytes

	// contracts/mahber.algo.ts:62
	// return result;
	frame_dig -3 // result: bytes
	dup
	len
	itob
	extract 6 2
	swap
	concat
	byte 0x151f7c75
	swap
	concat
	log
	retsub

abi_route_createApplication:
	int 1
	return

create_NoOp:
	method "createApplication()void"
	txna ApplicationArgs 0
	match abi_route_createApplication
	err

call_NoOp:
	method "dummyOpUp(uint64)uint64"
	method "scalarMultBase(byte[])byte[]"
	method "scalarMult(byte[],byte[])byte[]"
	method "validPoint(byte[])bool"
	method "pointAdd(byte[],byte[])byte[]"
	txna ApplicationArgs 0
	match abi_route_dummyOpUp abi_route_scalarMultBase abi_route_scalarMult abi_route_validPoint abi_route_pointAdd
	err