#pragma version 10
//#pragma mode logicsig

// This TEAL was generated by TEALScript v0.79.2
// https://github.com/algorandfoundation/TEALScript

// The address of this logic signature is RXYWVNCICXJ776PFHRBH5LACRLP4NCQVBK55AITZKTOI5LJUGTQ6YUJR3U

b route_logic

// hashPointToPoint(point: bytes): bytes
//
// hashPointToPoint
// Hashes a point to a point on the curve
// NOTE: ec_map_to maps fp_element to curve point. We use hash and then mod to map the point's X and Y bytes to fp_element first.
// What is inside ec_map_to (accessed Dec 13th 2023):
// https://github.com/algorand/go-algorand/blob/master/data/transactions/logic/pairing.go#L862
// https://pkg.go.dev/github.com/consensys/gnark-crypto/ecc/bn254#MapToG1
// https://github.com/Consensys/gnark-crypto/blob/master/ecc/bn254/fp/element.go#L42
// @param point - The point to hash
// @returns The result of the operation
hashPointToPoint:
	proto 1 1

	// Push empty bytes after the frame pointer to reserve space for local variables
	byte 0x
	dupn 2

	// contracts/challenge_lsig.algo.ts:15
	// hash = sha256(point)
	frame_dig -1 // point: bytes
	sha256
	frame_bury 0 // hash: byte[32]

	// contracts/challenge_lsig.algo.ts:16
	// fpElement =
	//       btobigint(hash) % btobigint(hex("30644e72e131a029b85045b68181585d97816a916871ca8d3c208c16d87cfd47"))
	frame_dig 0 // hash: byte[32]
	byte 0x30644e72e131a029b85045b68181585d97816a916871ca8d3c208c16d87cfd47
	b%
	frame_bury 1 // fpElement: bigint

	// contracts/challenge_lsig.algo.ts:18
	// result = ecMapTo("BN254g1", rawBytes(fpElement))
	frame_dig 1 // fpElement: bigint
	ec_map_to BN254g1
	frame_bury 2 // result: byte[]

	// contracts/challenge_lsig.algo.ts:19
	// return result;
	frame_dig 2 // result: byte[]

	// set the subroutine return value
	frame_bury 0

	// pop all local variables from the stack
	popn 2
	retsub

// scalarMult(scalar: bytes, point: bytes): bytes
//
// Scalar Mult
// Scalar multiplication with a supplied point
// @scalar - The scalar to multiply the point with
// @point - The point that is multiplied with the scalar
// @returns a point on the curve
scalarMult:
	proto 2 1

	// Push empty bytes after the frame pointer to reserve space for local variables
	byte 0x

	// contracts/challenge_lsig.algo.ts:29
	// result = ecScalarMul("BN254g1", point, scalar)
	frame_dig -2 // point: bytes
	frame_dig -1 // scalar: bytes
	ec_scalar_mul BN254g1
	frame_bury 0 // result: byte[]

	// contracts/challenge_lsig.algo.ts:30
	// return result;
	frame_dig 0 // result: byte[]

	// set the subroutine return value
	frame_bury 0
	retsub

// scalarMultBase(scalar: bytes): bytes
//
// Scalar Mult Base
// Scalar multiplication of the base point
// @scalar - The scalar to multiply the base point by.
// @returns a point on the curve
scalarMultBase:
	proto 1 1

	// Push empty bytes after the frame pointer to reserve space for local variables
	byte 0x

	// contracts/challenge_lsig.algo.ts:39
	// result = ecScalarMul(
	//       "BN254g1",
	//       hex(
	//         "00000000000000000000000000000000000000000000000000000000000000010000000000000000000000000000000000000000000000000000000000000002"
	//       ),
	//       scalar
	//     )
	byte 0x00000000000000000000000000000000000000000000000000000000000000010000000000000000000000000000000000000000000000000000000000000002
	frame_dig -1 // scalar: bytes
	ec_scalar_mul BN254g1
	frame_bury 0 // result: byte[]

	// contracts/challenge_lsig.algo.ts:46
	// return result;
	frame_dig 0 // result: byte[]

	// set the subroutine return value
	frame_bury 0
	retsub

// pointAdd(pointA: bytes, pointB: bytes): bytes
//
// Point add
// Adds two points on the curve
// @param pointA - The first point
// @param pointB - The second point
// @returns The result of the operation
pointAdd:
	proto 2 1

	// Push empty bytes after the frame pointer to reserve space for local variables
	byte 0x

	// contracts/challenge_lsig.algo.ts:56
	// result = ecAdd("BN254g1", pointA, pointB)
	frame_dig -1 // pointA: bytes
	frame_dig -2 // pointB: bytes
	ec_add BN254g1
	frame_bury 0 // result: byte[]

	// contracts/challenge_lsig.algo.ts:57
	// return result;
	frame_dig 0 // result: byte[]

	// set the subroutine return value
	frame_bury 0
	retsub

// logic(byte[],byte[],byte[],byte[],byte[])void
route_logic:
	// keyImage: byte[]
	int 4
	args
	extract 2 0

	// pk: byte[]
	int 3
	args
	extract 2 0

	// cPrev: byte[]
	int 2
	args
	extract 2 0

	// nonce: byte[]
	int 1
	args
	extract 2 0

	// msg: byte[]
	int 0
	args
	extract 2 0

	// execute logic(byte[],byte[],byte[],byte[],byte[])void
	callsub logic
	int 1
	return

// logic(msg: bytes, nonce: bytes, cPrev: bytes, pk: bytes, keyImage: bytes): void
logic:
	proto 5 0

	// Push empty bytes after the frame pointer to reserve space for local variables
	byte 0x
	dupn 2

	// contracts/challenge_lsig.algo.ts:65
	// left = this.pointAdd(this.scalarMultBase(nonce), this.scalarMult(cPrev, pk))
	frame_dig -4 // pk: bytes
	frame_dig -3 // cPrev: bytes
	callsub scalarMult
	frame_dig -2 // nonce: bytes
	callsub scalarMultBase
	callsub pointAdd
	frame_bury 0 // left: byte[]

	// contracts/challenge_lsig.algo.ts:71
	// right = this.pointAdd(this.scalarMult(nonce, this.hashPointToPoint(pk)), this.scalarMult(cPrev, keyImage))
	frame_dig -5 // keyImage: bytes
	frame_dig -3 // cPrev: bytes
	callsub scalarMult
	frame_dig -4 // pk: bytes
	callsub hashPointToPoint
	frame_dig -2 // nonce: bytes
	callsub scalarMult
	callsub pointAdd
	frame_bury 1 // right: byte[]

	// contracts/challenge_lsig.algo.ts:77
	// h =
	//       btobigint(sha256(concat(concat(msg, left), right))) %
	//       btobigint(hex("0x30644e72e131a029b85045b68181585d2833e84879b9709143e1f593f0000001"))
	frame_dig -1 // msg: bytes
	frame_dig 0 // left: byte[]
	concat
	frame_dig 1 // right: byte[]
	concat
	sha256
	byte 0x30644e72e131a029b85045b68181585d2833e84879b9709143e1f593f0000001
	b%
	frame_bury 2 // h: bigint

	// contracts/challenge_lsig.algo.ts:81
	// verifyAppCallTxn(this.txnGroup[this.txn.groupIndex + 1], {
	//       applicationArgs: {
	//         1: rawBytes(msg),
	//         2: rawBytes(nonce),
	//         3: rawBytes(cPrev),
	//         4: rawBytes(pk),
	//         5: rawBytes(keyImage),
	//         6: rawBytes(rawBytes(h)),
	//       },
	//     })
	txn GroupIndex
	int 1
	+
	store 248 // verifyTxn index

	// verify appl
	load 248 // verifyTxn index
	gtxns TypeEnum
	int appl
	==
	assert

	// verify applicationArgs
	// verify applicationArgs 1
	load 248 // verifyTxn index
	gtxns ApplicationArgs 1
	frame_dig -1 // msg: bytes
	dup
	len
	itob
	extract 6 2
	swap
	concat
	==
	assert

	// verify applicationArgs 2
	load 248 // verifyTxn index
	gtxns ApplicationArgs 2
	frame_dig -2 // nonce: bytes
	dup
	len
	itob
	extract 6 2
	swap
	concat
	==
	assert

	// verify applicationArgs 3
	load 248 // verifyTxn index
	gtxns ApplicationArgs 3
	frame_dig -3 // cPrev: bytes
	dup
	len
	itob
	extract 6 2
	swap
	concat
	==
	assert

	// verify applicationArgs 4
	load 248 // verifyTxn index
	gtxns ApplicationArgs 4
	frame_dig -4 // pk: bytes
	dup
	len
	itob
	extract 6 2
	swap
	concat
	==
	assert

	// verify applicationArgs 5
	load 248 // verifyTxn index
	gtxns ApplicationArgs 5
	frame_dig -5 // keyImage: bytes
	dup
	len
	itob
	extract 6 2
	swap
	concat
	==
	assert

	// verify applicationArgs 6
	load 248 // verifyTxn index
	gtxns ApplicationArgs 6
	frame_dig 2 // h: bigint
	dup
	len
	itob
	extract 6 2
	swap
	concat
	==
	assert
	retsub