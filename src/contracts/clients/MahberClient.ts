/* eslint-disable */
/**
 * This file was automatically generated by @algorandfoundation/algokit-client-generator.
 * DO NOT MODIFY IT BY HAND.
 * requires: @algorandfoundation/algokit-utils: ^2
 */
import * as algokit from '@algorandfoundation/algokit-utils'
import type {
  AppCallTransactionResult,
  AppCallTransactionResultOfType,
  CoreAppCallArgs,
  RawAppCallArgs,
  AppState,
  TealTemplateParams,
  ABIAppCallArg,
} from '@algorandfoundation/algokit-utils/types/app'
import type {
  AppClientCallCoreParams,
  AppClientCompilationParams,
  AppClientDeployCoreParams,
  AppDetails,
  ApplicationClient,
} from '@algorandfoundation/algokit-utils/types/app-client'
import type { AppSpec } from '@algorandfoundation/algokit-utils/types/app-spec'
import type { SendTransactionResult, TransactionToSign, SendTransactionFrom } from '@algorandfoundation/algokit-utils/types/transaction'
import type { TransactionWithSigner } from 'algosdk'
import { Algodv2, OnApplicationComplete, Transaction, AtomicTransactionComposer } from 'algosdk'
export const APP_SPEC: AppSpec = {
  "hints": {
    "createApplication()void": {
      "call_config": {
        "no_op": "CREATE"
      }
    },
    "dummyOpUp(uint64)uint64": {
      "call_config": {
        "no_op": "CALL"
      }
    },
    "publicScalarMultBase(byte[])byte[]": {
      "call_config": {
        "no_op": "CALL"
      }
    },
    "publicScalarMult(byte[],byte[])byte[]": {
      "call_config": {
        "no_op": "CALL"
      }
    },
    "publicValidPoint(byte[])bool": {
      "call_config": {
        "no_op": "CALL"
      }
    },
    "publicPointAdd(byte[],byte[])byte[]": {
      "call_config": {
        "no_op": "CALL"
      }
    },
    "publicHashPointToPoint(byte[])byte[]": {
      "call_config": {
        "no_op": "CALL"
      }
    },
    "publicChallenge(byte[],byte[],byte[],byte[],byte[])byte[]": {
      "call_config": {
        "no_op": "CALL"
      }
    },
    "publicChallengeLsig(byte[],byte[],byte[],byte[],byte[],pay)byte[]": {
      "call_config": {
        "no_op": "CALL"
      }
    },
    "deposit(pay,byte[])uint64[]": {
      "call_config": {
        "no_op": "CALL"
      }
    },
    "initWithdrawalSession(pay,byte[],byte[])byte[32]": {
      "call_config": {
        "no_op": "CALL"
      }
    },
    "createUploadPrecomputedChallengesBox(pay,byte[],uint64,uint64)byte[32]": {
      "call_config": {
        "no_op": "CALL"
      }
    },
    "uploadPrecomputedChallenges(byte[],uint64,byte[])byte[32]": {
      "call_config": {
        "no_op": "CALL"
      }
    },
    "createIntermediateChallengesBox(pay,byte[],uint64,uint64)byte[32]": {
      "call_config": {
        "no_op": "CALL"
      }
    },
    "computeIndividualChallenge(byte[],byte[],uint64,byte[],uint64,uint64)(byte[32],uint64)": {
      "call_config": {
        "no_op": "CALL"
      }
    }
  },
  "bare_call_config": {
    "no_op": "NEVER",
    "opt_in": "NEVER",
    "close_out": "NEVER",
    "update_application": "NEVER",
    "delete_application": "NEVER"
  },
  "schema": {
    "local": {
      "declared": {},
      "reserved": {}
    },
    "global": {
      "declared": {
        "denomination": {
          "type": "uint64",
          "key": "denomination"
        },
        "asaId": {
          "type": "uint64",
          "key": "asaId"
        },
        "pkIndex": {
          "type": "uint64",
          "key": "pkIndex"
        }
      },
      "reserved": {}
    }
  },
  "state": {
    "global": {
      "num_byte_slices": 0,
      "num_uints": 3
    },
    "local": {
      "num_byte_slices": 0,
      "num_uints": 0
    }
  },
  "source": {
    "approval": "",
    "clear": "I3ByYWdtYSB2ZXJzaW9uIDEw"
  },
  "contract": {
    "name": "Mahber",
    "desc": "",
    "methods": [
      {
        "name": "createApplication",
        "args": [],
        "returns": {
          "type": "void"
        }
      },
      {
        "name": "dummyOpUp",
        "desc": "Dummy Op UpDummy operation to get more opcode budget@i- The number to return, necssary to deduplicate the name",
        "args": [
          {
            "name": "i",
            "type": "uint64"
          }
        ],
        "returns": {
          "type": "uint64",
          "desc": "the number (but we do nothing with it)"
        }
      },
      {
        "name": "publicScalarMultBase",
        "desc": "publicScalarMultBasePublic wrapper around the scalarMultBase method, allowing it to be tested directly.@scalar- The scalar to multiply the basepoint by.",
        "args": [
          {
            "name": "scalar",
            "type": "byte[]"
          }
        ],
        "returns": {
          "type": "byte[]",
          "desc": "the content of the scalarMultBase call"
        }
      },
      {
        "name": "publicScalarMult",
        "desc": "publicScalarMultPublic wrapper around the scalarMult method, allowing it to be tested directly.@scalar- The scalar to multiply the point with@point- The point that is multiplied with the scalar",
        "args": [
          {
            "name": "scalar",
            "type": "byte[]"
          },
          {
            "name": "point",
            "type": "byte[]"
          }
        ],
        "returns": {
          "type": "byte[]",
          "desc": "the content of the scalarMult call"
        }
      },
      {
        "name": "publicValidPoint",
        "desc": "publicValidPointPublic wrapper around the validPoint method, allowing it to be tested directly.@point- The point to check",
        "args": [
          {
            "name": "point",
            "type": "byte[]"
          }
        ],
        "returns": {
          "type": "bool",
          "desc": "the content of the validPoint call"
        }
      },
      {
        "name": "publicPointAdd",
        "desc": "publicPointAddPublic wrapper around the pointAdd method, allowing it to be tested directly.",
        "args": [
          {
            "name": "pointA",
            "type": "byte[]",
            "desc": "The first point"
          },
          {
            "name": "pointB",
            "type": "byte[]",
            "desc": "The second point"
          }
        ],
        "returns": {
          "type": "byte[]",
          "desc": "the content of the pointAdd call"
        }
      },
      {
        "name": "publicHashPointToPoint",
        "desc": "publicHashPointToPointPublic wrapper around the hashPointToPoint method, allowing it to be tested directly.",
        "args": [
          {
            "name": "point",
            "type": "byte[]",
            "desc": "The point to hash"
          }
        ],
        "returns": {
          "type": "byte[]",
          "desc": "the content of the hashPointToPoint call"
        }
      },
      {
        "name": "publicChallenge",
        "desc": "publicChallengePublic wrapper around the challenge method, allowing it to be tested directly.",
        "args": [
          {
            "name": "msg",
            "type": "byte[]",
            "desc": "The message to be signed"
          },
          {
            "name": "nonce",
            "type": "byte[]",
            "desc": "The nonce, part of the ring signature itself, aka one of the fake secret keys"
          },
          {
            "name": "cPrev",
            "type": "byte[]",
            "desc": "The previous challenge, or the base challenge if this is the first link (in which case it is part of the ring sig)"
          },
          {
            "name": "pk",
            "type": "byte[]",
            "desc": "The specific public key in the ring (indexed from the array of public keys)"
          },
          {
            "name": "keyImage",
            "type": "byte[]",
            "desc": "The key image of the signer, required for linkabiltiy to prevent double spending"
          }
        ],
        "returns": {
          "type": "byte[]",
          "desc": "- the content of the privateChallenge call"
        }
      },
      {
        "name": "publicChallengeLsig",
        "desc": "publicChallengePublic wrapper around the challenge method, allowing it to be tested directly.",
        "args": [
          {
            "name": "msg",
            "type": "byte[]",
            "desc": "The message to be signed"
          },
          {
            "name": "nonce",
            "type": "byte[]",
            "desc": "The nonce, part of the ring signature itself, aka one of the fake secret keys"
          },
          {
            "name": "cPrev",
            "type": "byte[]",
            "desc": "The previous challenge, or the base challenge if this is the first link (in which case it is part of the ring sig)"
          },
          {
            "name": "pk",
            "type": "byte[]",
            "desc": "The specific public key in the ring (indexed from the array of public keys)"
          },
          {
            "name": "keyImage",
            "type": "byte[]",
            "desc": "The key image of the signer, required for linkabiltiy to prevent double spending"
          },
          {
            "name": "lsigTxn",
            "type": "pay"
          }
        ],
        "returns": {
          "type": "byte[]",
          "desc": "- the content of the privateChallenge call"
        }
      },
      {
        "name": "deposit",
        "desc": "depositDeposit funds + public key into the contract",
        "args": [
          {
            "name": "depositTxn",
            "type": "pay"
          },
          {
            "name": "pk",
            "type": "byte[]",
            "desc": "The public key to depositTODO: Add custom EdDSA to check that the depositor knows the secret key. Useful to prevent rogue key attack, adding the negative of another pk."
          }
        ],
        "returns": {
          "type": "uint64[]",
          "desc": "- the number id of the public key, if successful. fails if unsuccessful."
        }
      },
      {
        "name": "initWithdrawalSession",
        "desc": "initWithdrawalCreates a box representing a \"withdrawal session\".Of key importance is the signed message string, which must contain the following:Ring Size - Chosen number of PKs, i.e. size of anonymity setKey Image - The keyimage, the one thing that is unique for a withdrawalApp Id - The id of the smart contract appNominal amount - The denomination of the contract, what was deposited originallyASA ID - Clarifies the ASA ID. (Plain Algo has ID 0, \"the default\" asset of Algorand)Withdrawal Address - Address of the final recipient of the fundsRelayer Address - Address of the relayer, facilitating the withdrawal (could be same as withdrawal address)Relayer Fee - The fee the relayer charges for facilitating the withdrawal (could be 0)The hash of the message becomes the id of the withdrawal session's box.",
        "args": [
          {
            "name": "mbbrDepositTxn",
            "type": "pay",
            "desc": "The transaction that deposited the MBBR"
          },
          {
            "name": "msg",
            "type": "byte[]",
            "desc": "Signed message"
          },
          {
            "name": "initialChallenge",
            "type": "byte[]",
            "desc": "The initial challenge, which needs to be re-created to verify the ring signature"
          }
        ],
        "returns": {
          "type": "byte[32]",
          "desc": "- the id of the withdrawal session box"
        }
      },
      {
        "name": "createUploadPrecomputedChallengesBox",
        "desc": "TODO: destroyWithdrawalSession, IF SESSION LOCKED",
        "args": [
          {
            "name": "mbbrDepositTxn",
            "type": "pay"
          },
          {
            "name": "msg",
            "type": "byte[]"
          },
          {
            "name": "boxIndex",
            "type": "uint64"
          },
          {
            "name": "boxSize",
            "type": "uint64"
          }
        ],
        "returns": {
          "type": "byte[32]"
        }
      },
      {
        "name": "uploadPrecomputedChallenges",
        "desc": "uploadPrecomputedChallengesCreates a box and uploads the precomputed challenges into it.",
        "args": [
          {
            "name": "msg",
            "type": "byte[]",
            "desc": "Msg, functioning as the id for the withdrawal session"
          },
          {
            "name": "boxIndex",
            "type": "uint64"
          },
          {
            "name": "precomputedChallenges",
            "type": "byte[]"
          }
        ],
        "returns": {
          "type": "byte[32]"
        }
      },
      {
        "name": "createIntermediateChallengesBox",
        "desc": "createIntermediateChallengesBoxCreates a box that will be used to contain intermediateChallengesBox.Should eventually be a mirror image of the corresponding uploadPrecomputedChallengesBox.",
        "args": [
          {
            "name": "mbbrDepositTxn",
            "type": "pay"
          },
          {
            "name": "msg",
            "type": "byte[]",
            "desc": "Msg, functioning as the id for the withdrawal session"
          },
          {
            "name": "boxIndex",
            "type": "uint64",
            "desc": "The index of the precomputed challenge box, incrementing with each chunk of date."
          },
          {
            "name": "boxSize",
            "type": "uint64",
            "desc": "The size of the precomputed challenge box"
          }
        ],
        "returns": {
          "type": "byte[32]",
          "desc": "- the id of the precomputed challenge box"
        }
      },
      {
        "name": "computeIndividualChallenge",
        "desc": "computeIndividualChallengeComputes an individual challenge.Note that the previous challenge is loaded specifically from the precomputed challenges box.While the calculated challenge is loaded into the intermediate challenges box.At the end we will compare if the two boxes are the same, and of course that the last challenge is the same as the initial challenge.By loading specifically from the precomputed challenges box we can verify in parallell.The odds of being able to arrive at the same initial challenge in the last challenge is astronomically low UNLESS it is a valid ring signature.Public keys are of course loaded from the contract storage.",
        "args": [
          {
            "name": "msg",
            "type": "byte[]",
            "desc": "The message to be signed"
          },
          {
            "name": "nonce",
            "type": "byte[]",
            "desc": "The nonce, part of the ring signature itself, aka one of the fake secret keys"
          },
          {
            "name": "pkIndex",
            "type": "uint64",
            "desc": "The index number of the public key in the smart contract storage"
          },
          {
            "name": "keyImage",
            "type": "byte[]",
            "desc": "The key image of the signer, required for linkabiltiy to prevent double spending"
          },
          {
            "name": "cPrevBoxIndex",
            "type": "uint64"
          },
          {
            "name": "cPrevOffset",
            "type": "uint64"
          }
        ],
        "returns": {
          "type": "(byte[32],uint64)"
        }
      }
    ]
  }
}

/**
 * Defines an onCompletionAction of 'no_op'
 */
export type OnCompleteNoOp =  { onCompleteAction?: 'no_op' | OnApplicationComplete.NoOpOC }
/**
 * Defines an onCompletionAction of 'opt_in'
 */
export type OnCompleteOptIn =  { onCompleteAction: 'opt_in' | OnApplicationComplete.OptInOC }
/**
 * Defines an onCompletionAction of 'close_out'
 */
export type OnCompleteCloseOut =  { onCompleteAction: 'close_out' | OnApplicationComplete.CloseOutOC }
/**
 * Defines an onCompletionAction of 'delete_application'
 */
export type OnCompleteDelApp =  { onCompleteAction: 'delete_application' | OnApplicationComplete.DeleteApplicationOC }
/**
 * Defines an onCompletionAction of 'update_application'
 */
export type OnCompleteUpdApp =  { onCompleteAction: 'update_application' | OnApplicationComplete.UpdateApplicationOC }
/**
 * A state record containing a single unsigned integer
 */
export type IntegerState = {
  /**
   * Gets the state value as a BigInt 
   */
  asBigInt(): bigint
  /**
   * Gets the state value as a number.
   */
  asNumber(): number
}
/**
 * A state record containing binary data
 */
export type BinaryState = {
  /**
   * Gets the state value as a Uint8Array
   */
  asByteArray(): Uint8Array
  /**
   * Gets the state value as a string
   */
  asString(): string
}

/**
 * Defines the types of available calls and state of the Mahber smart contract.
 */
export type Mahber = {
  /**
   * Maps method signatures / names to their argument and return types.
   */
  methods:
    & Record<'createApplication()void' | 'createApplication', {
      argsObj: {
      }
      argsTuple: []
      returns: void
    }>
    & Record<'dummyOpUp(uint64)uint64' | 'dummyOpUp', {
      argsObj: {
        i: bigint | number
      }
      argsTuple: [i: bigint | number]
      /**
       * the number (but we do nothing with it)
       */
      returns: bigint
    }>
    & Record<'publicScalarMultBase(byte[])byte[]' | 'publicScalarMultBase', {
      argsObj: {
        scalar: Uint8Array
      }
      argsTuple: [scalar: Uint8Array]
      /**
       * the content of the scalarMultBase call
       */
      returns: Uint8Array
    }>
    & Record<'publicScalarMult(byte[],byte[])byte[]' | 'publicScalarMult', {
      argsObj: {
        scalar: Uint8Array
        point: Uint8Array
      }
      argsTuple: [scalar: Uint8Array, point: Uint8Array]
      /**
       * the content of the scalarMult call
       */
      returns: Uint8Array
    }>
    & Record<'publicValidPoint(byte[])bool' | 'publicValidPoint', {
      argsObj: {
        point: Uint8Array
      }
      argsTuple: [point: Uint8Array]
      /**
       * the content of the validPoint call
       */
      returns: boolean
    }>
    & Record<'publicPointAdd(byte[],byte[])byte[]' | 'publicPointAdd', {
      argsObj: {
        /**
         * The first point
         */
        pointA: Uint8Array
        /**
         * The second point
         */
        pointB: Uint8Array
      }
      argsTuple: [pointA: Uint8Array, pointB: Uint8Array]
      /**
       * the content of the pointAdd call
       */
      returns: Uint8Array
    }>
    & Record<'publicHashPointToPoint(byte[])byte[]' | 'publicHashPointToPoint', {
      argsObj: {
        /**
         * The point to hash
         */
        point: Uint8Array
      }
      argsTuple: [point: Uint8Array]
      /**
       * the content of the hashPointToPoint call
       */
      returns: Uint8Array
    }>
    & Record<'publicChallenge(byte[],byte[],byte[],byte[],byte[])byte[]' | 'publicChallenge', {
      argsObj: {
        /**
         * The message to be signed
         */
        msg: Uint8Array
        /**
         * The nonce, part of the ring signature itself, aka one of the fake secret keys
         */
        nonce: Uint8Array
        /**
         * The previous challenge, or the base challenge if this is the first link (in which case it is part of the ring sig)
         */
        cPrev: Uint8Array
        /**
         * The specific public key in the ring (indexed from the array of public keys)
         */
        pk: Uint8Array
        /**
         * The key image of the signer, required for linkabiltiy to prevent double spending
         */
        keyImage: Uint8Array
      }
      argsTuple: [msg: Uint8Array, nonce: Uint8Array, cPrev: Uint8Array, pk: Uint8Array, keyImage: Uint8Array]
      /**
       * - the content of the privateChallenge call
       */
      returns: Uint8Array
    }>
    & Record<'publicChallengeLsig(byte[],byte[],byte[],byte[],byte[],pay)byte[]' | 'publicChallengeLsig', {
      argsObj: {
        /**
         * The message to be signed
         */
        msg: Uint8Array
        /**
         * The nonce, part of the ring signature itself, aka one of the fake secret keys
         */
        nonce: Uint8Array
        /**
         * The previous challenge, or the base challenge if this is the first link (in which case it is part of the ring sig)
         */
        cPrev: Uint8Array
        /**
         * The specific public key in the ring (indexed from the array of public keys)
         */
        pk: Uint8Array
        /**
         * The key image of the signer, required for linkabiltiy to prevent double spending
         */
        keyImage: Uint8Array
        lsigTxn: TransactionToSign | Transaction | Promise<SendTransactionResult>
      }
      argsTuple: [msg: Uint8Array, nonce: Uint8Array, cPrev: Uint8Array, pk: Uint8Array, keyImage: Uint8Array, lsigTxn: TransactionToSign | Transaction | Promise<SendTransactionResult>]
      /**
       * - the content of the privateChallenge call
       */
      returns: Uint8Array
    }>
    & Record<'deposit(pay,byte[])uint64[]' | 'deposit', {
      argsObj: {
        depositTxn: TransactionToSign | Transaction | Promise<SendTransactionResult>
        /**
         * The public key to depositTODO: Add custom EdDSA to check that the depositor knows the secret key. Useful to prevent rogue key attack, adding the negative of another pk.
         */
        pk: Uint8Array
      }
      argsTuple: [depositTxn: TransactionToSign | Transaction | Promise<SendTransactionResult>, pk: Uint8Array]
      /**
       * - the number id of the public key, if successful. fails if unsuccessful.
       */
      returns: bigint[]
    }>
    & Record<'initWithdrawalSession(pay,byte[],byte[])byte[32]' | 'initWithdrawalSession', {
      argsObj: {
        /**
         * The transaction that deposited the MBBR
         */
        mbbrDepositTxn: TransactionToSign | Transaction | Promise<SendTransactionResult>
        /**
         * Signed message
         */
        msg: Uint8Array
        /**
         * The initial challenge, which needs to be re-created to verify the ring signature
         */
        initialChallenge: Uint8Array
      }
      argsTuple: [mbbrDepositTxn: TransactionToSign | Transaction | Promise<SendTransactionResult>, msg: Uint8Array, initialChallenge: Uint8Array]
      /**
       * - the id of the withdrawal session box
       */
      returns: Uint8Array
    }>
    & Record<'createUploadPrecomputedChallengesBox(pay,byte[],uint64,uint64)byte[32]' | 'createUploadPrecomputedChallengesBox', {
      argsObj: {
        mbbrDepositTxn: TransactionToSign | Transaction | Promise<SendTransactionResult>
        msg: Uint8Array
        boxIndex: bigint | number
        boxSize: bigint | number
      }
      argsTuple: [mbbrDepositTxn: TransactionToSign | Transaction | Promise<SendTransactionResult>, msg: Uint8Array, boxIndex: bigint | number, boxSize: bigint | number]
      returns: Uint8Array
    }>
    & Record<'uploadPrecomputedChallenges(byte[],uint64,byte[])byte[32]' | 'uploadPrecomputedChallenges', {
      argsObj: {
        /**
         * Msg, functioning as the id for the withdrawal session
         */
        msg: Uint8Array
        boxIndex: bigint | number
        precomputedChallenges: Uint8Array
      }
      argsTuple: [msg: Uint8Array, boxIndex: bigint | number, precomputedChallenges: Uint8Array]
      returns: Uint8Array
    }>
    & Record<'createIntermediateChallengesBox(pay,byte[],uint64,uint64)byte[32]' | 'createIntermediateChallengesBox', {
      argsObj: {
        mbbrDepositTxn: TransactionToSign | Transaction | Promise<SendTransactionResult>
        /**
         * Msg, functioning as the id for the withdrawal session
         */
        msg: Uint8Array
        /**
         * The index of the precomputed challenge box, incrementing with each chunk of date.
         */
        boxIndex: bigint | number
        /**
         * The size of the precomputed challenge box
         */
        boxSize: bigint | number
      }
      argsTuple: [mbbrDepositTxn: TransactionToSign | Transaction | Promise<SendTransactionResult>, msg: Uint8Array, boxIndex: bigint | number, boxSize: bigint | number]
      /**
       * - the id of the precomputed challenge box
       */
      returns: Uint8Array
    }>
    & Record<'computeIndividualChallenge(byte[],byte[],uint64,byte[],uint64,uint64)(byte[32],uint64)' | 'computeIndividualChallenge', {
      argsObj: {
        /**
         * The message to be signed
         */
        msg: Uint8Array
        /**
         * The nonce, part of the ring signature itself, aka one of the fake secret keys
         */
        nonce: Uint8Array
        /**
         * The index number of the public key in the smart contract storage
         */
        pkIndex: bigint | number
        /**
         * The key image of the signer, required for linkabiltiy to prevent double spending
         */
        keyImage: Uint8Array
        cPrevBoxIndex: bigint | number
        cPrevOffset: bigint | number
      }
      argsTuple: [msg: Uint8Array, nonce: Uint8Array, pkIndex: bigint | number, keyImage: Uint8Array, cPrevBoxIndex: bigint | number, cPrevOffset: bigint | number]
      returns: [Uint8Array, bigint]
    }>
  /**
   * Defines the shape of the global and local state of the application.
   */
  state: {
    global: {
      'denomination'?: IntegerState
      'asaId'?: IntegerState
      'pkIndex'?: IntegerState
    }
  }
}
/**
 * Defines the possible abi call signatures
 */
export type MahberSig = keyof Mahber['methods']
/**
 * Defines an object containing all relevant parameters for a single call to the contract. Where TSignature is undefined, a bare call is made
 */
export type TypedCallParams<TSignature extends MahberSig | undefined> = {
  method: TSignature
  methodArgs: TSignature extends undefined ? undefined : Array<ABIAppCallArg | undefined>
} & AppClientCallCoreParams & CoreAppCallArgs
/**
 * Defines the arguments required for a bare call
 */
export type BareCallArgs = Omit<RawAppCallArgs, keyof CoreAppCallArgs>
/**
 * Maps a method signature from the Mahber smart contract to the method's arguments in either tuple of struct form
 */
export type MethodArgs<TSignature extends MahberSig> = Mahber['methods'][TSignature]['argsObj' | 'argsTuple']
/**
 * Maps a method signature from the Mahber smart contract to the method's return type
 */
export type MethodReturn<TSignature extends MahberSig> = Mahber['methods'][TSignature]['returns']

/**
 * A factory for available 'create' calls
 */
export type MahberCreateCalls = (typeof MahberCallFactory)['create']
/**
 * Defines supported create methods for this smart contract
 */
export type MahberCreateCallParams =
  | (TypedCallParams<'createApplication()void'> & (OnCompleteNoOp))
/**
 * Defines arguments required for the deploy method.
 */
export type MahberDeployArgs = {
  deployTimeParams?: TealTemplateParams
  /**
   * A delegate which takes a create call factory and returns the create call params for this smart contract
   */
  createCall?: (callFactory: MahberCreateCalls) => MahberCreateCallParams
}


/**
 * Exposes methods for constructing all available smart contract calls
 */
export abstract class MahberCallFactory {
  /**
   * Gets available create call factories
   */
  static get create() {
    return {
      /**
       * Constructs a create call for the Mahber smart contract using the createApplication()void ABI method
       *
       * @param args Any args for the contract call
       * @param params Any additional parameters for the call
       * @returns A TypedCallParams object for the call
       */
      createApplication(args: MethodArgs<'createApplication()void'>, params: AppClientCallCoreParams & CoreAppCallArgs & AppClientCompilationParams & (OnCompleteNoOp) = {}) {
        return {
          method: 'createApplication()void' as const,
          methodArgs: Array.isArray(args) ? args : [],
          ...params,
        }
      },
    }
  }

  /**
   * Constructs a no op call for the dummyOpUp(uint64)uint64 ABI method
   *
   * Dummy Op UpDummy operation to get more opcode budget@i- The number to return, necssary to deduplicate the name
   *
   * @param args Any args for the contract call
   * @param params Any additional parameters for the call
   * @returns A TypedCallParams object for the call
   */
  static dummyOpUp(args: MethodArgs<'dummyOpUp(uint64)uint64'>, params: AppClientCallCoreParams & CoreAppCallArgs) {
    return {
      method: 'dummyOpUp(uint64)uint64' as const,
      methodArgs: Array.isArray(args) ? args : [args.i],
      ...params,
    }
  }
  /**
   * Constructs a no op call for the publicScalarMultBase(byte[])byte[] ABI method
   *
   * publicScalarMultBasePublic wrapper around the scalarMultBase method, allowing it to be tested directly.@scalar- The scalar to multiply the basepoint by.
   *
   * @param args Any args for the contract call
   * @param params Any additional parameters for the call
   * @returns A TypedCallParams object for the call
   */
  static publicScalarMultBase(args: MethodArgs<'publicScalarMultBase(byte[])byte[]'>, params: AppClientCallCoreParams & CoreAppCallArgs) {
    return {
      method: 'publicScalarMultBase(byte[])byte[]' as const,
      methodArgs: Array.isArray(args) ? args : [args.scalar],
      ...params,
    }
  }
  /**
   * Constructs a no op call for the publicScalarMult(byte[],byte[])byte[] ABI method
   *
   * publicScalarMultPublic wrapper around the scalarMult method, allowing it to be tested directly.@scalar- The scalar to multiply the point with@point- The point that is multiplied with the scalar
   *
   * @param args Any args for the contract call
   * @param params Any additional parameters for the call
   * @returns A TypedCallParams object for the call
   */
  static publicScalarMult(args: MethodArgs<'publicScalarMult(byte[],byte[])byte[]'>, params: AppClientCallCoreParams & CoreAppCallArgs) {
    return {
      method: 'publicScalarMult(byte[],byte[])byte[]' as const,
      methodArgs: Array.isArray(args) ? args : [args.scalar, args.point],
      ...params,
    }
  }
  /**
   * Constructs a no op call for the publicValidPoint(byte[])bool ABI method
   *
   * publicValidPointPublic wrapper around the validPoint method, allowing it to be tested directly.@point- The point to check
   *
   * @param args Any args for the contract call
   * @param params Any additional parameters for the call
   * @returns A TypedCallParams object for the call
   */
  static publicValidPoint(args: MethodArgs<'publicValidPoint(byte[])bool'>, params: AppClientCallCoreParams & CoreAppCallArgs) {
    return {
      method: 'publicValidPoint(byte[])bool' as const,
      methodArgs: Array.isArray(args) ? args : [args.point],
      ...params,
    }
  }
  /**
   * Constructs a no op call for the publicPointAdd(byte[],byte[])byte[] ABI method
   *
   * publicPointAddPublic wrapper around the pointAdd method, allowing it to be tested directly.
   *
   * @param args Any args for the contract call
   * @param params Any additional parameters for the call
   * @returns A TypedCallParams object for the call
   */
  static publicPointAdd(args: MethodArgs<'publicPointAdd(byte[],byte[])byte[]'>, params: AppClientCallCoreParams & CoreAppCallArgs) {
    return {
      method: 'publicPointAdd(byte[],byte[])byte[]' as const,
      methodArgs: Array.isArray(args) ? args : [args.pointA, args.pointB],
      ...params,
    }
  }
  /**
   * Constructs a no op call for the publicHashPointToPoint(byte[])byte[] ABI method
   *
   * publicHashPointToPointPublic wrapper around the hashPointToPoint method, allowing it to be tested directly.
   *
   * @param args Any args for the contract call
   * @param params Any additional parameters for the call
   * @returns A TypedCallParams object for the call
   */
  static publicHashPointToPoint(args: MethodArgs<'publicHashPointToPoint(byte[])byte[]'>, params: AppClientCallCoreParams & CoreAppCallArgs) {
    return {
      method: 'publicHashPointToPoint(byte[])byte[]' as const,
      methodArgs: Array.isArray(args) ? args : [args.point],
      ...params,
    }
  }
  /**
   * Constructs a no op call for the publicChallenge(byte[],byte[],byte[],byte[],byte[])byte[] ABI method
   *
   * publicChallengePublic wrapper around the challenge method, allowing it to be tested directly.
   *
   * @param args Any args for the contract call
   * @param params Any additional parameters for the call
   * @returns A TypedCallParams object for the call
   */
  static publicChallenge(args: MethodArgs<'publicChallenge(byte[],byte[],byte[],byte[],byte[])byte[]'>, params: AppClientCallCoreParams & CoreAppCallArgs) {
    return {
      method: 'publicChallenge(byte[],byte[],byte[],byte[],byte[])byte[]' as const,
      methodArgs: Array.isArray(args) ? args : [args.msg, args.nonce, args.cPrev, args.pk, args.keyImage],
      ...params,
    }
  }
  /**
   * Constructs a no op call for the publicChallengeLsig(byte[],byte[],byte[],byte[],byte[],pay)byte[] ABI method
   *
   * publicChallengePublic wrapper around the challenge method, allowing it to be tested directly.
   *
   * @param args Any args for the contract call
   * @param params Any additional parameters for the call
   * @returns A TypedCallParams object for the call
   */
  static publicChallengeLsig(args: MethodArgs<'publicChallengeLsig(byte[],byte[],byte[],byte[],byte[],pay)byte[]'>, params: AppClientCallCoreParams & CoreAppCallArgs) {
    return {
      method: 'publicChallengeLsig(byte[],byte[],byte[],byte[],byte[],pay)byte[]' as const,
      methodArgs: Array.isArray(args) ? args : [args.msg, args.nonce, args.cPrev, args.pk, args.keyImage, args.lsigTxn],
      ...params,
    }
  }
  /**
   * Constructs a no op call for the deposit(pay,byte[])uint64[] ABI method
   *
   * depositDeposit funds + public key into the contract
   *
   * @param args Any args for the contract call
   * @param params Any additional parameters for the call
   * @returns A TypedCallParams object for the call
   */
  static deposit(args: MethodArgs<'deposit(pay,byte[])uint64[]'>, params: AppClientCallCoreParams & CoreAppCallArgs) {
    return {
      method: 'deposit(pay,byte[])uint64[]' as const,
      methodArgs: Array.isArray(args) ? args : [args.depositTxn, args.pk],
      ...params,
    }
  }
  /**
   * Constructs a no op call for the initWithdrawalSession(pay,byte[],byte[])byte[32] ABI method
   *
   * initWithdrawalCreates a box representing a "withdrawal session".Of key importance is the signed message string, which must contain the following:Ring Size - Chosen number of PKs, i.e. size of anonymity setKey Image - The keyimage, the one thing that is unique for a withdrawalApp Id - The id of the smart contract appNominal amount - The denomination of the contract, what was deposited originallyASA ID - Clarifies the ASA ID. (Plain Algo has ID 0, "the default" asset of Algorand)Withdrawal Address - Address of the final recipient of the fundsRelayer Address - Address of the relayer, facilitating the withdrawal (could be same as withdrawal address)Relayer Fee - The fee the relayer charges for facilitating the withdrawal (could be 0)The hash of the message becomes the id of the withdrawal session's box.
   *
   * @param args Any args for the contract call
   * @param params Any additional parameters for the call
   * @returns A TypedCallParams object for the call
   */
  static initWithdrawalSession(args: MethodArgs<'initWithdrawalSession(pay,byte[],byte[])byte[32]'>, params: AppClientCallCoreParams & CoreAppCallArgs) {
    return {
      method: 'initWithdrawalSession(pay,byte[],byte[])byte[32]' as const,
      methodArgs: Array.isArray(args) ? args : [args.mbbrDepositTxn, args.msg, args.initialChallenge],
      ...params,
    }
  }
  /**
   * Constructs a no op call for the createUploadPrecomputedChallengesBox(pay,byte[],uint64,uint64)byte[32] ABI method
   *
   * TODO: destroyWithdrawalSession, IF SESSION LOCKED
   *
   * @param args Any args for the contract call
   * @param params Any additional parameters for the call
   * @returns A TypedCallParams object for the call
   */
  static createUploadPrecomputedChallengesBox(args: MethodArgs<'createUploadPrecomputedChallengesBox(pay,byte[],uint64,uint64)byte[32]'>, params: AppClientCallCoreParams & CoreAppCallArgs) {
    return {
      method: 'createUploadPrecomputedChallengesBox(pay,byte[],uint64,uint64)byte[32]' as const,
      methodArgs: Array.isArray(args) ? args : [args.mbbrDepositTxn, args.msg, args.boxIndex, args.boxSize],
      ...params,
    }
  }
  /**
   * Constructs a no op call for the uploadPrecomputedChallenges(byte[],uint64,byte[])byte[32] ABI method
   *
   * uploadPrecomputedChallengesCreates a box and uploads the precomputed challenges into it.
   *
   * @param args Any args for the contract call
   * @param params Any additional parameters for the call
   * @returns A TypedCallParams object for the call
   */
  static uploadPrecomputedChallenges(args: MethodArgs<'uploadPrecomputedChallenges(byte[],uint64,byte[])byte[32]'>, params: AppClientCallCoreParams & CoreAppCallArgs) {
    return {
      method: 'uploadPrecomputedChallenges(byte[],uint64,byte[])byte[32]' as const,
      methodArgs: Array.isArray(args) ? args : [args.msg, args.boxIndex, args.precomputedChallenges],
      ...params,
    }
  }
  /**
   * Constructs a no op call for the createIntermediateChallengesBox(pay,byte[],uint64,uint64)byte[32] ABI method
   *
   * createIntermediateChallengesBoxCreates a box that will be used to contain intermediateChallengesBox.Should eventually be a mirror image of the corresponding uploadPrecomputedChallengesBox.
   *
   * @param args Any args for the contract call
   * @param params Any additional parameters for the call
   * @returns A TypedCallParams object for the call
   */
  static createIntermediateChallengesBox(args: MethodArgs<'createIntermediateChallengesBox(pay,byte[],uint64,uint64)byte[32]'>, params: AppClientCallCoreParams & CoreAppCallArgs) {
    return {
      method: 'createIntermediateChallengesBox(pay,byte[],uint64,uint64)byte[32]' as const,
      methodArgs: Array.isArray(args) ? args : [args.mbbrDepositTxn, args.msg, args.boxIndex, args.boxSize],
      ...params,
    }
  }
  /**
   * Constructs a no op call for the computeIndividualChallenge(byte[],byte[],uint64,byte[],uint64,uint64)(byte[32],uint64) ABI method
   *
   * computeIndividualChallengeComputes an individual challenge.Note that the previous challenge is loaded specifically from the precomputed challenges box.While the calculated challenge is loaded into the intermediate challenges box.At the end we will compare if the two boxes are the same, and of course that the last challenge is the same as the initial challenge.By loading specifically from the precomputed challenges box we can verify in parallell.The odds of being able to arrive at the same initial challenge in the last challenge is astronomically low UNLESS it is a valid ring signature.Public keys are of course loaded from the contract storage.
   *
   * @param args Any args for the contract call
   * @param params Any additional parameters for the call
   * @returns A TypedCallParams object for the call
   */
  static computeIndividualChallenge(args: MethodArgs<'computeIndividualChallenge(byte[],byte[],uint64,byte[],uint64,uint64)(byte[32],uint64)'>, params: AppClientCallCoreParams & CoreAppCallArgs) {
    return {
      method: 'computeIndividualChallenge(byte[],byte[],uint64,byte[],uint64,uint64)(byte[32],uint64)' as const,
      methodArgs: Array.isArray(args) ? args : [args.msg, args.nonce, args.pkIndex, args.keyImage, args.cPrevBoxIndex, args.cPrevOffset],
      ...params,
    }
  }
}

/**
 * A client to make calls to the Mahber smart contract
 */
export class MahberClient {
  /**
   * The underlying `ApplicationClient` for when you want to have more flexibility
   */
  public readonly appClient: ApplicationClient

  private readonly sender: SendTransactionFrom | undefined

  /**
   * Creates a new instance of `MahberClient`
   *
   * @param appDetails appDetails The details to identify the app to deploy
   * @param algod An algod client instance
   */
  constructor(appDetails: AppDetails, private algod: Algodv2) {
    this.sender = appDetails.sender
    this.appClient = algokit.getAppClient({
      ...appDetails,
      app: APP_SPEC
    }, algod)
  }

  /**
   * Checks for decode errors on the AppCallTransactionResult and maps the return value to the specified generic type
   *
   * @param result The AppCallTransactionResult to be mapped
   * @param returnValueFormatter An optional delegate to format the return value if required
   * @returns The smart contract response with an updated return value
   */
  protected mapReturnValue<TReturn>(result: AppCallTransactionResult, returnValueFormatter?: (value: any) => TReturn): AppCallTransactionResultOfType<TReturn> {
    if(result.return?.decodeError) {
      throw result.return.decodeError
    }
    const returnValue = result.return?.returnValue !== undefined && returnValueFormatter !== undefined
      ? returnValueFormatter(result.return.returnValue)
      : result.return?.returnValue as TReturn | undefined
      return { ...result, return: returnValue }
  }

  /**
   * Calls the ABI method with the matching signature using an onCompletion code of NO_OP
   *
   * @param typedCallParams An object containing the method signature, args, and any other relevant parameters
   * @param returnValueFormatter An optional delegate which when provided will be used to map non-undefined return values to the target type
   * @returns The result of the smart contract call
   */
  public async call<TSignature extends keyof Mahber['methods']>(typedCallParams: TypedCallParams<TSignature>, returnValueFormatter?: (value: any) => MethodReturn<TSignature>) {
    return this.mapReturnValue<MethodReturn<TSignature>>(await this.appClient.call(typedCallParams), returnValueFormatter)
  }

  /**
   * Idempotently deploys the Mahber smart contract.
   *
   * @param params The arguments for the contract calls and any additional parameters for the call
   * @returns The deployment result
   */
  public deploy(params: MahberDeployArgs & AppClientDeployCoreParams = {}): ReturnType<ApplicationClient['deploy']> {
    const createArgs = params.createCall?.(MahberCallFactory.create)
    return this.appClient.deploy({
      ...params,
      createArgs,
      createOnCompleteAction: createArgs?.onCompleteAction,
    })
  }

  /**
   * Gets available create methods
   */
  public get create() {
    const $this = this
    return {
      /**
       * Creates a new instance of the Mahber smart contract using the createApplication()void ABI method.
       *
       * @param args The arguments for the smart contract call
       * @param params Any additional parameters for the call
       * @returns The create result
       */
      async createApplication(args: MethodArgs<'createApplication()void'>, params: AppClientCallCoreParams & AppClientCompilationParams & (OnCompleteNoOp) = {}): Promise<AppCallTransactionResultOfType<MethodReturn<'createApplication()void'>>> {
        return $this.mapReturnValue(await $this.appClient.create(MahberCallFactory.create.createApplication(args, params)))
      },
    }
  }

  /**
   * Makes a clear_state call to an existing instance of the Mahber smart contract.
   *
   * @param args The arguments for the bare call
   * @returns The clear_state result
   */
  public clearState(args: BareCallArgs & AppClientCallCoreParams & CoreAppCallArgs = {}) {
    return this.appClient.clearState(args)
  }

  /**
   * Calls the dummyOpUp(uint64)uint64 ABI method.
   *
   * Dummy Op UpDummy operation to get more opcode budget@i- The number to return, necssary to deduplicate the name
   *
   * @param args The arguments for the contract call
   * @param params Any additional parameters for the call
   * @returns The result of the call: the number (but we do nothing with it)
   */
  public dummyOpUp(args: MethodArgs<'dummyOpUp(uint64)uint64'>, params: AppClientCallCoreParams & CoreAppCallArgs = {}) {
    return this.call(MahberCallFactory.dummyOpUp(args, params))
  }

  /**
   * Calls the publicScalarMultBase(byte[])byte[] ABI method.
   *
   * publicScalarMultBasePublic wrapper around the scalarMultBase method, allowing it to be tested directly.@scalar- The scalar to multiply the basepoint by.
   *
   * @param args The arguments for the contract call
   * @param params Any additional parameters for the call
   * @returns The result of the call: the content of the scalarMultBase call
   */
  public publicScalarMultBase(args: MethodArgs<'publicScalarMultBase(byte[])byte[]'>, params: AppClientCallCoreParams & CoreAppCallArgs = {}) {
    return this.call(MahberCallFactory.publicScalarMultBase(args, params))
  }

  /**
   * Calls the publicScalarMult(byte[],byte[])byte[] ABI method.
   *
   * publicScalarMultPublic wrapper around the scalarMult method, allowing it to be tested directly.@scalar- The scalar to multiply the point with@point- The point that is multiplied with the scalar
   *
   * @param args The arguments for the contract call
   * @param params Any additional parameters for the call
   * @returns The result of the call: the content of the scalarMult call
   */
  public publicScalarMult(args: MethodArgs<'publicScalarMult(byte[],byte[])byte[]'>, params: AppClientCallCoreParams & CoreAppCallArgs = {}) {
    return this.call(MahberCallFactory.publicScalarMult(args, params))
  }

  /**
   * Calls the publicValidPoint(byte[])bool ABI method.
   *
   * publicValidPointPublic wrapper around the validPoint method, allowing it to be tested directly.@point- The point to check
   *
   * @param args The arguments for the contract call
   * @param params Any additional parameters for the call
   * @returns The result of the call: the content of the validPoint call
   */
  public publicValidPoint(args: MethodArgs<'publicValidPoint(byte[])bool'>, params: AppClientCallCoreParams & CoreAppCallArgs = {}) {
    return this.call(MahberCallFactory.publicValidPoint(args, params))
  }

  /**
   * Calls the publicPointAdd(byte[],byte[])byte[] ABI method.
   *
   * publicPointAddPublic wrapper around the pointAdd method, allowing it to be tested directly.
   *
   * @param args The arguments for the contract call
   * @param params Any additional parameters for the call
   * @returns The result of the call: the content of the pointAdd call
   */
  public publicPointAdd(args: MethodArgs<'publicPointAdd(byte[],byte[])byte[]'>, params: AppClientCallCoreParams & CoreAppCallArgs = {}) {
    return this.call(MahberCallFactory.publicPointAdd(args, params))
  }

  /**
   * Calls the publicHashPointToPoint(byte[])byte[] ABI method.
   *
   * publicHashPointToPointPublic wrapper around the hashPointToPoint method, allowing it to be tested directly.
   *
   * @param args The arguments for the contract call
   * @param params Any additional parameters for the call
   * @returns The result of the call: the content of the hashPointToPoint call
   */
  public publicHashPointToPoint(args: MethodArgs<'publicHashPointToPoint(byte[])byte[]'>, params: AppClientCallCoreParams & CoreAppCallArgs = {}) {
    return this.call(MahberCallFactory.publicHashPointToPoint(args, params))
  }

  /**
   * Calls the publicChallenge(byte[],byte[],byte[],byte[],byte[])byte[] ABI method.
   *
   * publicChallengePublic wrapper around the challenge method, allowing it to be tested directly.
   *
   * @param args The arguments for the contract call
   * @param params Any additional parameters for the call
   * @returns The result of the call: - the content of the privateChallenge call
   */
  public publicChallenge(args: MethodArgs<'publicChallenge(byte[],byte[],byte[],byte[],byte[])byte[]'>, params: AppClientCallCoreParams & CoreAppCallArgs = {}) {
    return this.call(MahberCallFactory.publicChallenge(args, params))
  }

  /**
   * Calls the publicChallengeLsig(byte[],byte[],byte[],byte[],byte[],pay)byte[] ABI method.
   *
   * publicChallengePublic wrapper around the challenge method, allowing it to be tested directly.
   *
   * @param args The arguments for the contract call
   * @param params Any additional parameters for the call
   * @returns The result of the call: - the content of the privateChallenge call
   */
  public publicChallengeLsig(args: MethodArgs<'publicChallengeLsig(byte[],byte[],byte[],byte[],byte[],pay)byte[]'>, params: AppClientCallCoreParams & CoreAppCallArgs = {}) {
    return this.call(MahberCallFactory.publicChallengeLsig(args, params))
  }

  /**
   * Calls the deposit(pay,byte[])uint64[] ABI method.
   *
   * depositDeposit funds + public key into the contract
   *
   * @param args The arguments for the contract call
   * @param params Any additional parameters for the call
   * @returns The result of the call: - the number id of the public key, if successful. fails if unsuccessful.
   */
  public deposit(args: MethodArgs<'deposit(pay,byte[])uint64[]'>, params: AppClientCallCoreParams & CoreAppCallArgs = {}) {
    return this.call(MahberCallFactory.deposit(args, params))
  }

  /**
   * Calls the initWithdrawalSession(pay,byte[],byte[])byte[32] ABI method.
   *
   * initWithdrawalCreates a box representing a "withdrawal session".Of key importance is the signed message string, which must contain the following:Ring Size - Chosen number of PKs, i.e. size of anonymity setKey Image - The keyimage, the one thing that is unique for a withdrawalApp Id - The id of the smart contract appNominal amount - The denomination of the contract, what was deposited originallyASA ID - Clarifies the ASA ID. (Plain Algo has ID 0, "the default" asset of Algorand)Withdrawal Address - Address of the final recipient of the fundsRelayer Address - Address of the relayer, facilitating the withdrawal (could be same as withdrawal address)Relayer Fee - The fee the relayer charges for facilitating the withdrawal (could be 0)The hash of the message becomes the id of the withdrawal session's box.
   *
   * @param args The arguments for the contract call
   * @param params Any additional parameters for the call
   * @returns The result of the call: - the id of the withdrawal session box
   */
  public initWithdrawalSession(args: MethodArgs<'initWithdrawalSession(pay,byte[],byte[])byte[32]'>, params: AppClientCallCoreParams & CoreAppCallArgs = {}) {
    return this.call(MahberCallFactory.initWithdrawalSession(args, params))
  }

  /**
   * Calls the createUploadPrecomputedChallengesBox(pay,byte[],uint64,uint64)byte[32] ABI method.
   *
   * TODO: destroyWithdrawalSession, IF SESSION LOCKED
   *
   * @param args The arguments for the contract call
   * @param params Any additional parameters for the call
   * @returns The result of the call
   */
  public createUploadPrecomputedChallengesBox(args: MethodArgs<'createUploadPrecomputedChallengesBox(pay,byte[],uint64,uint64)byte[32]'>, params: AppClientCallCoreParams & CoreAppCallArgs = {}) {
    return this.call(MahberCallFactory.createUploadPrecomputedChallengesBox(args, params))
  }

  /**
   * Calls the uploadPrecomputedChallenges(byte[],uint64,byte[])byte[32] ABI method.
   *
   * uploadPrecomputedChallengesCreates a box and uploads the precomputed challenges into it.
   *
   * @param args The arguments for the contract call
   * @param params Any additional parameters for the call
   * @returns The result of the call
   */
  public uploadPrecomputedChallenges(args: MethodArgs<'uploadPrecomputedChallenges(byte[],uint64,byte[])byte[32]'>, params: AppClientCallCoreParams & CoreAppCallArgs = {}) {
    return this.call(MahberCallFactory.uploadPrecomputedChallenges(args, params))
  }

  /**
   * Calls the createIntermediateChallengesBox(pay,byte[],uint64,uint64)byte[32] ABI method.
   *
   * createIntermediateChallengesBoxCreates a box that will be used to contain intermediateChallengesBox.Should eventually be a mirror image of the corresponding uploadPrecomputedChallengesBox.
   *
   * @param args The arguments for the contract call
   * @param params Any additional parameters for the call
   * @returns The result of the call: - the id of the precomputed challenge box
   */
  public createIntermediateChallengesBox(args: MethodArgs<'createIntermediateChallengesBox(pay,byte[],uint64,uint64)byte[32]'>, params: AppClientCallCoreParams & CoreAppCallArgs = {}) {
    return this.call(MahberCallFactory.createIntermediateChallengesBox(args, params))
  }

  /**
   * Calls the computeIndividualChallenge(byte[],byte[],uint64,byte[],uint64,uint64)(byte[32],uint64) ABI method.
   *
   * computeIndividualChallengeComputes an individual challenge.Note that the previous challenge is loaded specifically from the precomputed challenges box.While the calculated challenge is loaded into the intermediate challenges box.At the end we will compare if the two boxes are the same, and of course that the last challenge is the same as the initial challenge.By loading specifically from the precomputed challenges box we can verify in parallell.The odds of being able to arrive at the same initial challenge in the last challenge is astronomically low UNLESS it is a valid ring signature.Public keys are of course loaded from the contract storage.
   *
   * @param args The arguments for the contract call
   * @param params Any additional parameters for the call
   * @returns The result of the call
   */
  public computeIndividualChallenge(args: MethodArgs<'computeIndividualChallenge(byte[],byte[],uint64,byte[],uint64,uint64)(byte[32],uint64)'>, params: AppClientCallCoreParams & CoreAppCallArgs = {}) {
    return this.call(MahberCallFactory.computeIndividualChallenge(args, params))
  }

  /**
   * Extracts a binary state value out of an AppState dictionary
   *
   * @param state The state dictionary containing the state value
   * @param key The key of the state value
   * @returns A BinaryState instance containing the state value, or undefined if the key was not found
   */
  private static getBinaryState(state: AppState, key: string): BinaryState | undefined {
    const value = state[key]
    if (!value) return undefined
    if (!('valueRaw' in value))
      throw new Error(`Failed to parse state value for ${key}; received an int when expected a byte array`)
    return {
      asString(): string {
        return value.value
      },
      asByteArray(): Uint8Array {
        return value.valueRaw
      }
    }
  }

  /**
   * Extracts a integer state value out of an AppState dictionary
   *
   * @param state The state dictionary containing the state value
   * @param key The key of the state value
   * @returns An IntegerState instance containing the state value, or undefined if the key was not found
   */
  private static getIntegerState(state: AppState, key: string): IntegerState | undefined {
    const value = state[key]
    if (!value) return undefined
    if ('valueRaw' in value)
      throw new Error(`Failed to parse state value for ${key}; received a byte array when expected a number`)
    return {
      asBigInt() {
        return typeof value.value === 'bigint' ? value.value : BigInt(value.value)
      },
      asNumber(): number {
        return typeof value.value === 'bigint' ? Number(value.value) : value.value
      },
    }
  }

  /**
   * Returns the smart contract's global state wrapped in a strongly typed accessor with options to format the stored value
   */
  public async getGlobalState(): Promise<Mahber['state']['global']> {
    const state = await this.appClient.getGlobalState()
    return {
      get denomination() {
        return MahberClient.getIntegerState(state, 'denomination')
      },
      get asaId() {
        return MahberClient.getIntegerState(state, 'asaId')
      },
      get pkIndex() {
        return MahberClient.getIntegerState(state, 'pkIndex')
      },
    }
  }

  public compose(): MahberComposer {
    const client = this
    const atc = new AtomicTransactionComposer()
    let promiseChain:Promise<unknown> = Promise.resolve()
    const resultMappers: Array<undefined | ((x: any) => any)> = []
    return {
      dummyOpUp(args: MethodArgs<'dummyOpUp(uint64)uint64'>, params?: AppClientCallCoreParams & CoreAppCallArgs) {
        promiseChain = promiseChain.then(() => client.dummyOpUp(args, {...params, sendParams: {...params?.sendParams, skipSending: true, atc}}))
        resultMappers.push(undefined)
        return this
      },
      publicScalarMultBase(args: MethodArgs<'publicScalarMultBase(byte[])byte[]'>, params?: AppClientCallCoreParams & CoreAppCallArgs) {
        promiseChain = promiseChain.then(() => client.publicScalarMultBase(args, {...params, sendParams: {...params?.sendParams, skipSending: true, atc}}))
        resultMappers.push(undefined)
        return this
      },
      publicScalarMult(args: MethodArgs<'publicScalarMult(byte[],byte[])byte[]'>, params?: AppClientCallCoreParams & CoreAppCallArgs) {
        promiseChain = promiseChain.then(() => client.publicScalarMult(args, {...params, sendParams: {...params?.sendParams, skipSending: true, atc}}))
        resultMappers.push(undefined)
        return this
      },
      publicValidPoint(args: MethodArgs<'publicValidPoint(byte[])bool'>, params?: AppClientCallCoreParams & CoreAppCallArgs) {
        promiseChain = promiseChain.then(() => client.publicValidPoint(args, {...params, sendParams: {...params?.sendParams, skipSending: true, atc}}))
        resultMappers.push(undefined)
        return this
      },
      publicPointAdd(args: MethodArgs<'publicPointAdd(byte[],byte[])byte[]'>, params?: AppClientCallCoreParams & CoreAppCallArgs) {
        promiseChain = promiseChain.then(() => client.publicPointAdd(args, {...params, sendParams: {...params?.sendParams, skipSending: true, atc}}))
        resultMappers.push(undefined)
        return this
      },
      publicHashPointToPoint(args: MethodArgs<'publicHashPointToPoint(byte[])byte[]'>, params?: AppClientCallCoreParams & CoreAppCallArgs) {
        promiseChain = promiseChain.then(() => client.publicHashPointToPoint(args, {...params, sendParams: {...params?.sendParams, skipSending: true, atc}}))
        resultMappers.push(undefined)
        return this
      },
      publicChallenge(args: MethodArgs<'publicChallenge(byte[],byte[],byte[],byte[],byte[])byte[]'>, params?: AppClientCallCoreParams & CoreAppCallArgs) {
        promiseChain = promiseChain.then(() => client.publicChallenge(args, {...params, sendParams: {...params?.sendParams, skipSending: true, atc}}))
        resultMappers.push(undefined)
        return this
      },
      publicChallengeLsig(args: MethodArgs<'publicChallengeLsig(byte[],byte[],byte[],byte[],byte[],pay)byte[]'>, params?: AppClientCallCoreParams & CoreAppCallArgs) {
        promiseChain = promiseChain.then(() => client.publicChallengeLsig(args, {...params, sendParams: {...params?.sendParams, skipSending: true, atc}}))
        resultMappers.push(undefined)
        return this
      },
      deposit(args: MethodArgs<'deposit(pay,byte[])uint64[]'>, params?: AppClientCallCoreParams & CoreAppCallArgs) {
        promiseChain = promiseChain.then(() => client.deposit(args, {...params, sendParams: {...params?.sendParams, skipSending: true, atc}}))
        resultMappers.push(undefined)
        return this
      },
      initWithdrawalSession(args: MethodArgs<'initWithdrawalSession(pay,byte[],byte[])byte[32]'>, params?: AppClientCallCoreParams & CoreAppCallArgs) {
        promiseChain = promiseChain.then(() => client.initWithdrawalSession(args, {...params, sendParams: {...params?.sendParams, skipSending: true, atc}}))
        resultMappers.push(undefined)
        return this
      },
      createUploadPrecomputedChallengesBox(args: MethodArgs<'createUploadPrecomputedChallengesBox(pay,byte[],uint64,uint64)byte[32]'>, params?: AppClientCallCoreParams & CoreAppCallArgs) {
        promiseChain = promiseChain.then(() => client.createUploadPrecomputedChallengesBox(args, {...params, sendParams: {...params?.sendParams, skipSending: true, atc}}))
        resultMappers.push(undefined)
        return this
      },
      uploadPrecomputedChallenges(args: MethodArgs<'uploadPrecomputedChallenges(byte[],uint64,byte[])byte[32]'>, params?: AppClientCallCoreParams & CoreAppCallArgs) {
        promiseChain = promiseChain.then(() => client.uploadPrecomputedChallenges(args, {...params, sendParams: {...params?.sendParams, skipSending: true, atc}}))
        resultMappers.push(undefined)
        return this
      },
      createIntermediateChallengesBox(args: MethodArgs<'createIntermediateChallengesBox(pay,byte[],uint64,uint64)byte[32]'>, params?: AppClientCallCoreParams & CoreAppCallArgs) {
        promiseChain = promiseChain.then(() => client.createIntermediateChallengesBox(args, {...params, sendParams: {...params?.sendParams, skipSending: true, atc}}))
        resultMappers.push(undefined)
        return this
      },
      computeIndividualChallenge(args: MethodArgs<'computeIndividualChallenge(byte[],byte[],uint64,byte[],uint64,uint64)(byte[32],uint64)'>, params?: AppClientCallCoreParams & CoreAppCallArgs) {
        promiseChain = promiseChain.then(() => client.computeIndividualChallenge(args, {...params, sendParams: {...params?.sendParams, skipSending: true, atc}}))
        resultMappers.push(undefined)
        return this
      },
      clearState(args?: BareCallArgs & AppClientCallCoreParams & CoreAppCallArgs) {
        promiseChain = promiseChain.then(() => client.clearState({...args, sendParams: {...args?.sendParams, skipSending: true, atc}}))
        resultMappers.push(undefined)
        return this
      },
      addTransaction(txn: TransactionWithSigner | TransactionToSign | Transaction | Promise<SendTransactionResult>, defaultSender?: SendTransactionFrom) {
        promiseChain = promiseChain.then(async () => atc.addTransaction(await algokit.getTransactionWithSigner(txn, defaultSender ?? client.sender)))
        return this
      },
      async atc() {
        await promiseChain
        return atc
      },
      async execute() {
        await promiseChain
        const result = await algokit.sendAtomicTransactionComposer({ atc, sendParams: {} }, client.algod)
        return {
          ...result,
          returns: result.returns?.map((val, i) => resultMappers[i] !== undefined ? resultMappers[i]!(val.returnValue) : val.returnValue)
        }
      }
    } as unknown as MahberComposer
  }
}
export type MahberComposer<TReturns extends [...any[]] = []> = {
  /**
   * Calls the dummyOpUp(uint64)uint64 ABI method.
   *
   * Dummy Op UpDummy operation to get more opcode budget@i- The number to return, necssary to deduplicate the name
   *
   * @param args The arguments for the contract call
   * @param params Any additional parameters for the call
   * @returns The typed transaction composer so you can fluently chain multiple calls or call execute to execute all queued up transactions
   */
  dummyOpUp(args: MethodArgs<'dummyOpUp(uint64)uint64'>, params?: AppClientCallCoreParams & CoreAppCallArgs): MahberComposer<[...TReturns, MethodReturn<'dummyOpUp(uint64)uint64'>]>

  /**
   * Calls the publicScalarMultBase(byte[])byte[] ABI method.
   *
   * publicScalarMultBasePublic wrapper around the scalarMultBase method, allowing it to be tested directly.@scalar- The scalar to multiply the basepoint by.
   *
   * @param args The arguments for the contract call
   * @param params Any additional parameters for the call
   * @returns The typed transaction composer so you can fluently chain multiple calls or call execute to execute all queued up transactions
   */
  publicScalarMultBase(args: MethodArgs<'publicScalarMultBase(byte[])byte[]'>, params?: AppClientCallCoreParams & CoreAppCallArgs): MahberComposer<[...TReturns, MethodReturn<'publicScalarMultBase(byte[])byte[]'>]>

  /**
   * Calls the publicScalarMult(byte[],byte[])byte[] ABI method.
   *
   * publicScalarMultPublic wrapper around the scalarMult method, allowing it to be tested directly.@scalar- The scalar to multiply the point with@point- The point that is multiplied with the scalar
   *
   * @param args The arguments for the contract call
   * @param params Any additional parameters for the call
   * @returns The typed transaction composer so you can fluently chain multiple calls or call execute to execute all queued up transactions
   */
  publicScalarMult(args: MethodArgs<'publicScalarMult(byte[],byte[])byte[]'>, params?: AppClientCallCoreParams & CoreAppCallArgs): MahberComposer<[...TReturns, MethodReturn<'publicScalarMult(byte[],byte[])byte[]'>]>

  /**
   * Calls the publicValidPoint(byte[])bool ABI method.
   *
   * publicValidPointPublic wrapper around the validPoint method, allowing it to be tested directly.@point- The point to check
   *
   * @param args The arguments for the contract call
   * @param params Any additional parameters for the call
   * @returns The typed transaction composer so you can fluently chain multiple calls or call execute to execute all queued up transactions
   */
  publicValidPoint(args: MethodArgs<'publicValidPoint(byte[])bool'>, params?: AppClientCallCoreParams & CoreAppCallArgs): MahberComposer<[...TReturns, MethodReturn<'publicValidPoint(byte[])bool'>]>

  /**
   * Calls the publicPointAdd(byte[],byte[])byte[] ABI method.
   *
   * publicPointAddPublic wrapper around the pointAdd method, allowing it to be tested directly.
   *
   * @param args The arguments for the contract call
   * @param params Any additional parameters for the call
   * @returns The typed transaction composer so you can fluently chain multiple calls or call execute to execute all queued up transactions
   */
  publicPointAdd(args: MethodArgs<'publicPointAdd(byte[],byte[])byte[]'>, params?: AppClientCallCoreParams & CoreAppCallArgs): MahberComposer<[...TReturns, MethodReturn<'publicPointAdd(byte[],byte[])byte[]'>]>

  /**
   * Calls the publicHashPointToPoint(byte[])byte[] ABI method.
   *
   * publicHashPointToPointPublic wrapper around the hashPointToPoint method, allowing it to be tested directly.
   *
   * @param args The arguments for the contract call
   * @param params Any additional parameters for the call
   * @returns The typed transaction composer so you can fluently chain multiple calls or call execute to execute all queued up transactions
   */
  publicHashPointToPoint(args: MethodArgs<'publicHashPointToPoint(byte[])byte[]'>, params?: AppClientCallCoreParams & CoreAppCallArgs): MahberComposer<[...TReturns, MethodReturn<'publicHashPointToPoint(byte[])byte[]'>]>

  /**
   * Calls the publicChallenge(byte[],byte[],byte[],byte[],byte[])byte[] ABI method.
   *
   * publicChallengePublic wrapper around the challenge method, allowing it to be tested directly.
   *
   * @param args The arguments for the contract call
   * @param params Any additional parameters for the call
   * @returns The typed transaction composer so you can fluently chain multiple calls or call execute to execute all queued up transactions
   */
  publicChallenge(args: MethodArgs<'publicChallenge(byte[],byte[],byte[],byte[],byte[])byte[]'>, params?: AppClientCallCoreParams & CoreAppCallArgs): MahberComposer<[...TReturns, MethodReturn<'publicChallenge(byte[],byte[],byte[],byte[],byte[])byte[]'>]>

  /**
   * Calls the publicChallengeLsig(byte[],byte[],byte[],byte[],byte[],pay)byte[] ABI method.
   *
   * publicChallengePublic wrapper around the challenge method, allowing it to be tested directly.
   *
   * @param args The arguments for the contract call
   * @param params Any additional parameters for the call
   * @returns The typed transaction composer so you can fluently chain multiple calls or call execute to execute all queued up transactions
   */
  publicChallengeLsig(args: MethodArgs<'publicChallengeLsig(byte[],byte[],byte[],byte[],byte[],pay)byte[]'>, params?: AppClientCallCoreParams & CoreAppCallArgs): MahberComposer<[...TReturns, MethodReturn<'publicChallengeLsig(byte[],byte[],byte[],byte[],byte[],pay)byte[]'>]>

  /**
   * Calls the deposit(pay,byte[])uint64[] ABI method.
   *
   * depositDeposit funds + public key into the contract
   *
   * @param args The arguments for the contract call
   * @param params Any additional parameters for the call
   * @returns The typed transaction composer so you can fluently chain multiple calls or call execute to execute all queued up transactions
   */
  deposit(args: MethodArgs<'deposit(pay,byte[])uint64[]'>, params?: AppClientCallCoreParams & CoreAppCallArgs): MahberComposer<[...TReturns, MethodReturn<'deposit(pay,byte[])uint64[]'>]>

  /**
   * Calls the initWithdrawalSession(pay,byte[],byte[])byte[32] ABI method.
   *
   * initWithdrawalCreates a box representing a "withdrawal session".Of key importance is the signed message string, which must contain the following:Ring Size - Chosen number of PKs, i.e. size of anonymity setKey Image - The keyimage, the one thing that is unique for a withdrawalApp Id - The id of the smart contract appNominal amount - The denomination of the contract, what was deposited originallyASA ID - Clarifies the ASA ID. (Plain Algo has ID 0, "the default" asset of Algorand)Withdrawal Address - Address of the final recipient of the fundsRelayer Address - Address of the relayer, facilitating the withdrawal (could be same as withdrawal address)Relayer Fee - The fee the relayer charges for facilitating the withdrawal (could be 0)The hash of the message becomes the id of the withdrawal session's box.
   *
   * @param args The arguments for the contract call
   * @param params Any additional parameters for the call
   * @returns The typed transaction composer so you can fluently chain multiple calls or call execute to execute all queued up transactions
   */
  initWithdrawalSession(args: MethodArgs<'initWithdrawalSession(pay,byte[],byte[])byte[32]'>, params?: AppClientCallCoreParams & CoreAppCallArgs): MahberComposer<[...TReturns, MethodReturn<'initWithdrawalSession(pay,byte[],byte[])byte[32]'>]>

  /**
   * Calls the createUploadPrecomputedChallengesBox(pay,byte[],uint64,uint64)byte[32] ABI method.
   *
   * TODO: destroyWithdrawalSession, IF SESSION LOCKED
   *
   * @param args The arguments for the contract call
   * @param params Any additional parameters for the call
   * @returns The typed transaction composer so you can fluently chain multiple calls or call execute to execute all queued up transactions
   */
  createUploadPrecomputedChallengesBox(args: MethodArgs<'createUploadPrecomputedChallengesBox(pay,byte[],uint64,uint64)byte[32]'>, params?: AppClientCallCoreParams & CoreAppCallArgs): MahberComposer<[...TReturns, MethodReturn<'createUploadPrecomputedChallengesBox(pay,byte[],uint64,uint64)byte[32]'>]>

  /**
   * Calls the uploadPrecomputedChallenges(byte[],uint64,byte[])byte[32] ABI method.
   *
   * uploadPrecomputedChallengesCreates a box and uploads the precomputed challenges into it.
   *
   * @param args The arguments for the contract call
   * @param params Any additional parameters for the call
   * @returns The typed transaction composer so you can fluently chain multiple calls or call execute to execute all queued up transactions
   */
  uploadPrecomputedChallenges(args: MethodArgs<'uploadPrecomputedChallenges(byte[],uint64,byte[])byte[32]'>, params?: AppClientCallCoreParams & CoreAppCallArgs): MahberComposer<[...TReturns, MethodReturn<'uploadPrecomputedChallenges(byte[],uint64,byte[])byte[32]'>]>

  /**
   * Calls the createIntermediateChallengesBox(pay,byte[],uint64,uint64)byte[32] ABI method.
   *
   * createIntermediateChallengesBoxCreates a box that will be used to contain intermediateChallengesBox.Should eventually be a mirror image of the corresponding uploadPrecomputedChallengesBox.
   *
   * @param args The arguments for the contract call
   * @param params Any additional parameters for the call
   * @returns The typed transaction composer so you can fluently chain multiple calls or call execute to execute all queued up transactions
   */
  createIntermediateChallengesBox(args: MethodArgs<'createIntermediateChallengesBox(pay,byte[],uint64,uint64)byte[32]'>, params?: AppClientCallCoreParams & CoreAppCallArgs): MahberComposer<[...TReturns, MethodReturn<'createIntermediateChallengesBox(pay,byte[],uint64,uint64)byte[32]'>]>

  /**
   * Calls the computeIndividualChallenge(byte[],byte[],uint64,byte[],uint64,uint64)(byte[32],uint64) ABI method.
   *
   * computeIndividualChallengeComputes an individual challenge.Note that the previous challenge is loaded specifically from the precomputed challenges box.While the calculated challenge is loaded into the intermediate challenges box.At the end we will compare if the two boxes are the same, and of course that the last challenge is the same as the initial challenge.By loading specifically from the precomputed challenges box we can verify in parallell.The odds of being able to arrive at the same initial challenge in the last challenge is astronomically low UNLESS it is a valid ring signature.Public keys are of course loaded from the contract storage.
   *
   * @param args The arguments for the contract call
   * @param params Any additional parameters for the call
   * @returns The typed transaction composer so you can fluently chain multiple calls or call execute to execute all queued up transactions
   */
  computeIndividualChallenge(args: MethodArgs<'computeIndividualChallenge(byte[],byte[],uint64,byte[],uint64,uint64)(byte[32],uint64)'>, params?: AppClientCallCoreParams & CoreAppCallArgs): MahberComposer<[...TReturns, MethodReturn<'computeIndividualChallenge(byte[],byte[],uint64,byte[],uint64,uint64)(byte[32],uint64)'>]>

  /**
   * Makes a clear_state call to an existing instance of the Mahber smart contract.
   *
   * @param args The arguments for the bare call
   * @returns The typed transaction composer so you can fluently chain multiple calls or call execute to execute all queued up transactions
   */
  clearState(args?: BareCallArgs & AppClientCallCoreParams & CoreAppCallArgs): MahberComposer<[...TReturns, undefined]>

  /**
   * Adds a transaction to the composer
   *
   * @param txn One of: A TransactionWithSigner object (returned as is), a TransactionToSign object (signer is obtained from the signer property), a Transaction object (signer is extracted from the defaultSender parameter), an async SendTransactionResult returned by one of algokit utils helpers (signer is obtained from the defaultSender parameter)
   * @param defaultSender The default sender to be used to obtain a signer where the object provided to the transaction parameter does not include a signer.
   */
  addTransaction(txn: TransactionWithSigner | TransactionToSign | Transaction | Promise<SendTransactionResult>, defaultSender?: SendTransactionFrom): MahberComposer<TReturns>
  /**
   * Returns the underlying AtomicTransactionComposer instance
   */
  atc(): Promise<AtomicTransactionComposer>
  /**
   * Executes the transaction group and returns an array of results
   */
  execute(): Promise<MahberComposerResults<TReturns>>
}
export type MahberComposerResults<TReturns extends [...any[]]> = {
  returns: TReturns
  groupId: string
  txIds: string[]
  transactions: Transaction[]
}
