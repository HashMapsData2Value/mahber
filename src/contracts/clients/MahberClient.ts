/* eslint-disable */
/**
 * This file was automatically generated by @algorandfoundation/algokit-client-generator.
 * DO NOT MODIFY IT BY HAND.
 * requires: @algorandfoundation/algokit-utils: ^2
 */
import * as algokit from '@algorandfoundation/algokit-utils'
import type {
  AppCallTransactionResult,
  AppCallTransactionResultOfType,
  CoreAppCallArgs,
  RawAppCallArgs,
  AppState,
  TealTemplateParams,
  ABIAppCallArg,
} from '@algorandfoundation/algokit-utils/types/app'
import type {
  AppClientCallCoreParams,
  AppClientCompilationParams,
  AppClientDeployCoreParams,
  AppDetails,
  ApplicationClient,
} from '@algorandfoundation/algokit-utils/types/app-client'
import type { AppSpec } from '@algorandfoundation/algokit-utils/types/app-spec'
import type { SendTransactionResult, TransactionToSign, SendTransactionFrom } from '@algorandfoundation/algokit-utils/types/transaction'
import type { TransactionWithSigner } from 'algosdk'
import { Algodv2, OnApplicationComplete, Transaction, AtomicTransactionComposer } from 'algosdk'
export const APP_SPEC: AppSpec = {
  "hints": {
    "dummyOpUp(uint64)uint64": {
      "call_config": {
        "no_op": "CALL"
      }
    },
    "publicScalarMultBase(byte[])byte[]": {
      "call_config": {
        "no_op": "CALL"
      }
    },
    "publicScalarMult(byte[],byte[])byte[]": {
      "call_config": {
        "no_op": "CALL"
      }
    },
    "publicValidPoint(byte[])bool": {
      "call_config": {
        "no_op": "CALL"
      }
    },
    "publicPointAdd(byte[],byte[])byte[]": {
      "call_config": {
        "no_op": "CALL"
      }
    },
    "publicHashPointToPoint(byte[])byte[]": {
      "call_config": {
        "no_op": "CALL"
      }
    },
    "publicChallenge(byte[],byte[],byte[],byte[],byte[])byte[]": {
      "call_config": {
        "no_op": "CALL"
      }
    },
    "deposit(byte[])uint64[]": {
      "call_config": {
        "no_op": "CALL"
      }
    },
    "createApplication()void": {
      "call_config": {
        "no_op": "CREATE"
      }
    }
  },
  "bare_call_config": {
    "no_op": "NEVER",
    "opt_in": "NEVER",
    "close_out": "NEVER",
    "update_application": "NEVER",
    "delete_application": "NEVER"
  },
  "schema": {
    "local": {
      "declared": {},
      "reserved": {}
    },
    "global": {
      "declared": {
        "algoDenomination": {
          "type": "uint64",
          "key": "algoDenomination"
        },
        "pkIndex": {
          "type": "uint64",
          "key": "pkIndex"
        }
      },
      "reserved": {}
    }
  },
  "state": {
    "global": {
      "num_byte_slices": 0,
      "num_uints": 2
    },
    "local": {
      "num_byte_slices": 0,
      "num_uints": 0
    }
  },
  "source": {
    "approval": "",
    "clear": "I3ByYWdtYSB2ZXJzaW9uIDEw"
  },
  "contract": {
    "name": "Mahber",
    "desc": "",
    "methods": [
      {
        "name": "dummyOpUp",
        "args": [
          {
            "name": "i",
            "type": "uint64",
            "desc": ""
          }
        ],
        "desc": "Dummy Op UpDummy operation to get more opcode budget@i- The number to return, necssary to deduplicate the name",
        "returns": {
          "type": "uint64",
          "desc": "the number (but we do nothing with it)"
        }
      },
      {
        "name": "publicScalarMultBase",
        "args": [
          {
            "name": "scalar",
            "type": "byte[]",
            "desc": ""
          }
        ],
        "desc": "publicScalarMultBasePublic wrapper around the scalarMultBase method, allowing it to be tested directly.@scalar- The scalar to multiply the basepoint by.",
        "returns": {
          "type": "byte[]",
          "desc": "the content of the scalarMultBase call"
        }
      },
      {
        "name": "publicScalarMult",
        "args": [
          {
            "name": "scalar",
            "type": "byte[]",
            "desc": ""
          },
          {
            "name": "point",
            "type": "byte[]",
            "desc": ""
          }
        ],
        "desc": "publicScalarMultPublic wrapper around the scalarMult method, allowing it to be tested directly.@scalar- The scalar to multiply the point with@point- The point that is multiplied with the scalar",
        "returns": {
          "type": "byte[]",
          "desc": "the content of the scalarMult call"
        }
      },
      {
        "name": "publicValidPoint",
        "args": [
          {
            "name": "point",
            "type": "byte[]",
            "desc": ""
          }
        ],
        "desc": "publicValidPointPublic wrapper around the validPoint method, allowing it to be tested directly.@point- The point to check",
        "returns": {
          "type": "bool",
          "desc": "the content of the validPoint call"
        }
      },
      {
        "name": "publicPointAdd",
        "args": [
          {
            "name": "pointA",
            "type": "byte[]",
            "desc": "The first point"
          },
          {
            "name": "pointB",
            "type": "byte[]",
            "desc": "The second point"
          }
        ],
        "desc": "publicPointAddPublic wrapper around the pointAdd method, allowing it to be tested directly.",
        "returns": {
          "type": "byte[]",
          "desc": "the content of the pointAdd call"
        }
      },
      {
        "name": "publicHashPointToPoint",
        "args": [
          {
            "name": "point",
            "type": "byte[]",
            "desc": "The point to hash"
          }
        ],
        "desc": "publicHashPointToPointPublic wrapper around the hashPointToPoint method, allowing it to be tested directly.",
        "returns": {
          "type": "byte[]",
          "desc": "the content of the hashPointToPoint call"
        }
      },
      {
        "name": "publicChallenge",
        "args": [
          {
            "name": "msg",
            "type": "byte[]",
            "desc": "The message to be signed"
          },
          {
            "name": "nonce",
            "type": "byte[]",
            "desc": "The nonce, part of the ring signature itself, aka one of the fake secret keys"
          },
          {
            "name": "cPrev",
            "type": "byte[]",
            "desc": "The previous challenge, or the base challenge if this is the first link (in which case it is part of the ring sig)"
          },
          {
            "name": "pk",
            "type": "byte[]",
            "desc": "The specific public key in the ring (indexed from the array of public keys)"
          },
          {
            "name": "keyImage",
            "type": "byte[]",
            "desc": "The key image of the signer, required for linkabiltiy to prevent double spending"
          }
        ],
        "desc": "publicChallengePublic wrapper around the challenge method, allowing it to be tested directly.",
        "returns": {
          "type": "byte[]",
          "desc": "- the content of the privateChallenge call"
        }
      },
      {
        "name": "deposit",
        "args": [
          {
            "name": "pk",
            "type": "byte[]",
            "desc": "The public key to depositTODO: Add custom EdDSA to check that the depositor knows the secret key. Useful to prevent rogue key attack, adding the negative of another pk."
          }
        ],
        "desc": "depositDeposit funds + public key into the contract",
        "returns": {
          "type": "uint64[]",
          "desc": "- the number id of the public key, if successful. fails if unsuccessful."
        }
      },
      {
        "name": "createApplication",
        "desc": "",
        "returns": {
          "type": "void",
          "desc": ""
        },
        "args": []
      }
    ]
  }
}

/**
 * Defines an onCompletionAction of 'no_op'
 */
export type OnCompleteNoOp =  { onCompleteAction?: 'no_op' | OnApplicationComplete.NoOpOC }
/**
 * Defines an onCompletionAction of 'opt_in'
 */
export type OnCompleteOptIn =  { onCompleteAction: 'opt_in' | OnApplicationComplete.OptInOC }
/**
 * Defines an onCompletionAction of 'close_out'
 */
export type OnCompleteCloseOut =  { onCompleteAction: 'close_out' | OnApplicationComplete.CloseOutOC }
/**
 * Defines an onCompletionAction of 'delete_application'
 */
export type OnCompleteDelApp =  { onCompleteAction: 'delete_application' | OnApplicationComplete.DeleteApplicationOC }
/**
 * Defines an onCompletionAction of 'update_application'
 */
export type OnCompleteUpdApp =  { onCompleteAction: 'update_application' | OnApplicationComplete.UpdateApplicationOC }
/**
 * A state record containing a single unsigned integer
 */
export type IntegerState = {
  /**
   * Gets the state value as a BigInt 
   */
  asBigInt(): bigint
  /**
   * Gets the state value as a number.
   */
  asNumber(): number
}
/**
 * A state record containing binary data
 */
export type BinaryState = {
  /**
   * Gets the state value as a Uint8Array
   */
  asByteArray(): Uint8Array
  /**
   * Gets the state value as a string
   */
  asString(): string
}

/**
 * Defines the types of available calls and state of the Mahber smart contract.
 */
export type Mahber = {
  /**
   * Maps method signatures / names to their argument and return types.
   */
  methods:
    & Record<'dummyOpUp(uint64)uint64' | 'dummyOpUp', {
      argsObj: {
        i: bigint | number
      }
      argsTuple: [i: bigint | number]
      /**
       * the number (but we do nothing with it)
       */
      returns: bigint
    }>
    & Record<'publicScalarMultBase(byte[])byte[]' | 'publicScalarMultBase', {
      argsObj: {
        scalar: Uint8Array
      }
      argsTuple: [scalar: Uint8Array]
      /**
       * the content of the scalarMultBase call
       */
      returns: Uint8Array
    }>
    & Record<'publicScalarMult(byte[],byte[])byte[]' | 'publicScalarMult', {
      argsObj: {
        scalar: Uint8Array
        point: Uint8Array
      }
      argsTuple: [scalar: Uint8Array, point: Uint8Array]
      /**
       * the content of the scalarMult call
       */
      returns: Uint8Array
    }>
    & Record<'publicValidPoint(byte[])bool' | 'publicValidPoint', {
      argsObj: {
        point: Uint8Array
      }
      argsTuple: [point: Uint8Array]
      /**
       * the content of the validPoint call
       */
      returns: boolean
    }>
    & Record<'publicPointAdd(byte[],byte[])byte[]' | 'publicPointAdd', {
      argsObj: {
        /**
         * The first point
         */
        pointA: Uint8Array
        /**
         * The second point
         */
        pointB: Uint8Array
      }
      argsTuple: [pointA: Uint8Array, pointB: Uint8Array]
      /**
       * the content of the pointAdd call
       */
      returns: Uint8Array
    }>
    & Record<'publicHashPointToPoint(byte[])byte[]' | 'publicHashPointToPoint', {
      argsObj: {
        /**
         * The point to hash
         */
        point: Uint8Array
      }
      argsTuple: [point: Uint8Array]
      /**
       * the content of the hashPointToPoint call
       */
      returns: Uint8Array
    }>
    & Record<'publicChallenge(byte[],byte[],byte[],byte[],byte[])byte[]' | 'publicChallenge', {
      argsObj: {
        /**
         * The message to be signed
         */
        msg: Uint8Array
        /**
         * The nonce, part of the ring signature itself, aka one of the fake secret keys
         */
        nonce: Uint8Array
        /**
         * The previous challenge, or the base challenge if this is the first link (in which case it is part of the ring sig)
         */
        cPrev: Uint8Array
        /**
         * The specific public key in the ring (indexed from the array of public keys)
         */
        pk: Uint8Array
        /**
         * The key image of the signer, required for linkabiltiy to prevent double spending
         */
        keyImage: Uint8Array
      }
      argsTuple: [msg: Uint8Array, nonce: Uint8Array, cPrev: Uint8Array, pk: Uint8Array, keyImage: Uint8Array]
      /**
       * - the content of the privateChallenge call
       */
      returns: Uint8Array
    }>
    & Record<'deposit(byte[])uint64[]' | 'deposit', {
      argsObj: {
        /**
         * The public key to depositTODO: Add custom EdDSA to check that the depositor knows the secret key. Useful to prevent rogue key attack, adding the negative of another pk.
         */
        pk: Uint8Array
      }
      argsTuple: [pk: Uint8Array]
      /**
       * - the number id of the public key, if successful. fails if unsuccessful.
       */
      returns: bigint[]
    }>
    & Record<'createApplication()void' | 'createApplication', {
      argsObj: {
      }
      argsTuple: []
      returns: void
    }>
  /**
   * Defines the shape of the global and local state of the application.
   */
  state: {
    global: {
      'algoDenomination'?: IntegerState
      'pkIndex'?: IntegerState
    }
  }
}
/**
 * Defines the possible abi call signatures
 */
export type MahberSig = keyof Mahber['methods']
/**
 * Defines an object containing all relevant parameters for a single call to the contract. Where TSignature is undefined, a bare call is made
 */
export type TypedCallParams<TSignature extends MahberSig | undefined> = {
  method: TSignature
  methodArgs: TSignature extends undefined ? undefined : Array<ABIAppCallArg | undefined>
} & AppClientCallCoreParams & CoreAppCallArgs
/**
 * Defines the arguments required for a bare call
 */
export type BareCallArgs = Omit<RawAppCallArgs, keyof CoreAppCallArgs>
/**
 * Maps a method signature from the Mahber smart contract to the method's arguments in either tuple of struct form
 */
export type MethodArgs<TSignature extends MahberSig> = Mahber['methods'][TSignature]['argsObj' | 'argsTuple']
/**
 * Maps a method signature from the Mahber smart contract to the method's return type
 */
export type MethodReturn<TSignature extends MahberSig> = Mahber['methods'][TSignature]['returns']

/**
 * A factory for available 'create' calls
 */
export type MahberCreateCalls = (typeof MahberCallFactory)['create']
/**
 * Defines supported create methods for this smart contract
 */
export type MahberCreateCallParams =
  | (TypedCallParams<'createApplication()void'> & (OnCompleteNoOp))
/**
 * Defines arguments required for the deploy method.
 */
export type MahberDeployArgs = {
  deployTimeParams?: TealTemplateParams
  /**
   * A delegate which takes a create call factory and returns the create call params for this smart contract
   */
  createCall?: (callFactory: MahberCreateCalls) => MahberCreateCallParams
}


/**
 * Exposes methods for constructing all available smart contract calls
 */
export abstract class MahberCallFactory {
  /**
   * Gets available create call factories
   */
  static get create() {
    return {
      /**
       * Constructs a create call for the Mahber smart contract using the createApplication()void ABI method
       *
       * @param args Any args for the contract call
       * @param params Any additional parameters for the call
       * @returns A TypedCallParams object for the call
       */
      createApplication(args: MethodArgs<'createApplication()void'>, params: AppClientCallCoreParams & CoreAppCallArgs & AppClientCompilationParams & (OnCompleteNoOp) = {}) {
        return {
          method: 'createApplication()void' as const,
          methodArgs: Array.isArray(args) ? args : [],
          ...params,
        }
      },
    }
  }

  /**
   * Constructs a no op call for the dummyOpUp(uint64)uint64 ABI method
   *
   * Dummy Op UpDummy operation to get more opcode budget@i- The number to return, necssary to deduplicate the name
   *
   * @param args Any args for the contract call
   * @param params Any additional parameters for the call
   * @returns A TypedCallParams object for the call
   */
  static dummyOpUp(args: MethodArgs<'dummyOpUp(uint64)uint64'>, params: AppClientCallCoreParams & CoreAppCallArgs) {
    return {
      method: 'dummyOpUp(uint64)uint64' as const,
      methodArgs: Array.isArray(args) ? args : [args.i],
      ...params,
    }
  }
  /**
   * Constructs a no op call for the publicScalarMultBase(byte[])byte[] ABI method
   *
   * publicScalarMultBasePublic wrapper around the scalarMultBase method, allowing it to be tested directly.@scalar- The scalar to multiply the basepoint by.
   *
   * @param args Any args for the contract call
   * @param params Any additional parameters for the call
   * @returns A TypedCallParams object for the call
   */
  static publicScalarMultBase(args: MethodArgs<'publicScalarMultBase(byte[])byte[]'>, params: AppClientCallCoreParams & CoreAppCallArgs) {
    return {
      method: 'publicScalarMultBase(byte[])byte[]' as const,
      methodArgs: Array.isArray(args) ? args : [args.scalar],
      ...params,
    }
  }
  /**
   * Constructs a no op call for the publicScalarMult(byte[],byte[])byte[] ABI method
   *
   * publicScalarMultPublic wrapper around the scalarMult method, allowing it to be tested directly.@scalar- The scalar to multiply the point with@point- The point that is multiplied with the scalar
   *
   * @param args Any args for the contract call
   * @param params Any additional parameters for the call
   * @returns A TypedCallParams object for the call
   */
  static publicScalarMult(args: MethodArgs<'publicScalarMult(byte[],byte[])byte[]'>, params: AppClientCallCoreParams & CoreAppCallArgs) {
    return {
      method: 'publicScalarMult(byte[],byte[])byte[]' as const,
      methodArgs: Array.isArray(args) ? args : [args.scalar, args.point],
      ...params,
    }
  }
  /**
   * Constructs a no op call for the publicValidPoint(byte[])bool ABI method
   *
   * publicValidPointPublic wrapper around the validPoint method, allowing it to be tested directly.@point- The point to check
   *
   * @param args Any args for the contract call
   * @param params Any additional parameters for the call
   * @returns A TypedCallParams object for the call
   */
  static publicValidPoint(args: MethodArgs<'publicValidPoint(byte[])bool'>, params: AppClientCallCoreParams & CoreAppCallArgs) {
    return {
      method: 'publicValidPoint(byte[])bool' as const,
      methodArgs: Array.isArray(args) ? args : [args.point],
      ...params,
    }
  }
  /**
   * Constructs a no op call for the publicPointAdd(byte[],byte[])byte[] ABI method
   *
   * publicPointAddPublic wrapper around the pointAdd method, allowing it to be tested directly.
   *
   * @param args Any args for the contract call
   * @param params Any additional parameters for the call
   * @returns A TypedCallParams object for the call
   */
  static publicPointAdd(args: MethodArgs<'publicPointAdd(byte[],byte[])byte[]'>, params: AppClientCallCoreParams & CoreAppCallArgs) {
    return {
      method: 'publicPointAdd(byte[],byte[])byte[]' as const,
      methodArgs: Array.isArray(args) ? args : [args.pointA, args.pointB],
      ...params,
    }
  }
  /**
   * Constructs a no op call for the publicHashPointToPoint(byte[])byte[] ABI method
   *
   * publicHashPointToPointPublic wrapper around the hashPointToPoint method, allowing it to be tested directly.
   *
   * @param args Any args for the contract call
   * @param params Any additional parameters for the call
   * @returns A TypedCallParams object for the call
   */
  static publicHashPointToPoint(args: MethodArgs<'publicHashPointToPoint(byte[])byte[]'>, params: AppClientCallCoreParams & CoreAppCallArgs) {
    return {
      method: 'publicHashPointToPoint(byte[])byte[]' as const,
      methodArgs: Array.isArray(args) ? args : [args.point],
      ...params,
    }
  }
  /**
   * Constructs a no op call for the publicChallenge(byte[],byte[],byte[],byte[],byte[])byte[] ABI method
   *
   * publicChallengePublic wrapper around the challenge method, allowing it to be tested directly.
   *
   * @param args Any args for the contract call
   * @param params Any additional parameters for the call
   * @returns A TypedCallParams object for the call
   */
  static publicChallenge(args: MethodArgs<'publicChallenge(byte[],byte[],byte[],byte[],byte[])byte[]'>, params: AppClientCallCoreParams & CoreAppCallArgs) {
    return {
      method: 'publicChallenge(byte[],byte[],byte[],byte[],byte[])byte[]' as const,
      methodArgs: Array.isArray(args) ? args : [args.msg, args.nonce, args.cPrev, args.pk, args.keyImage],
      ...params,
    }
  }
  /**
   * Constructs a no op call for the deposit(byte[])uint64[] ABI method
   *
   * depositDeposit funds + public key into the contract
   *
   * @param args Any args for the contract call
   * @param params Any additional parameters for the call
   * @returns A TypedCallParams object for the call
   */
  static deposit(args: MethodArgs<'deposit(byte[])uint64[]'>, params: AppClientCallCoreParams & CoreAppCallArgs) {
    return {
      method: 'deposit(byte[])uint64[]' as const,
      methodArgs: Array.isArray(args) ? args : [args.pk],
      ...params,
    }
  }
}

/**
 * A client to make calls to the Mahber smart contract
 */
export class MahberClient {
  /**
   * The underlying `ApplicationClient` for when you want to have more flexibility
   */
  public readonly appClient: ApplicationClient

  private readonly sender: SendTransactionFrom | undefined

  /**
   * Creates a new instance of `MahberClient`
   *
   * @param appDetails appDetails The details to identify the app to deploy
   * @param algod An algod client instance
   */
  constructor(appDetails: AppDetails, private algod: Algodv2) {
    this.sender = appDetails.sender
    this.appClient = algokit.getAppClient({
      ...appDetails,
      app: APP_SPEC
    }, algod)
  }

  /**
   * Checks for decode errors on the AppCallTransactionResult and maps the return value to the specified generic type
   *
   * @param result The AppCallTransactionResult to be mapped
   * @param returnValueFormatter An optional delegate to format the return value if required
   * @returns The smart contract response with an updated return value
   */
  protected mapReturnValue<TReturn>(result: AppCallTransactionResult, returnValueFormatter?: (value: any) => TReturn): AppCallTransactionResultOfType<TReturn> {
    if(result.return?.decodeError) {
      throw result.return.decodeError
    }
    const returnValue = result.return?.returnValue !== undefined && returnValueFormatter !== undefined
      ? returnValueFormatter(result.return.returnValue)
      : result.return?.returnValue as TReturn | undefined
      return { ...result, return: returnValue }
  }

  /**
   * Calls the ABI method with the matching signature using an onCompletion code of NO_OP
   *
   * @param typedCallParams An object containing the method signature, args, and any other relevant parameters
   * @param returnValueFormatter An optional delegate which when provided will be used to map non-undefined return values to the target type
   * @returns The result of the smart contract call
   */
  public async call<TSignature extends keyof Mahber['methods']>(typedCallParams: TypedCallParams<TSignature>, returnValueFormatter?: (value: any) => MethodReturn<TSignature>) {
    return this.mapReturnValue<MethodReturn<TSignature>>(await this.appClient.call(typedCallParams), returnValueFormatter)
  }

  /**
   * Idempotently deploys the Mahber smart contract.
   *
   * @param params The arguments for the contract calls and any additional parameters for the call
   * @returns The deployment result
   */
  public deploy(params: MahberDeployArgs & AppClientDeployCoreParams = {}): ReturnType<ApplicationClient['deploy']> {
    const createArgs = params.createCall?.(MahberCallFactory.create)
    return this.appClient.deploy({
      ...params,
      createArgs,
      createOnCompleteAction: createArgs?.onCompleteAction,
    })
  }

  /**
   * Gets available create methods
   */
  public get create() {
    const $this = this
    return {
      /**
       * Creates a new instance of the Mahber smart contract using the createApplication()void ABI method.
       *
       * @param args The arguments for the smart contract call
       * @param params Any additional parameters for the call
       * @returns The create result
       */
      async createApplication(args: MethodArgs<'createApplication()void'>, params: AppClientCallCoreParams & AppClientCompilationParams & (OnCompleteNoOp) = {}): Promise<AppCallTransactionResultOfType<MethodReturn<'createApplication()void'>>> {
        return $this.mapReturnValue(await $this.appClient.create(MahberCallFactory.create.createApplication(args, params)))
      },
    }
  }

  /**
   * Makes a clear_state call to an existing instance of the Mahber smart contract.
   *
   * @param args The arguments for the bare call
   * @returns The clear_state result
   */
  public clearState(args: BareCallArgs & AppClientCallCoreParams & CoreAppCallArgs = {}) {
    return this.appClient.clearState(args)
  }

  /**
   * Calls the dummyOpUp(uint64)uint64 ABI method.
   *
   * Dummy Op UpDummy operation to get more opcode budget@i- The number to return, necssary to deduplicate the name
   *
   * @param args The arguments for the contract call
   * @param params Any additional parameters for the call
   * @returns The result of the call: the number (but we do nothing with it)
   */
  public dummyOpUp(args: MethodArgs<'dummyOpUp(uint64)uint64'>, params: AppClientCallCoreParams & CoreAppCallArgs = {}) {
    return this.call(MahberCallFactory.dummyOpUp(args, params))
  }

  /**
   * Calls the publicScalarMultBase(byte[])byte[] ABI method.
   *
   * publicScalarMultBasePublic wrapper around the scalarMultBase method, allowing it to be tested directly.@scalar- The scalar to multiply the basepoint by.
   *
   * @param args The arguments for the contract call
   * @param params Any additional parameters for the call
   * @returns The result of the call: the content of the scalarMultBase call
   */
  public publicScalarMultBase(args: MethodArgs<'publicScalarMultBase(byte[])byte[]'>, params: AppClientCallCoreParams & CoreAppCallArgs = {}) {
    return this.call(MahberCallFactory.publicScalarMultBase(args, params))
  }

  /**
   * Calls the publicScalarMult(byte[],byte[])byte[] ABI method.
   *
   * publicScalarMultPublic wrapper around the scalarMult method, allowing it to be tested directly.@scalar- The scalar to multiply the point with@point- The point that is multiplied with the scalar
   *
   * @param args The arguments for the contract call
   * @param params Any additional parameters for the call
   * @returns The result of the call: the content of the scalarMult call
   */
  public publicScalarMult(args: MethodArgs<'publicScalarMult(byte[],byte[])byte[]'>, params: AppClientCallCoreParams & CoreAppCallArgs = {}) {
    return this.call(MahberCallFactory.publicScalarMult(args, params))
  }

  /**
   * Calls the publicValidPoint(byte[])bool ABI method.
   *
   * publicValidPointPublic wrapper around the validPoint method, allowing it to be tested directly.@point- The point to check
   *
   * @param args The arguments for the contract call
   * @param params Any additional parameters for the call
   * @returns The result of the call: the content of the validPoint call
   */
  public publicValidPoint(args: MethodArgs<'publicValidPoint(byte[])bool'>, params: AppClientCallCoreParams & CoreAppCallArgs = {}) {
    return this.call(MahberCallFactory.publicValidPoint(args, params))
  }

  /**
   * Calls the publicPointAdd(byte[],byte[])byte[] ABI method.
   *
   * publicPointAddPublic wrapper around the pointAdd method, allowing it to be tested directly.
   *
   * @param args The arguments for the contract call
   * @param params Any additional parameters for the call
   * @returns The result of the call: the content of the pointAdd call
   */
  public publicPointAdd(args: MethodArgs<'publicPointAdd(byte[],byte[])byte[]'>, params: AppClientCallCoreParams & CoreAppCallArgs = {}) {
    return this.call(MahberCallFactory.publicPointAdd(args, params))
  }

  /**
   * Calls the publicHashPointToPoint(byte[])byte[] ABI method.
   *
   * publicHashPointToPointPublic wrapper around the hashPointToPoint method, allowing it to be tested directly.
   *
   * @param args The arguments for the contract call
   * @param params Any additional parameters for the call
   * @returns The result of the call: the content of the hashPointToPoint call
   */
  public publicHashPointToPoint(args: MethodArgs<'publicHashPointToPoint(byte[])byte[]'>, params: AppClientCallCoreParams & CoreAppCallArgs = {}) {
    return this.call(MahberCallFactory.publicHashPointToPoint(args, params))
  }

  /**
   * Calls the publicChallenge(byte[],byte[],byte[],byte[],byte[])byte[] ABI method.
   *
   * publicChallengePublic wrapper around the challenge method, allowing it to be tested directly.
   *
   * @param args The arguments for the contract call
   * @param params Any additional parameters for the call
   * @returns The result of the call: - the content of the privateChallenge call
   */
  public publicChallenge(args: MethodArgs<'publicChallenge(byte[],byte[],byte[],byte[],byte[])byte[]'>, params: AppClientCallCoreParams & CoreAppCallArgs = {}) {
    return this.call(MahberCallFactory.publicChallenge(args, params))
  }

  /**
   * Calls the deposit(byte[])uint64[] ABI method.
   *
   * depositDeposit funds + public key into the contract
   *
   * @param args The arguments for the contract call
   * @param params Any additional parameters for the call
   * @returns The result of the call: - the number id of the public key, if successful. fails if unsuccessful.
   */
  public deposit(args: MethodArgs<'deposit(byte[])uint64[]'>, params: AppClientCallCoreParams & CoreAppCallArgs = {}) {
    return this.call(MahberCallFactory.deposit(args, params))
  }

  /**
   * Extracts a binary state value out of an AppState dictionary
   *
   * @param state The state dictionary containing the state value
   * @param key The key of the state value
   * @returns A BinaryState instance containing the state value, or undefined if the key was not found
   */
  private static getBinaryState(state: AppState, key: string): BinaryState | undefined {
    const value = state[key]
    if (!value) return undefined
    if (!('valueRaw' in value))
      throw new Error(`Failed to parse state value for ${key}; received an int when expected a byte array`)
    return {
      asString(): string {
        return value.value
      },
      asByteArray(): Uint8Array {
        return value.valueRaw
      }
    }
  }

  /**
   * Extracts a integer state value out of an AppState dictionary
   *
   * @param state The state dictionary containing the state value
   * @param key The key of the state value
   * @returns An IntegerState instance containing the state value, or undefined if the key was not found
   */
  private static getIntegerState(state: AppState, key: string): IntegerState | undefined {
    const value = state[key]
    if (!value) return undefined
    if ('valueRaw' in value)
      throw new Error(`Failed to parse state value for ${key}; received a byte array when expected a number`)
    return {
      asBigInt() {
        return typeof value.value === 'bigint' ? value.value : BigInt(value.value)
      },
      asNumber(): number {
        return typeof value.value === 'bigint' ? Number(value.value) : value.value
      },
    }
  }

  /**
   * Returns the smart contract's global state wrapped in a strongly typed accessor with options to format the stored value
   */
  public async getGlobalState(): Promise<Mahber['state']['global']> {
    const state = await this.appClient.getGlobalState()
    return {
      get algoDenomination() {
        return MahberClient.getIntegerState(state, 'algoDenomination')
      },
      get pkIndex() {
        return MahberClient.getIntegerState(state, 'pkIndex')
      },
    }
  }

  public compose(): MahberComposer {
    const client = this
    const atc = new AtomicTransactionComposer()
    let promiseChain:Promise<unknown> = Promise.resolve()
    const resultMappers: Array<undefined | ((x: any) => any)> = []
    return {
      dummyOpUp(args: MethodArgs<'dummyOpUp(uint64)uint64'>, params?: AppClientCallCoreParams & CoreAppCallArgs) {
        promiseChain = promiseChain.then(() => client.dummyOpUp(args, {...params, sendParams: {...params?.sendParams, skipSending: true, atc}}))
        resultMappers.push(undefined)
        return this
      },
      publicScalarMultBase(args: MethodArgs<'publicScalarMultBase(byte[])byte[]'>, params?: AppClientCallCoreParams & CoreAppCallArgs) {
        promiseChain = promiseChain.then(() => client.publicScalarMultBase(args, {...params, sendParams: {...params?.sendParams, skipSending: true, atc}}))
        resultMappers.push(undefined)
        return this
      },
      publicScalarMult(args: MethodArgs<'publicScalarMult(byte[],byte[])byte[]'>, params?: AppClientCallCoreParams & CoreAppCallArgs) {
        promiseChain = promiseChain.then(() => client.publicScalarMult(args, {...params, sendParams: {...params?.sendParams, skipSending: true, atc}}))
        resultMappers.push(undefined)
        return this
      },
      publicValidPoint(args: MethodArgs<'publicValidPoint(byte[])bool'>, params?: AppClientCallCoreParams & CoreAppCallArgs) {
        promiseChain = promiseChain.then(() => client.publicValidPoint(args, {...params, sendParams: {...params?.sendParams, skipSending: true, atc}}))
        resultMappers.push(undefined)
        return this
      },
      publicPointAdd(args: MethodArgs<'publicPointAdd(byte[],byte[])byte[]'>, params?: AppClientCallCoreParams & CoreAppCallArgs) {
        promiseChain = promiseChain.then(() => client.publicPointAdd(args, {...params, sendParams: {...params?.sendParams, skipSending: true, atc}}))
        resultMappers.push(undefined)
        return this
      },
      publicHashPointToPoint(args: MethodArgs<'publicHashPointToPoint(byte[])byte[]'>, params?: AppClientCallCoreParams & CoreAppCallArgs) {
        promiseChain = promiseChain.then(() => client.publicHashPointToPoint(args, {...params, sendParams: {...params?.sendParams, skipSending: true, atc}}))
        resultMappers.push(undefined)
        return this
      },
      publicChallenge(args: MethodArgs<'publicChallenge(byte[],byte[],byte[],byte[],byte[])byte[]'>, params?: AppClientCallCoreParams & CoreAppCallArgs) {
        promiseChain = promiseChain.then(() => client.publicChallenge(args, {...params, sendParams: {...params?.sendParams, skipSending: true, atc}}))
        resultMappers.push(undefined)
        return this
      },
      deposit(args: MethodArgs<'deposit(byte[])uint64[]'>, params?: AppClientCallCoreParams & CoreAppCallArgs) {
        promiseChain = promiseChain.then(() => client.deposit(args, {...params, sendParams: {...params?.sendParams, skipSending: true, atc}}))
        resultMappers.push(undefined)
        return this
      },
      clearState(args?: BareCallArgs & AppClientCallCoreParams & CoreAppCallArgs) {
        promiseChain = promiseChain.then(() => client.clearState({...args, sendParams: {...args?.sendParams, skipSending: true, atc}}))
        resultMappers.push(undefined)
        return this
      },
      addTransaction(txn: TransactionWithSigner | TransactionToSign | Transaction | Promise<SendTransactionResult>, defaultSender?: SendTransactionFrom) {
        promiseChain = promiseChain.then(async () => atc.addTransaction(await algokit.getTransactionWithSigner(txn, defaultSender ?? client.sender)))
        return this
      },
      async atc() {
        await promiseChain
        return atc
      },
      async execute() {
        await promiseChain
        const result = await algokit.sendAtomicTransactionComposer({ atc, sendParams: {} }, client.algod)
        return {
          ...result,
          returns: result.returns?.map((val, i) => resultMappers[i] !== undefined ? resultMappers[i]!(val.returnValue) : val.returnValue)
        }
      }
    } as unknown as MahberComposer
  }
}
export type MahberComposer<TReturns extends [...any[]] = []> = {
  /**
   * Calls the dummyOpUp(uint64)uint64 ABI method.
   *
   * Dummy Op UpDummy operation to get more opcode budget@i- The number to return, necssary to deduplicate the name
   *
   * @param args The arguments for the contract call
   * @param params Any additional parameters for the call
   * @returns The typed transaction composer so you can fluently chain multiple calls or call execute to execute all queued up transactions
   */
  dummyOpUp(args: MethodArgs<'dummyOpUp(uint64)uint64'>, params?: AppClientCallCoreParams & CoreAppCallArgs): MahberComposer<[...TReturns, MethodReturn<'dummyOpUp(uint64)uint64'>]>

  /**
   * Calls the publicScalarMultBase(byte[])byte[] ABI method.
   *
   * publicScalarMultBasePublic wrapper around the scalarMultBase method, allowing it to be tested directly.@scalar- The scalar to multiply the basepoint by.
   *
   * @param args The arguments for the contract call
   * @param params Any additional parameters for the call
   * @returns The typed transaction composer so you can fluently chain multiple calls or call execute to execute all queued up transactions
   */
  publicScalarMultBase(args: MethodArgs<'publicScalarMultBase(byte[])byte[]'>, params?: AppClientCallCoreParams & CoreAppCallArgs): MahberComposer<[...TReturns, MethodReturn<'publicScalarMultBase(byte[])byte[]'>]>

  /**
   * Calls the publicScalarMult(byte[],byte[])byte[] ABI method.
   *
   * publicScalarMultPublic wrapper around the scalarMult method, allowing it to be tested directly.@scalar- The scalar to multiply the point with@point- The point that is multiplied with the scalar
   *
   * @param args The arguments for the contract call
   * @param params Any additional parameters for the call
   * @returns The typed transaction composer so you can fluently chain multiple calls or call execute to execute all queued up transactions
   */
  publicScalarMult(args: MethodArgs<'publicScalarMult(byte[],byte[])byte[]'>, params?: AppClientCallCoreParams & CoreAppCallArgs): MahberComposer<[...TReturns, MethodReturn<'publicScalarMult(byte[],byte[])byte[]'>]>

  /**
   * Calls the publicValidPoint(byte[])bool ABI method.
   *
   * publicValidPointPublic wrapper around the validPoint method, allowing it to be tested directly.@point- The point to check
   *
   * @param args The arguments for the contract call
   * @param params Any additional parameters for the call
   * @returns The typed transaction composer so you can fluently chain multiple calls or call execute to execute all queued up transactions
   */
  publicValidPoint(args: MethodArgs<'publicValidPoint(byte[])bool'>, params?: AppClientCallCoreParams & CoreAppCallArgs): MahberComposer<[...TReturns, MethodReturn<'publicValidPoint(byte[])bool'>]>

  /**
   * Calls the publicPointAdd(byte[],byte[])byte[] ABI method.
   *
   * publicPointAddPublic wrapper around the pointAdd method, allowing it to be tested directly.
   *
   * @param args The arguments for the contract call
   * @param params Any additional parameters for the call
   * @returns The typed transaction composer so you can fluently chain multiple calls or call execute to execute all queued up transactions
   */
  publicPointAdd(args: MethodArgs<'publicPointAdd(byte[],byte[])byte[]'>, params?: AppClientCallCoreParams & CoreAppCallArgs): MahberComposer<[...TReturns, MethodReturn<'publicPointAdd(byte[],byte[])byte[]'>]>

  /**
   * Calls the publicHashPointToPoint(byte[])byte[] ABI method.
   *
   * publicHashPointToPointPublic wrapper around the hashPointToPoint method, allowing it to be tested directly.
   *
   * @param args The arguments for the contract call
   * @param params Any additional parameters for the call
   * @returns The typed transaction composer so you can fluently chain multiple calls or call execute to execute all queued up transactions
   */
  publicHashPointToPoint(args: MethodArgs<'publicHashPointToPoint(byte[])byte[]'>, params?: AppClientCallCoreParams & CoreAppCallArgs): MahberComposer<[...TReturns, MethodReturn<'publicHashPointToPoint(byte[])byte[]'>]>

  /**
   * Calls the publicChallenge(byte[],byte[],byte[],byte[],byte[])byte[] ABI method.
   *
   * publicChallengePublic wrapper around the challenge method, allowing it to be tested directly.
   *
   * @param args The arguments for the contract call
   * @param params Any additional parameters for the call
   * @returns The typed transaction composer so you can fluently chain multiple calls or call execute to execute all queued up transactions
   */
  publicChallenge(args: MethodArgs<'publicChallenge(byte[],byte[],byte[],byte[],byte[])byte[]'>, params?: AppClientCallCoreParams & CoreAppCallArgs): MahberComposer<[...TReturns, MethodReturn<'publicChallenge(byte[],byte[],byte[],byte[],byte[])byte[]'>]>

  /**
   * Calls the deposit(byte[])uint64[] ABI method.
   *
   * depositDeposit funds + public key into the contract
   *
   * @param args The arguments for the contract call
   * @param params Any additional parameters for the call
   * @returns The typed transaction composer so you can fluently chain multiple calls or call execute to execute all queued up transactions
   */
  deposit(args: MethodArgs<'deposit(byte[])uint64[]'>, params?: AppClientCallCoreParams & CoreAppCallArgs): MahberComposer<[...TReturns, MethodReturn<'deposit(byte[])uint64[]'>]>

  /**
   * Makes a clear_state call to an existing instance of the Mahber smart contract.
   *
   * @param args The arguments for the bare call
   * @returns The typed transaction composer so you can fluently chain multiple calls or call execute to execute all queued up transactions
   */
  clearState(args?: BareCallArgs & AppClientCallCoreParams & CoreAppCallArgs): MahberComposer<[...TReturns, undefined]>

  /**
   * Adds a transaction to the composer
   *
   * @param txn One of: A TransactionWithSigner object (returned as is), a TransactionToSign object (signer is obtained from the signer property), a Transaction object (signer is extracted from the defaultSender parameter), an async SendTransactionResult returned by one of algokit utils helpers (signer is obtained from the defaultSender parameter)
   * @param defaultSender The default sender to be used to obtain a signer where the object provided to the transaction parameter does not include a signer.
   */
  addTransaction(txn: TransactionWithSigner | TransactionToSign | Transaction | Promise<SendTransactionResult>, defaultSender?: SendTransactionFrom): MahberComposer<TReturns>
  /**
   * Returns the underlying AtomicTransactionComposer instance
   */
  atc(): Promise<AtomicTransactionComposer>
  /**
   * Executes the transaction group and returns an array of results
   */
  execute(): Promise<MahberComposerResults<TReturns>>
}
export type MahberComposerResults<TReturns extends [...any[]]> = {
  returns: TReturns
  groupId: string
  txIds: string[]
  transactions: Transaction[]
}
